container BAG : using = "typeringen;eenheden"
{
	unit<uint32>    RegioUnit_buurt   := /Brondata/RegioIndelingen/buurt;
	unit<uint32>    RegioUnit_wijk    := /Brondata/RegioIndelingen/wijk;
	// unit<uint32>    RegioUnit_PC4     := /Brondata/RegioIndelingen/PC4_vlakken;
	unit<uint32>    RegioUnit_PC6     := /Brondata/RegioIndelingen/PC6_vlakken;
	unit<uint32>    RegioUnit_gem     := /Brondata/RegioIndelingen/gemeente;
	unit<uint32>    RegioUnit_nvm     := /Brondata/RegioIndelingen/nvm;
	unit<uint32>    RegioUnit_aggl    := /Brondata/RegioIndelingen/gemeente/UrbanCores;
	unit<uint32>    RegioUnit_corop   := /Brondata/RegioIndelingen/corop;
	unit<uint32>    RegioUnit_prov    := /Brondata/RegioIndelingen/provincie;
	unit<uint32>    RegioUnit_NL      := /Brondata/RegioIndelingen/nederland;
	unit<uint32>    RegioUnit_bbg     := Brondata/RegioIndelingen/BBG_2000;
	unit<uint32>    RegioUnit_MRA     := Brondata/RegioIndelingen/MRA/MRA1;
	unit<uint32>    RegioUnit_AMS     := Brondata/RegioIndelingen/Gemeente/Amsterdam;
	unit<uint32>    Perceel           := Brondata/BRK/Perceel;
	
	unit<uint8>     WP2               := typeringen/bag/type_woonpand_2;
	unit<uint8>     WP3               := typeringen/bag/type_woonpand_3;
	unit<uint8>     WP4               := typeringen/bag/type_woonpand_4;
	unit<uint8>     WP5               := typeringen/bag/type_woonpand;
	unit<uint8>     WP5_src           := typeringen/bag/type_woonpand_src;
	
	unit<uint8>     vbo_gebruiksdoel         := typeringen/bag/vbo_gebruiksdoel;
	unit<uint8>     vbo_gebruiksdoel_ext     := typeringen/bag/vbo_gebruiksdoel_ext;
	unit<uint8>     vbo_gebruiksdoel_english := typeringen/bag/vbo_gebruiksdoel_english;
	unit<uint8>     vbo_status               := typeringen/bag/vbo_status;
	unit<uint8>     pand_status               := typeringen/bag/pand_status;
	
	parameter<string> vbo_voorraad_status_str  := 'status_rel == vbo_status/v/verblijfsobject_in_gebruik || status_rel == vbo_status/v/verblijfsobject_in_gebruik_niet_ingemeten || status_rel == vbo_status/v/verblijfsobject_buiten_gebruik || status_rel == vbo_status/v/verbouwing_verblijfsobject';
	parameter<string> pand_voorraad_status_str := 'status_rel == pand_status/V/pand_in_gebruik || status_rel == pand_status/V/pand_in_gebruik_niet_ingemeten || status_rel == pand_status/V/pand_buiten_gebruik || status_rel == pand_status/V/verbouwing_pand';
	
	container Snapshots
	{
		container Panden:= 
			for_each_ne(
				typeringen/tijd/kwartalen/name
				, 'MaakPanden(' +string(typeringen/tijd/kwartalen/value)+ ')'
			)
		{
			unit<uint32> woonvbo_en_hoogte_2018
			:	StorageName     = "%SourceDataDir%/BAG/snapshots.ext/20180101_aug18/pand_met_woonvbo_hoogte.fss"
			,	StorageReadOnly = "True"
			{
				attribute<rdc_mm>                geometry_mm (poly);
				attribute<rdc>                   geometry (poly);
				attribute<string>                           identificatie;
				attribute<uint64>                           bag_nr                       := uint64(identificatie);
				attribute<jaar>                             AHN_inwinjaar_corr;
				attribute<uint16>                           hoogte;
				attribute<float32>                          hoogte_nok;
				attribute<float32>                          hoogte_maaiveld;
				attribute<float32>                          hoogte_proxy;
				attribute<float32>                          hoogte_aux; 
			}
			unit<uint32> woonvbo_en_hoogte_2019
			:	StorageName     = "%SourceDataDir%/PHN/PHN_20190101.fss"
			,	StorageReadOnly = "True"
			{
				attribute<rdc>                   geometry (poly) := rjoin(identificatie, Brondata/BAG/Snapshots/Panden/Y201901/pand/identificatie, Brondata/BAG/Snapshots/Panden/Y201901/pand/geometry);

				attribute<string>                           identificatie;
				attribute<uint64>                           bag_nr                       := uint64(identificatie);
				attribute<jaar>                             AHN_inwinjaar;
				attribute<uint16>                           hoogte;
				attribute<bool>                             IsAHN2;
				attribute<bool>                             IsAHN3;
			}
			unit<uint32> woonvbo_en_hoogte_2020
			:	StorageName     = "%SourceDataDir%/PHN/PHN_20200101.fss"
			,	StorageReadOnly = "True"
			{
				attribute<rdc>                   geometry (poly) := rjoin(identificatie, Brondata/BAG/Snapshots/Panden/Y202001/pand/identificatie, Brondata/BAG/Snapshots/Panden/Y202001/pand/geometry);

				attribute<string>                           identificatie;
				attribute<uint64>                           bag_nr                       := uint64(identificatie);
				attribute<jaar>                             AHN_inwinjaar;
				attribute<uint16>                           hoogte;
			}
			unit<uint32> woonvbo_en_hoogte_2021
			:	StorageName     = "%SourceDataDir%/PHN/PHN_20210101.fss"
			,	StorageReadOnly = "True"
			{
				attribute<rdc>                   geometry (poly) := rjoin(identificatie, Brondata/BAG/Snapshots/Panden/Y202101/pand/identificatie, Brondata/BAG/Snapshots/Panden/Y202101/pand/geometry);

				attribute<string>                           identificatie;
				attribute<uint64>                           bag_nr                       := uint64(identificatie);
				attribute<jaar>                             AHN_inwinjaar;
				attribute<uint16>                           hoogte;
			}
		}
			
		container VBOs:= 
			for_each_ne(
				tijd/kwartalen/name
				, 'MaakVBOs(' +string(tijd/kwartalen/value)+ ')'
			);
		
		
		container Adressen:= 
			for_each_ne(
				tijd/kwartalen/name
				, 'MaakAdressen(' +string(tijd/kwartalen/value)+ ')'
			);
			
		container Ligplaatsen := 
			for_each_ne(
				tijd/kwartalen/name
				, 'MaakLigplaatsen(' +string(tijd/kwartalen/value)+ ')'
			);
		
		container Standplaatsen := 
			for_each_ne(
				tijd/kwartalen/name
				, 'MaakStandplaatsen(' +string(tijd/kwartalen/value)+ ')'
			);
		
		Template MaakPanden : using = "Typeringen"
		{
			/////
			parameter<uint32> Year;
			
			/////
			parameter<string> BAG_dir := Parameters/BAG_dir == 'NORMAAL' ? 'BAG_DataDir'  : 'BAG_DataDir_OVSRV6';
			parameter<uint32> PrevYear := Year - 100;
			
			parameter<string> VoorraadStatus_str := Parameters/Use_BAG_VoorraadStatussen 
														? '(src/meta/status == ''Pand in gebruik''  || src/meta/status == ''Pand in gebruik (niet ingemeten)'' || src/meta/status == ''Pand buiten gebruik'' || src/meta/status == ''Verbouwing pand'')'
														: 'const(TRUE,src)';
			parameter<string> Selectie_str       := Parameters/BAG_Selection_Area == 'Aggl'
														? 'IsDefined(src/Aggl_rel)'
														: Parameters/BAG_Selection_Area == 'MRA'
															? 'IsDefined(src/mra_rel)'
															: Parameters/BAG_Selection_Area == 'AMS'
																? 'IsDefined(src/ams_rel)'
																: 'const(TRUE,src)';
																
			unit<uint32>  vbo_src_domein                 := ='VBOs/Y' + string(Year) + '/src';
			unit<uint32>  vbo_domein                     := ='VBOs/Y' + string(Year) + '/vbo';
			unit<uint32>  adres_domein                   := ='Adressen/Y' +string(Year)+ '/adres';
		
			unit<uint32>  vbo_bijeenkomst_domein         := vbo_domein/GebruiksdoelSets/bijeenkomst/GebruiksdoelSet;
			unit<uint32>  vbo_cel_domein                 := vbo_domein/GebruiksdoelSets/cel/GebruiksdoelSet;
			unit<uint32>  vbo_gezondheidszorg_domein     := vbo_domein/GebruiksdoelSets/gezondheidszorg/GebruiksdoelSet;
			unit<uint32>  vbo_industrie_domein           := vbo_domein/GebruiksdoelSets/industrie/GebruiksdoelSet;
			unit<uint32>  vbo_kantoor_domein             := vbo_domein/GebruiksdoelSets/kantoor/GebruiksdoelSet;
			unit<uint32>  vbo_logies_domein              := vbo_domein/GebruiksdoelSets/logies/GebruiksdoelSet;
			unit<uint32>  vbo_onderwijs_domein           := vbo_domein/GebruiksdoelSets/onderwijs/GebruiksdoelSet;
			unit<uint32>  vbo_overige_gebruiks_domein    := vbo_domein/GebruiksdoelSets/overige_gebruiks/GebruiksdoelSet;
			unit<uint32>  vbo_sport_domein               := vbo_domein/GebruiksdoelSets/sport/GebruiksdoelSet;
			unit<uint32>  vbo_winkel_domein              := vbo_domein/GebruiksdoelSets/winkel/GebruiksdoelSet;
			unit<uint32>  vbo_woon_domein                := vbo_domein/GebruiksdoelSets/woon/GebruiksdoelSet;
			unit<uint32>  vbo_niet_woon_domein           := vbo_domein/GebruiksdoelSets/niet_woon;
				
			unit<uint32> import
			:	StorageName     = "='%'+BAG_dir+'%/BAG/snapshots.ext/' +string(Year)+ '01_RS/pand.fss'"
			,	StorageReadOnly = "True"
			{
				attribute<rdc_mm>                       geometry_mm (poly);
				attribute<string>                       identificatie;
				attribute<jaar>                         bouwjaar;
				attribute<WP5_src>                      woonpand_type;
				attribute<string>                       status;
			}
			unit<uint32> src := import
			{
				attribute<rdc_mm>                       geometry_mm_simplified (poly) := bg_simplify_multi_polygon(geometry_mm, parameters/Simplify_Value);
				attribute<rdc>                          geometry (poly)               := geometry_mm_chosen[rdc];
				attribute<rdc_mm>                       geometry_mm_chosen (poly)     := =parameters/UseSimplify 
																							? 'geometry_mm_simplified'
																							: 'geometry_mm';
				attribute<uint64>                       bag_nr                       := uint64(identificatie);
				attribute<jaar>                         bouwjaar_trunc               := = replace(parameters/bouwjaar_truncation_expr, '@YYYY@', string(Year / 100));
				attribute<m2>                           footprint                    := area(geometry, m2);
				attribute<rdc>                          centroid                     := centroid_or_mid(geometry);
				
				attribute<WP5_src>                      WPSrc_rel                    := woonpand_type;
				attribute<WP5>                          WP5_rel                      := rjoin(WPSrc_rel, id(WP5_src), WP5_src/WP5_rel);
				attribute<WP2>                          WP2_rel                      := WP5/woonpand_2_rel[WP5_rel];
				attribute<WP3>                          WP3_rel                      := WP5/woonpand_3_rel[WP5_rel];
				attribute<WP4>                          WP4_rel                      := WP5/woonpand_4_rel[WP5_rel];
				
				attribute<typeringen/bag/pand_status>   status_rel                   := rlookup(status, typeringen/bag/pand_status/label);
				
				attribute<.>                            vbo_src_rel (vbo_src_domein) := vbo_src_domein/pand_src_rel;
				
				attribute<RegioUnit_MRA>                mra_rel                      := point_in_polygon(centroid, RegioUnit_MRA/geometry);
				attribute<RegioUnit_AMS>                AMS_rel                      := point_in_polygon(centroid, RegioUnit_AMS/geometry);
				attribute<RegioUnit_Aggl>               Aggl_rel                     := point_in_polygon(centroid, RegioUnit_Aggl/geometry);
				
				attribute<rdc_mm>                       NW                           := lower_bound(src/geometry_mm_chosen);
				attribute<rdc_mm>                       SE                           := upper_bound(src/geometry_mm_chosen);
				attribute<int32>                        X_ext                        := PointCol(SE) - PointCol(NW);
				attribute<int32>                        Y_ext                        := PointRow(SE) - PointRow(NW);

				attribute<bool>                         pand_selection_condition     := ='src/X_ext < 1000000i && src/Y_ext < 1000000i && '+VoorraadStatus_str+' && '+Selectie_str;
			}
			
			unit<uint32> pand := select_with_attr_by_org_rel(src, src/pand_selection_condition)
			{
				attribute<nrwonha>                             count_ha (NL_grid/domain)                                   := count(centroid, NL_grid_domain_rel)[nrwonha]; 
				attribute<m2>                                  sum_vbo_opp                                                 := sum(vbo_domein/oppervlakte_trunc_m2, vbo_domein/pand_rel);
				
				attribute<m2>                                  sum_vbo_opp_woon                                            := sum(vbo_domein/vbo_opp_woon, vbo_domein/pand_rel);
				attribute<m2>                                  sum_vbo_opp_niet_woon                                       := sum(vbo_domein/vbo_opp_niet_woon, vbo_domein/pand_rel);
				attribute<m2>                                  sum_vbo_opp_woon_voorraad                                   := sum(vbo_domein/vbo_opp_woon_voorraad, vbo_domein/pand_rel);
				attribute<m2>                                  sum_vbo_opp_niet_woon_voorraad                              := sum(vbo_domein/vbo_opp_niet_woon_voorraad, vbo_domein/pand_rel);
				attribute<m2>                                  avg_vbo_opp_woon_voorraad                                   := mean(vbo_domein/vbo_opp_woon_voorraad, vbo_domein/pand_rel);
				attribute<m2>                                  avg_vbo_opp_niet_woon_voorraad                              := mean(vbo_domein/vbo_opp_niet_woon_voorraad, vbo_domein/pand_rel);
				
				attribute<float32>                             avg_vbo_opp_woon                                            := sum_vbo_opp_woon[float32] / count_vbo_pand_woon[float32];

				attribute<pand>                                pand_niet_woon_vbo_rel (vbo_niet_woon_domein)               := point_in_polygon(vbo_niet_woon_domein/geometry, geometry);
				attribute<m2>                                  sum_vbo_pand_opp_niet_woon_org                              := sum(vbo_niet_woon_domein/oppervlakte_trunc, pand_niet_woon_vbo_rel) == 0[m2]
																																? (0/0)[m2]
																																: sum(vbo_niet_woon_domein/oppervlakte_trunc, pand_niet_woon_vbo_rel) < footprint 
																																	? footprint
																																	: sum(vbo_niet_woon_domein/oppervlakte_trunc, pand_niet_woon_vbo_rel) == 0[m2]
																																		? (0/0)[m2]
																																		: sum(vbo_niet_woon_domein/oppervlakte_trunc, pand_niet_woon_vbo_rel);
				attribute<float32>                             sum_vbo_pand_opp_niet_woon                                 := ratio_vbo_pand_opp >= 100f ? (0/0)[float32] : sum_vbo_pand_opp_niet_woon_org;
				attribute<float32>                             ratio_vbo_pand_opp                                         := sum_vbo_pand_opp_niet_woon_org / footprint;

				attribute<.>                                   pand_adres_rel  (adres_domein)                              := point_in_polygon(adres_domein/geometry, geometry);
				attribute<string>                              postcode_huisnr (adres_domein)                              := rjoin(pand_adres_rel, id(adres_domein), adres_domein/postcode_huisnr_huisletter_toev);

				attribute<uint32>                              count_vbo_pand_voorraad                                     := pcount(vbo_domein/IsVoorraad ? pand_vbo_rel : (0/0)[.]);
				attribute<uint32>                              count_vbo_pand                                              := pcount(pand_vbo_rel);
				attribute<uint32>                              count_vbo_pand_woon                                         := pcount(pand_vbo_rel_woon);
				attribute<uint32>                              count_vbo_pand_woon_voorraad                                := pcount(vbo_woon_domein/IsVoorraad ? pand_vbo_rel_woon : (0/0)[.]);
				attribute<uint32>                              count_vbo_pand_woon_gevormd                                 := pcount(vbo_woon_domein/IsGevormd ? pand_vbo_rel_woon : (0/0)[.]);
				attribute<uint32>                              count_vbo_pand_niet_woon                                    := pcount(pand_vbo_rel_niet_woon);
				attribute<uint32>                              count_vbo_pand_niet_woon_voorraad                           := pcount(vbo_niet_woon_domein/IsVoorraad ? pand_vbo_rel_niet_woon : (0/0)[.]);
				attribute<uint32>                              count_vbo_pand_niet_woon_gevormd                            := pcount(vbo_niet_woon_domein/IsGevormd ? pand_vbo_rel_niet_woon : (0/0)[.]);
				attribute<uint32>                              count_vbo_pand_alle_functies                                := count_vbo_pand_woon + count_vbo_pand_niet_woon;
				attribute<uint32>                              count_vbo_pand_overigegebruiks                              := pcount(pand_vbo_rel_overige_gebruiks);
				
				attribute<NL_grid/domain>                      NL_grid_domain_rel                                          := centroid[NL_grid/domain];
				attribute<perceel>                             perceel_rel                                                 := point_in_polygon(centroid, perceel/geometry);

				attribute<.>                                   pand_vbo_rel                  (vbo_domein)                  := vbo_domein/pand_rel;
				attribute<.>                                   pand_vbo_rel_niet_woon        (vbo_niet_woon_domein)        := vbo_niet_woon_domein/pand_rel;
				attribute<.>                                   pand_vbo_rel_bijeenkomst      (vbo_bijeenkomst_domein)      := vbo_bijeenkomst_domein/pand_rel;
				attribute<.>                                   pand_vbo_rel_cel              (vbo_cel_domein)              := vbo_cel_domein/pand_rel;
				attribute<.>                                   pand_vbo_rel_gezondheidszorg  (vbo_gezondheidszorg_domein)  := vbo_gezondheidszorg_domein/pand_rel;
				attribute<.>                                   pand_vbo_rel_industrie        (vbo_industrie_domein)        := vbo_industrie_domein/pand_rel;
				attribute<.>                                   pand_vbo_rel_kantoor          (vbo_kantoor_domein)          := vbo_kantoor_domein/pand_rel;
				attribute<.>                                   pand_vbo_rel_logies           (vbo_logies_domein)           := vbo_logies_domein/pand_rel;
				attribute<.>                                   pand_vbo_rel_onderwijs        (vbo_onderwijs_domein)        := vbo_onderwijs_domein/pand_rel;
				attribute<.>                                   pand_vbo_rel_overige_gebruiks (vbo_overige_gebruiks_domein) := vbo_overige_gebruiks_domein/pand_rel;
				attribute<.>                                   pand_vbo_rel_sport            (vbo_sport_domein)            := vbo_sport_domein/pand_rel;
				attribute<.>                                   pand_vbo_rel_winkel           (vbo_winkel_domein)           := vbo_winkel_domein/pand_rel;
				attribute<.>                                   pand_vbo_rel_woon             (vbo_woon_domein)             := vbo_woon_domein/pand_rel;
				
				attribute<uint16>                              pand_hoogte                                                 := rjoin(bag_nr, woonvbo_en_hoogte_2021/bag_nr, woonvbo_en_hoogte_2021/hoogte);
				
				attribute<bool>                                HasWoon                                                     := count_vbo_pand_woon_voorraad >= 1;
				attribute<bool>                                HasOverigeGebruiks                                          := count_vbo_pand_overigegebruiks > 0;
				attribute<bool>                                HasVBO                                                      := count_vbo_pand > 0;
				
				container Footprint_VBOOpp_per_vbo_functie :=
					for_each_nedv(
						vbo_gebruiksdoel/name
						,'((sum(vbo_domein/gebruiksdoelen_cbs/'+vbo_gebruiksdoel/name+' ? vbo_domein/oppervlakte_trunc[m2] : (0/0)[m2], vbo_domein/pand_rel)) / sum_vbo_opp[m2]) * footprint'
						, pand
						, float32
					)
				{
					attribute<vbo_gebruiksdoel> ArgMax (..) := ='!IsDefined(bijeenkomst) ? (0/0)[vbo_gebruiksdoel] : ArgMax('+AsItemList(vbo_gebruiksdoel/name)+')[vbo_gebruiksdoel]';
				}
				
				container Count_functies := 
					for_each_nedv(
						vbo_gebruiksdoel/name
						, 'pcount(pand_vbo_rel_'+vbo_gebruiksdoel/name+')'
						, pand
						, uint32
					);

				unit<uint32> pand_met_woon_vbo := select_with_org_rel(pand/count_vbo_pand_woon > 0 && pand/footprint > 0f)
				{
					attribute<rdc_mm>                             geometry_mm (polygon)    := org_rel -> geometry_mm_chosen;
					attribute<rdc>                                geometry (polygon)       := geometry_mm[rdc];
					// attribute<string>                             identificatie            := org_rel -> identificatie;
					attribute<uint64>                             bag_nr                   := org_rel -> bag_nr;
					attribute<jaar>                               bouwjaar_trunc           := org_rel -> bouwjaar_trunc;
					attribute<WP5>                                WP5_rel                  := org_rel -> WP5_rel;
					attribute<WP2>                                WP2_rel                  := org_rel -> WP2_rel;
					attribute<m2>                                 footprint                := org_rel -> footprint;
					attribute<uint32>                             count_vbo_pand_woon      := org_rel -> count_vbo_pand_woon;
					attribute<uint32>                             count_vbo_pand_niet_woon := org_rel -> count_vbo_pand_niet_woon;
					attribute<m2>                                 sum_vbo_opp_woon         := org_rel -> sum_vbo_opp_woon;
					attribute<m2>                                 sum_vbo_opp_niet_woon    := org_rel -> sum_vbo_opp_niet_woon;
					attribute<uint16>                             pand_hoogte              := org_rel -> pand_hoogte;
					
					attribute<rdc>                                pand_centroid            := org_rel -> centroid;
					attribute<RegioUnit_buurt>                    pand_buurt_rel           := point_in_polygon(pand_centroid, RegioUnit_buurt/geometry);
					attribute<NL_grid/domain>                     NL_grid_domain_rel       := pand_centroid[NL_grid/domain];
				}
				
				unit<uint32> pand_met_vbo := select_with_org_rel(pand/count_vbo_pand > 0)
				{
					attribute<rdc_mm>                             geometry_mm (poly)                  := org_rel -> geometry_mm_chosen;
					attribute<rdc>                                geometry (poly)                     := geometry_mm[rdc];
					attribute<rdc>                                centroid                            := centroid_or_mid(geometry);
					// attribute<string>                             identificatie                       := org_rel -> identificatie;
					attribute<uint64>                             bag_nr                              := org_rel -> bag_nr;
					attribute<typeringen/bag/pand_status>         status_rel                          := org_rel -> status_rel;
					attribute<jaar>                               bouwjaar_trunc                      := org_rel -> bouwjaar_trunc;
					attribute<uint32>                             monumentale_panden (NL_grid/domain) := count(bouwjaar_trunc <= 1900s ? bouwjaar_trunc : (0/0)[int16], NL_grid_domain_rel);
					attribute<uint32>                             count_ha (NL_grid/domain)           := count(centroid, NL_grid_domain_rel);
					attribute<m2>                                 footprint                           := abs(area(geometry, m2));
					attribute<uint16>                             pand_hoogte                         := org_rel -> pand_hoogte;

					attribute<WP5>                                WP5_rel                             := org_rel -> WP5_rel;
					attribute<WP2>                                WP2_rel                             := org_rel -> WP2_rel;
					attribute<NL_grid/domain>                     NL_grid_domain_rel                  := centroid[NL_grid/domain];
					
					attribute<m2>                                 sum_vbo_opp                         := sum(vbo_domein/oppervlakte_trunc[m2], vbo_domein/pand_vbo_rel);
					attribute<m2>                                 sum_vbo_opp_woon                    := sum(vbo_woon_domein/oppervlakte_trunc[m2], vbo_woon_domein/pand_vbo_rel);
					attribute<m2>                                 sum_vbo_opp_niet_woon               := sum(vbo_niet_woon_domein/oppervlakte_trunc[m2], vbo_niet_woon_domein/pand_vbo_rel);
					attribute<float32>                            avg_vbo_opp_woon                    := mean(vbo_woon_domein/oppervlakte_trunc[float32], vbo_woon_domein/pand_vbo_rel);
					attribute<float32>                            avg_vbo_opp_niet_woon               := mean(vbo_niet_woon_domein/oppervlakte_trunc[float32], vbo_niet_woon_domein/pand_vbo_rel);
					attribute<uint32>                             count_vbo_pand_woon                 := org_rel -> count_vbo_pand_woon;
					attribute<uint32>                             count_vbo_pand_woon_gevormd         := org_rel -> count_vbo_pand_woon_gevormd;
					attribute<uint32>                             count_vbo_pand_niet_woon            := org_rel -> count_vbo_pand_niet_woon;
					
					attribute<uint32>                             count_vrijstaand                    := WP5_rel = WP5/V/vrijstaand ? 1 : 0;
					attribute<uint32>                             count_twee_onder_1_kap              := WP5_rel = WP5/V/twee_onder_1_kap ? 1 : 0;
					attribute<uint32>                             count_rijtjeswoning                 := WP5_rel = WP5/V/rijtjeswoning ? 1 : 0;
					attribute<uint32>                             count_appartement                   := WP5_rel = WP5/V/appartement ? count_vbo_pand_woon : 0;
					 
					attribute<bool>                               HasWoon                             := count_vbo_pand_woon > 0;
					attribute<bool>                               HasNietWoon                         := count_vbo_pand_niet_woon > 0;
					
					attribute<bool>                               IsMixed                             := HasWoon && HasNietWoon;
					attribute<bool>                               IsWoon                              := HasWoon && !HasNietWoon;
					attribute<bool>                               IsNietWoon                          := !HasWoon && HasNietWoon;
					
					attribute<perceel>                            perceel_rel                         := org_rel -> perceel_rel;
					attribute<bool>                               HasWoonfunctie                      := count_vbo_pand_woon >= 1;
					attribute<bool>                               HasNietWoonfunctie                  := count_vbo_pand_niet_woon >= 1;
					
					attribute<RegioUnit_prov>                     Prov_rel                            := point_in_polygon(centroid, RegioUnit_prov/geometry);
					attribute<RegioUnit_nl>                       NL_rel                              := point_in_polygon(centroid, RegioUnit_NL/geometry);
					
					container Count_functies := 
						for_each_nedv(
							vbo_gebruiksdoel/name
							, 'org_rel -> Count_functies/'+vbo_gebruiksdoel/name
							, .
							, uint32
						);

					container Footprint_VBOOpp_per_vbo_functie :=
						for_each_nedv(
							vbo_gebruiksdoel_ext/name
							,'((sum(vbo_domein/gebruiksdoelen_cbs/'+vbo_gebruiksdoel_ext/name+' ? vbo_domein/oppervlakte_trunc_m2 : (0/0)[m2], vbo_domein/pand_vbo_rel)) / sum_vbo_opp) * footprint'
							, pand_met_vbo
							, float32
						);
					container Totaal_Footprint_VBOOpp_per_vbo_functie :=
						for_each_nedv(
							vbo_gebruiksdoel/name
							,'sum(Footprint_VBOOpp_per_vbo_functie/'+vbo_gebruiksdoel/name+')'
							, void
							, float32
						);
				}
				
				unit<uint32> Voorraad := ='select_with_org_rel('+pand_voorraad_status_str+')'
				{
					attribute<rdc_mm>                             geometry_mm (polygon)     := org_rel -> geometry_mm_chosen;
					attribute<rdc>                                geometry (polygon)        := geometry_mm[rdc];
					// attribute<string>                             identificatie             := org_rel -> identificatie;
					attribute<uint64>                             bag_nr                    := org_rel -> bag_nr;
					attribute<.>                                  pand_vbo_rel (vbo_domein) := vbo_domein/pand_voorraad_rel;
					attribute<.>                                  pand_vbo_woon_rel (vbo_woon_domein) := vbo_woon_domein/pand_voorraad_rel;
					attribute<uint32>                             count_vbo_pand            := pcount(pand_vbo_rel);
					attribute<uint32>                             count_vbo_pand_woon       := pcount(pand_vbo_woon_rel);
					attribute<uint16>                             pand_hoogte               := org_rel -> pand_hoogte;
					attribute<jaar>                               bouwjaar_trunc            := org_rel -> bouwjaar_trunc;
					attribute<m2>                                 footprint                 := org_rel -> footprint;
					attribute<WP5>                                WP5_rel                   := org_rel -> WP5_rel;
					
					unit<uint32> pand_met_vbo := select_with_org_rel(count_vbo_pand > 0)
					{
						attribute<rdc_mm>                             geometry_mm (polygon)               := org_rel -> geometry_mm;
						attribute<rdc>                                geometry (polygon)                  := geometry_mm[rdc];
						attribute<uint16>                             pand_hoogte                         := org_rel -> pand_hoogte;
						attribute<bool>                               pand_IsHoogbouw                     := pand_hoogte > 1600w;
						attribute<rdc>                                centroid                            := centroid_or_mid(geometry);
						attribute<NL_grid/domain>                     NL_grid_domain_rel                  := centroid[NL_grid/domain];
						attribute<jaar>                               bouwjaar_trunc                      := org_rel -> bouwjaar_trunc;
						attribute<uint32>                             count_ha (NL_grid/domain)           := count(centroid, NL_grid_domain_rel);
						attribute<uint32>                             monumentale_panden (NL_grid/domain) := count(bouwjaar_trunc <= 1900s ? bouwjaar_trunc : (0/0)[int16], NL_grid_domain_rel);
					}
				}
			}
		}
		
		Template MaakVBOs
		{
			/////
			parameter<uint32> Year;
			
			/////
			parameter<string> BAG_dir            := Parameters/BAG_dir == 'NORMAAL' ? 'BAG_DataDir'  : 'BAG_DataDir_OVSRV6';
			parameter<string> VoorraadStatus_str := Parameters/Use_BAG_VoorraadStatussen 
														? '(src_src/meta/status == ''Verblijfsobject buiten gebruik'' || src_src/meta/status == ''Verblijfsobject in gebruik'' || src_src/meta/status == ''Verblijfsobject in gebruik (niet ingemeten)'' || src_src/meta/status == ''Verbouwing verblijfsobject'')'
														: 'const(TRUE,src)';
			
			unit<uint32>                          pand_src_domein           := ='Panden/Y' + string(Year) + '/src';
			unit<uint32>                          pand_domein               := ='Panden/Y' + string(Year) + '/pand';
			unit<uint32>                          pand_met_woon_domein      := pand_domein/pand_met_woon_vbo;
			unit<uint32>                          pand_met_vbo_domein       := pand_domein/pand_met_vbo;
			unit<uint32>                          pand_voorraad_domein      := pand_domein/voorraad;
			unit<uint32>                          adres_domein              := ='Adressen/Y' +string(Year)+ '/adres';
			
			unit<uint32> import
			:	StorageName     = "='%'+BAG_dir+'%/BAG/snapshots.ext/' +string(Year)+ '01_RS/vbo.fss'"
			,	StorageReadOnly = "True"
			{
				attribute<rdc_mm>                     geometry_mm; 
				attribute<string>                     identificatie;
				attribute<int32>                      oppervlakte;
				attribute<string>                     nummeraanduiding_id;
				attribute<string>                     pand_id;
				attribute<string>                     pand_id_geom;
				attribute<string>                     status;
				
				container gebruiksdoelen :=
					for_each_ndv(
						vbo_gebruiksdoel/name
						, import
						, bool
					);
			}
			
			unit<uint32> src := import
			{
				attribute<rdc>                        geometry                  := geometry_mm[rdc];
				attribute<uint64>                     bag_nr                    := uint64(identificatie);
				attribute<uint64>                     pand_id_nr                := uint64(pand_id);
				attribute<uint64>                     pand_id_geom_nr           := uint64(pand_id_geom);
				attribute<jaar>                       bouwjaar_trunc            := pand_src_domein/bouwjaar_trunc[pand_src_rel]; 
				attribute<string>                     pand_status               := pand_src_domein/status[pand_src_rel];
				attribute<uint32>                     pand_src_rel              := rlookup(pand_id_nr, pand_src_domein/bag_nr);
				attribute<uint32>                     pand_rel                  := rlookup(pand_id_nr, pand_domein/bag_nr);
			}

			unit<uint32> vbo := ='select_with_org_rel('+VoorraadStatus_str+')' 
			{
				attribute<rdc_mm>                     geometry_mm             := org_rel -> geometry_mm; 
				attribute<rdc>                        geometry                := org_rel -> src/geometry;
				attribute<uint64>                     bag_nr                  := org_rel -> src/bag_nr;
				attribute<int32>                      oppervlakte             := org_rel -> oppervlakte; 
				attribute<string>                     nummeraanduiding_id     := org_rel -> nummeraanduiding_id; 
				attribute<uint64>                     pand_id_nr              := org_rel -> src/pand_id_nr; 
				attribute<uint16>                     pand_hoogte             := pand_domein/pand_hoogte[pand_rel];
				attribute<m2>                         pand_footprint          := pand_domein/footprint[pand_rel];
				
				attribute<int32>                      oppervlakte_trunc0000       := oppervlakte == 999i || oppervlakte == 9999i || oppervlakte == 99999i  || oppervlakte == 999999i 
																					? (0/0)[int32]
																					: oppervlakte;
																					
				attribute<int32>                      oppervlakte_trunc000        := oppervlakte_trunc0000 < Parameters/VBO_opp_truncation_lower && gebruiksdoel_class == vbo_gebruiksdoel_ext/v/woon
																					? pand_footprint[int32]
																					: oppervlakte_trunc0000;
																					
				attribute<int32>                      oppervlakte_trunc00        := oppervlakte_trunc000 < Parameters/VBO_opp_truncation_lower 
																					? Parameters/VBO_opp_truncation_lower 
																					: oppervlakte_trunc000;
																					
				attribute<int32>                      oppervlakte_trunc0        := oppervlakte_trunc00[m2] > theoretisch_max_pand_vbo_opp && theoretisch_max_pand_vbo_opp > Parameters/VBO_opp_truncation_lower[float32]
																					? theoretisch_max_pand_vbo_opp[int32]
																					: oppervlakte_trunc00;
				attribute<int32>                      oppervlakte_trunc         := oppervlakte_trunc0 > Parameters/VBO_opp_truncation
																					? Parameters/VBO_opp_truncation_defaultvalue
																					: oppervlakte_trunc0[int32];
																					
				attribute<m2>                         oppervlakte_trunc_m2        := oppervlakte_trunc[m2];
				
				attribute<int32>                      nr_of_verdiepingen_pand      := rounddown(pand_hoogte[float32] / convert(Parameters/verdiepinghoogte, cm));
				attribute<m2>                         theoretisch_max_pand_vbo_opp := pand_footprint * nr_of_verdiepingen_pand[float32] == 0[m2] ? (0/0)[m2] : pand_footprint * nr_of_verdiepingen_pand[float32];

				attribute<m2>                         vbo_opp_woon               := gebruiksdoelen_cbs/woon ? oppervlakte_trunc[m2] : 0[m2];
				attribute<m2>                         vbo_opp_niet_woon          := !gebruiksdoelen_cbs/woon ? oppervlakte_trunc[m2] : 0[m2];
				attribute<m2>                         vbo_opp_woon_voorraad      := gebruiksdoelen_cbs/woon && IsVoorraad ? oppervlakte_trunc[m2] : (0/0)[m2];
				attribute<m2>                         vbo_opp_niet_woon_voorraad := !gebruiksdoelen_cbs/woon && IsVoorraad ? oppervlakte_trunc[m2] : (0/0)[m2];
				attribute<jaar>                       bouwjaar_trunc             := pand_domein/bouwjaar_trunc[pand_rel];
				attribute<WP2>                        WP2_rel                    := pand_domein/WP2_rel[pand_rel];
				attribute<WP4>                        WP4_rel                    := pand_domein/WP4_rel[pand_rel];
				attribute<WP5>                        WP5_rel                    := pand_domein/WP5_rel[pand_rel];
				attribute<nrwonha>                    count_ha (NL_grid/domain)  := count(geometry, NL_grid_domain_rel)[nrwonha]; 
				attribute<vbo_status>                 status_rel                 := rlookup(status, vbo_status/label);
				attribute<string>                     status                     := org_rel -> status;
				attribute<pand_met_vbo_domein>        pand_vbo_rel               := rlookup(pand_id_nr, pand_met_vbo_domein/bag_nr);
				attribute<pand_domein>                pand_rel                   := rlookup(pand_id_nr, pand_domein/bag_nr);
				attribute<pand_voorraad_domein>       pand_voorraad_rel          := rlookup(pand_id_nr, pand_voorraad_domein/bag_nr);
				
				attribute<BAG/pand_status>            pand_status_rel            := pand_domein/status_rel[pand_rel];
				attribute<int32>                      pand_vbo_opp (pand_domein) := sum(oppervlakte_trunc, pand_rel);
				attribute<NL_grid/domain>             NL_grid_domain_rel         := geometry[NL_grid/domain];
				attribute<bool>                       IsVoorraad                 := = vbo_voorraad_status_str;
				
				attribute<eur>                        WOZ                        := rjoin(bag_nr, GebruiksdoelSets/niet_woon/bag_nr, GebruiksdoelSets/niet_woon/WOZ); //deze werkt alleen voor bag 201701
 
				attribute<string> gebruiksdoel := 
					gebruiksdoelen_cbs/woon 
						? 'woon' 
						: (gebruiksdoelen_cbs/bijeenkomst 
							? 'bijeenkomst' 
							: (gebruiksdoelen_cbs/cel 
								? 'cel' 
								: (gebruiksdoelen_cbs/gezondheidszorg 
									? 'gezondheidszorg' 
									: (gebruiksdoelen_cbs/industrie 
										? 'industrie' 
										: (gebruiksdoelen_cbs/kantoor 
											? 'kantoor' 
											: (gebruiksdoelen_cbs/logies 
												? 'logies' 
												: (gebruiksdoelen_cbs/onderwijs 
													? 'onderwijs' 
													: (gebruiksdoelen_cbs/overige_gebruiks 
														? 'overige_gebruiks' 
														: (gebruiksdoelen_cbs/sport 
															? 'sport' 
															: (gebruiksdoelen_cbs/winkel 
																? 'winkel' 
																: 'utiliteit_combi'
															))))))))));
				attribute<vbo_gebruiksdoel_ext>         gebruiksdoel_class     := rlookup(gebruiksdoel, vbo_gebruiksdoel_ext/name);
				attribute<vbo_gebruiksdoel_english> gebruiksdoel_class_ENG := rlookup(gebruiksdoel, vbo_gebruiksdoel_english/name);
						
				container gebruiksdoelen :=
					for_each_nedv(
						vbo_gebruiksdoel/name
						, 'org_rel -> gebruiksdoelen/'+vbo_gebruiksdoel/name
						, vbo
						, bool
					);
				
				container gebruiksdoelen_cbs
				{
					attribute<bool>   utiliteit         (..) := ='('+AsList('gebruiksdoelen/'+vbo_gebruiksdoel/Utiliteiten/name, ' || ')+') && !woon';
					attribute<uint32> Count_Utiliteiten (..) := =AsList('gebruiksdoelen/'+vbo_gebruiksdoel/Utiliteiten/name+'[uint32]', ' + ');
					
					attribute<bool>   bijeenkomst       (..) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/bijeenkomst;
					attribute<bool>   cel               (..) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/cel;
					attribute<bool>   gezondheidszorg   (..) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/gezondheidszorg;
					attribute<bool>   industrie         (..) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/industrie;
					attribute<bool>   kantoor           (..) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/kantoor;
					attribute<bool>   logies            (..) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/logies;
					attribute<bool>   onderwijs         (..) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/onderwijs;
					attribute<bool>   overige_gebruiks  (..) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/overige_gebruiks;
					attribute<bool>   sport             (..) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/sport;
					attribute<bool>   winkel            (..) := !woon && Count_Utiliteiten == 1 && gebruiksdoelen/winkel;
					attribute<bool>   woon              (..) := gebruiksdoelen/woon;
					attribute<bool>   utiliteit_combi   (..) := !woon && Count_Utiliteiten > 1;
 				}

				container GebruiksdoelSets :=
					for_each_ne(
						vbo_gebruiksdoel_ext/name
						, 'MaakGebruiksdoelSets_templ(' + quote(vbo_gebruiksdoel_ext/name) +')'
					)
				{
					unit<uint32> niet_woon := 
						union_unit(
							  GebruiksdoelSets/bijeenkomst/GebruiksdoelSet
							, GebruiksdoelSets/cel/GebruiksdoelSet
							, GebruiksdoelSets/gezondheidszorg/GebruiksdoelSet
							, GebruiksdoelSets/industrie/GebruiksdoelSet
							, GebruiksdoelSets/kantoor/GebruiksdoelSet
							, GebruiksdoelSets/logies/GebruiksdoelSet
							, GebruiksdoelSets/onderwijs/GebruiksdoelSet
							, GebruiksdoelSets/sport/GebruiksdoelSet
							, GebruiksdoelSets/winkel/GebruiksdoelSet
							, GebruiksdoelSets/utiliteit_combi/GebruiksdoelSet
						)
					{
						attribute<rdc> geometry     := 
							union_data(
								.
								, GebruiksdoelSets/bijeenkomst/GebruiksdoelSet/geometry
								, GebruiksdoelSets/cel/GebruiksdoelSet/geometry
								, GebruiksdoelSets/gezondheidszorg/GebruiksdoelSet/geometry
								, GebruiksdoelSets/industrie/GebruiksdoelSet/geometry
								, GebruiksdoelSets/kantoor/GebruiksdoelSet/geometry
								, GebruiksdoelSets/logies/GebruiksdoelSet/geometry
								, GebruiksdoelSets/onderwijs/GebruiksdoelSet/geometry
								, GebruiksdoelSets/sport/GebruiksdoelSet/geometry
								, GebruiksdoelSets/winkel/GebruiksdoelSet/geometry
								, GebruiksdoelSets/utiliteit_combi/GebruiksdoelSet/geometry
							);
						attribute<m2> oppervlakte_trunc  := 
							union_data(
								.
								, GebruiksdoelSets/bijeenkomst/GebruiksdoelSet/oppervlakte_trunc_m2
								, GebruiksdoelSets/cel/GebruiksdoelSet/oppervlakte_trunc_m2
								, GebruiksdoelSets/gezondheidszorg/GebruiksdoelSet/oppervlakte_trunc_m2
								, GebruiksdoelSets/industrie/GebruiksdoelSet/oppervlakte_trunc_m2
								, GebruiksdoelSets/kantoor/GebruiksdoelSet/oppervlakte_trunc_m2
								, GebruiksdoelSets/logies/GebruiksdoelSet/oppervlakte_trunc_m2
								, GebruiksdoelSets/onderwijs/GebruiksdoelSet/oppervlakte_trunc_m2
								, GebruiksdoelSets/sport/GebruiksdoelSet/oppervlakte_trunc_m2
								, GebruiksdoelSets/winkel/GebruiksdoelSet/oppervlakte_trunc_m2
								, GebruiksdoelSets/utiliteit_combi/GebruiksdoelSet/oppervlakte_trunc_m2
							);
							
						attribute<vbo_status> status_rel := 
							union_data(
								.
								, GebruiksdoelSets/bijeenkomst/GebruiksdoelSet/status_rel
								, GebruiksdoelSets/cel/GebruiksdoelSet/status_rel
								, GebruiksdoelSets/gezondheidszorg/GebruiksdoelSet/status_rel
								, GebruiksdoelSets/industrie/GebruiksdoelSet/status_rel
								, GebruiksdoelSets/kantoor/GebruiksdoelSet/status_rel
								, GebruiksdoelSets/logies/GebruiksdoelSet/status_rel
								, GebruiksdoelSets/onderwijs/GebruiksdoelSet/status_rel
								, GebruiksdoelSets/winkel/GebruiksdoelSet/status_rel
								, GebruiksdoelSets/sport/GebruiksdoelSet/status_rel
								, GebruiksdoelSets/utiliteit_combi/GebruiksdoelSet/status_rel
							);
							
						attribute<uint64> pand_id_nr := 
							union_data(
								.
								, GebruiksdoelSets/bijeenkomst/GebruiksdoelSet/pand_id_nr
								, GebruiksdoelSets/cel/GebruiksdoelSet/pand_id_nr
								, GebruiksdoelSets/gezondheidszorg/GebruiksdoelSet/pand_id_nr
								, GebruiksdoelSets/industrie/GebruiksdoelSet/pand_id_nr
								, GebruiksdoelSets/kantoor/GebruiksdoelSet/pand_id_nr
								, GebruiksdoelSets/logies/GebruiksdoelSet/pand_id_nr
								, GebruiksdoelSets/onderwijs/GebruiksdoelSet/pand_id_nr
								, GebruiksdoelSets/winkel/GebruiksdoelSet/pand_id_nr
								, GebruiksdoelSets/sport/GebruiksdoelSet/pand_id_nr
								, GebruiksdoelSets/utiliteit_combi/GebruiksdoelSet/pand_id_nr
							);
							
						attribute<uint64> bag_nr := 
							union_data(
								.
								, GebruiksdoelSets/bijeenkomst/GebruiksdoelSet/bag_nr
								, GebruiksdoelSets/cel/GebruiksdoelSet/bag_nr
								, GebruiksdoelSets/gezondheidszorg/GebruiksdoelSet/bag_nr
								, GebruiksdoelSets/industrie/GebruiksdoelSet/bag_nr
								, GebruiksdoelSets/kantoor/GebruiksdoelSet/bag_nr
								, GebruiksdoelSets/logies/GebruiksdoelSet/bag_nr
								, GebruiksdoelSets/onderwijs/GebruiksdoelSet/bag_nr
								, GebruiksdoelSets/winkel/GebruiksdoelSet/bag_nr
								, GebruiksdoelSets/sport/GebruiksdoelSet/bag_nr
								, GebruiksdoelSets/utiliteit_combi/GebruiksdoelSet/bag_nr
							);
							
						attribute<NL_grid/domain>         NL_grid_domain_rel      := geometry[NL_grid/domain];
						attribute<pand_domein>            pand_rel                := rlookup(pand_id_nr, pand_domein/bag_nr);
						attribute<pand_met_vbo_domein>    pand_vbo_rel            := rlookup(pand_id_nr, pand_met_vbo_domein/bag_nr);
						attribute<bool>                   IsGevormd               := status_rel == vbo_status/v/verblijfsobject_gevormd;
						attribute<bool>                   IsVoorraad              := =vbo_voorraad_status_str;
						
						attribute<eur>                    WOZ_2017                := Brondata/WOZ/Y2017/Niet_woningen/Per_vob;
						attribute<eur>                    WOZ                     := rjoin(bag_nr, VBOs/Y201701/vbo/GebruiksdoelSets/niet_woon/bag_nr, VBOs/Y201701/vbo/GebruiksdoelSets/niet_woon/WOZ_2017);
					}
					
					unit<uint32> UtiliteitsFucties := union_unit(GebruiksdoelSets/kantoor/GebruiksdoelSet/Voorraad, GebruiksdoelSets/gezondheidszorg/GebruiksdoelSet/Voorraad, GebruiksdoelSets/onderwijs/GebruiksdoelSet/Voorraad)
					{
						attribute<rdc>            geometry                        := union_data(., GebruiksdoelSets/kantoor/GebruiksdoelSet/Voorraad/geometry, GebruiksdoelSets/gezondheidszorg/GebruiksdoelSet/Voorraad/geometry, GebruiksdoelSets/onderwijs/GebruiksdoelSet/Voorraad/geometry);
						attribute<m2>             oppervlakte_trunc_m2            := union_data(., GebruiksdoelSets/kantoor/GebruiksdoelSet/Voorraad/oppervlakte_trunc_m2 , GebruiksdoelSets/gezondheidszorg/GebruiksdoelSet/Voorraad/oppervlakte_trunc_m2 , GebruiksdoelSets/onderwijs/GebruiksdoelSet/Voorraad/oppervlakte_trunc_m2 );
						attribute<m2_ha>          oppervlakte_ha (NL_grid/domain) := sum(oppervlakte_trunc_m2, geometry[NL_grid/domain]) / 1[ha];
					}
					
				}
						
				Template MaakGebruiksdoelSets_templ
				{ 
					/// 
					parameter<string> name;
					///
					
					unit<uint32> GebruiksdoelSet := ='select_with_org_rel(gebruiksdoelen_cbs/' + name + ')'
					{
						attribute<rdc_mm>                 geometry_mm                          := org_rel -> geometry_mm;
						attribute<rdc>                    geometry                             := org_rel -> geometry;
						attribute<int32>                  oppervlakte_trunc                    := org_rel -> oppervlakte_trunc;
						attribute<m2>                     oppervlakte_trunc_m2                 := oppervlakte_trunc[m2];
						attribute<vbo_status>             status_rel                           := org_rel -> status_rel;
						
						attribute<bool>                   IsGevormd                            := status_rel == vbo_status/v/verblijfsobject_gevormd;
						attribute<bool>                   IsVoorraad                           := = vbo_voorraad_status_str;
						attribute<m2_ha>                  oppervlakte_ha     (NL_grid/domain)  := sum(oppervlakte_trunc_m2, NL_grid_domain_rel) / 1[ha];
						attribute<nrwonha>                count_ha           (NL_grid/domain)  := count(geometry, NL_grid_domain_rel)[nrwonha]; 
						attribute<uint64>                 bag_nr                               := org_rel -> bag_nr;
						attribute<jaar>                   bouwjaar_trunc                       := org_rel -> bouwjaar_trunc;

						attribute<uint64>                 pand_id_nr                           := org_rel -> pand_id_nr;
						attribute<WP5>                    WP5_rel                              := org_rel -> WP5_rel;
						attribute<WP4>                    WP4_rel                              := org_rel -> WP4_rel;
						attribute<WP2>                    WP2_rel                              := org_rel -> WP2_rel;
						attribute<m2>                     pand_footprint                       := org_rel -> pand_footprint;
						attribute<uint16>                 pand_hoogte                          := org_rel -> pand_hoogte;

						attribute<pand_domein>            pand_rel                             := org_rel -> pand_rel;
						attribute<uint32>                 pand_vbo_rel                         := org_rel -> pand_vbo_rel;
						attribute<pand_voorraad_domein>   pand_voorraad_rel                    := org_rel -> pand_voorraad_rel;
						attribute<NL_grid/domain>         NL_grid_domain_rel                   := org_rel -> NL_grid_domain_rel;

						container Oppervlakte_WP4 :=
							for_each_nedv(
								WP5/name 
								, 'mean(WP5_rel == ' + string(id(WP5)) + '[WP5] ? oppervlakte_trunc_m2 : (0/0)[m2], geometry[NL_grid/domain])'
								, NL_grid/domain
								, m2
							);
							
						unit<uint32> Voorraad := select_with_org_rel(IsVoorraad)
						{
							attribute<rdc_mm>                 geometry_mm                          := org_rel -> geometry_mm;
							attribute<rdc>                    geometry                             := org_rel -> geometry;
							attribute<uint64>                 pand_id_nr                           := org_rel -> pand_id_nr;
							attribute<pand_domein>            pand_rel                             := org_rel -> pand_rel;
							attribute<int32>                  oppervlakte_trunc                    := org_rel -> oppervlakte_trunc;
							attribute<m2>                     oppervlakte_trunc_m2                 := org_rel -> oppervlakte_trunc_m2;
							attribute<uint32>                 unity                                := const(1, .);
							
							attribute<m2_ha>                  oppervlakte_ha     (NL_grid/domain)  := sum(oppervlakte_trunc_m2, NL_grid_domain_rel) / 1[ha];
							attribute<nrwonha>                count_ha           (NL_grid/domain)  := count(geometry, NL_grid_domain_rel)[nrwonha]; 
							
							attribute<uint32>                 count_vbo_perPand  (pand_domein)     := pcount(pand_rel);
							attribute<NL_grid/domain>         NL_grid_domain_rel                   := org_rel -> NL_grid_domain_rel;
						}
					}
				}
			
				unit<uint32> Voorraad := select_with_org_rel(IsVoorraad)
				{
					attribute<rdc>            geometry                := org_rel -> geometry;
					attribute<uint64>         bag_nr                  := org_rel -> bag_nr;
					attribute<float32>        unity                   := const(1f,.);
					attribute<string>         nummeraanduiding_id     := org_rel -> nummeraanduiding_id;
					attribute<m2>             vbo_opp                 := org_rel -> oppervlakte_trunc_m2;
					attribute<uint16>         pand_hoogte             := org_rel -> pand_hoogte;
					attribute<bool>           pand_IsHoogbouw         := pand_hoogte > 1600w;
					attribute<jaar>           bouwjaar_trunc          := org_rel -> bouwjaar_trunc;
					attribute<WP4>            WP4_rel                 :=  WP5/woonpand_4_rel[org_rel -> WP5_rel];
					attribute<NL_grid/domain> NL_grid_domain_rel      := geometry[NL_grid/domain];
					
					attribute<eur>            WOZ                     := rjoin(bag_nr, GebruiksdoelSets/niet_woon/bag_nr, GebruiksdoelSets/niet_woon/WOZ);
					
					attribute<string> gebruiksdoel_names := replace(rtrim(ltrim(gebruiksdoelen_str/gebruiksdoel_names0)), ' ', ';',';;;;;;;;;;', ';',';;;;;;;;;', ';',';;;;;;;;', ';',';;;;;;;', ';',';;;;;;', ';',';;;;;', ';',';;;;', ';',';;;', ';',';;', ';');
					
					container gebruiksdoelen :=
						for_each_nedv(
							vbo_gebruiksdoel/name
							, 'org_rel -> gebruiksdoelen/'+vbo_gebruiksdoel/name
							, Voorraad
							, bool
						)
					{
						attribute<uint32> count (Voorraad) := ='add('+AsList(vbo_gebruiksdoel/name+'[uint32]', ',')+')';
					}
						
					container gebruiksdoelen_str :=
						for_each_nedv(
							vbo_gebruiksdoel/name
							, 'gebruiksdoelen/'+vbo_gebruiksdoel/name+' ? '+quote(vbo_gebruiksdoel/name)+' : '''''
							, Voorraad
							, string
						)
					{
						attribute<string> gebruiksdoel_names0 (Voorraad):= =AsList(vbo_gebruiksdoel/name, '+ '' '' +');
					}
					
					unit<uint32> Export := Voorraad
					, StorageName = "='%LocalDataProjDir%/Export/BAG_VBO_Voorraad_Y' +string(Year)+ '.gpkg'"
					, StorageType = "gdalwrite.vect"
					{
						attribute<rdc>            geometry                := ../geometry;
						attribute<uint64>         bag_nr                  := ../bag_nr;
						attribute<uint16>         vbo_opp                 := ../vbo_opp[uint16];
						attribute<jaar>           bouwjaar_trunc          := ../bouwjaar_trunc;
						attribute<string>         gebruiksdoel_names      := ../gebruiksdoel_names;
					}
				}
			}
		}
		
		Template MaakAdressen
		{
			parameter<uint32> Year;
			///
			
			parameter<string> SnapshotDir := '%SourceDataDir%/BAG/snapshots.ext/' +string(Year)+ '01_RS';
		
			unit<uint32> adres
			:	StorageName     = "= SnapshotDir + '/adres.fss'"
			,	StorageReadOnly = "True"
			{
				attribute<string>   straatnaam;
				attribute<string>   postcode;
				attribute<int32>    huisnummer;
				attribute<string>   huisletter;
				attribute<string>   toevoeging;
				attribute<string>   woonplaatsnaam;
				attribute<string>   nummeraanduiding_id;
				
				attribute<jaar>     bouwjaar_trunc            := ='rjoin(nummeraanduiding_id, Brondata/BAG/Snapshots/VBOs/Y' +string(Year)+ '/src/nummeraanduiding_id, Brondata/BAG/Snapshots/VBOs/Y' +string(Year)+ '/src/bouwjaar_trunc)';
				attribute<rdc>      geometry                  := ='rjoin(nummeraanduiding_id, Brondata/BAG/Snapshots/VBOs/Y' +string(Year)+ '/src/nummeraanduiding_id, Brondata/BAG/Snapshots/VBOs/Y' +string(Year)+ '/src/geometry)';
				
				attribute<string>    postcode_huisnr_huisletter_toev := postcode + '_' + string(huisnummer) + iif(huisletter != '', '_' + huisletter, '') + iif(toevoeging != '', '_' + toevoeging, '');
			
				attribute<uint32>   uq_rel := rlookup(postcode, pc6_uq/values);
				
				unit<uint32> pc6_uq := unique(postcode)
				{
					attribute<float32>  x_mean := mean(pointcol(../geometry), uq_rel);
					attribute<float32>  y_mean := mean(pointrow(../geometry), uq_rel);
					attribute<rdc>      geometry := point(x_mean, y_mean, rdc);
					attribute<string>   PC6      := values;
				}
				
				unit<uint32> PC6_centroids := subset(IsDefined(pc6_uq/geometry) && pc6_uq/PC6 != '')
				{
					attribute<rdc>      geometry := pc6_uq/geometry[nr_OrgEntity];
					attribute<string>   PC6      := pc6_uq/PC6[nr_OrgEntity];
					attribute<string>   Label    := pc6;
				}
			}
		}
		
		Template MaakLigplaatsen
		{
			/////
			parameter<uint32> Year;
			/////
			
			parameter<string> SnapshotDir := '%SourceDataDir%/BAG/snapshots.ext/' +string(Year)+ '01';
		
			unit<uint32> src
			:	StorageName     = "= SnapshotDir + '/ligplaats.fss'"
			,	StorageReadOnly = "True"
			{
				attribute<rdc_mm>   geometry_mm (poly);
				attribute<string>   identificatie;
				attribute<uint64>   bag_nr := uint64(identificatie);
				attribute<string>   nevenadres;
				attribute<int32>    nummeraanduiding_id;
				
				attribute<rdc_mm>            NW                   := lower_bound(src/geometry_mm);
				attribute<rdc_mm>            SE                   := upper_bound(src/geometry_mm);
				attribute<int32>                        X_ext                := PointCol(SE) - PointCol(NW);
				attribute<int32>                        Y_ext                := PointRow(SE) - PointRow(NW);
				
				container meta
				{
					attribute<string>        status              (..);
					
					unit<uint32> uq_status := unique(status);
					attribute<int32>         begindatum          (..);
					attribute<int32>         documentdatum       (..);
					attribute<string>        documentnummer      (..);
					attribute<int32>         einddatum           (..);
					attribute<bool>          is_correctie        (..);
					attribute<bool>          is_inactief         (..);
					attribute<bool>          is_onderzoek        (..);
				}
			}
			
			unit<uint32> ligplaats := subset(src/X_ext < 1000000i && src/Y_ext < 1000000i
											&& 	(src/meta/status == 'Plaats aangewezen')
											)
			{
				attribute<rdc_mm>                   geometry_mm (polygon)     := src/geometry_mm[Nr_OrgEntity];
				attribute<rdc>                      geometry (polygon)        := geometry_mm[rdc];
				attribute<rdc>                      centroid                  := centroid_or_mid(geometry);
				
				attribute<string>                              identificatie             := src/identificatie[Nr_OrgEntity];
				attribute<uint64>                              bag_nr                    := src/bag_nr[Nr_OrgEntity];
				attribute<string>                              status                    := src/meta/status[Nr_OrgEntity];
				attribute<NL_grid/domain>                      NL_grid_domain_rel        := centroid[NL_grid/domain];
				attribute<nrwonha>                             count_ha (NL_grid/domain) := count(centroid, NL_grid_domain_rel)[nrwonha];
			}
		}
		
		Template MaakStandplaatsen
		{
			/////
			parameter<uint32> Year;
			/////
			
			parameter<string> SnapshotDir := '%SourceDataDir%/BAG/snapshots.ext/' +string(Year)+ '01';
		
			unit<uint32> src
			:	StorageName     = "= SnapshotDir + '/standplaats.fss'"
			,	StorageReadOnly = "True"
			{
				attribute<rdc_mm>  geometry_mm (poly);
				attribute<string>   identificatie;
				attribute<uint64>   bag_nr := uint64(identificatie);
				attribute<string>   nevenadres;
				attribute<int32>    nummeraanduiding_id;
				
				attribute<rdc_mm>            NW                   := lower_bound(src/geometry_mm);
				attribute<rdc_mm>            SE                   := upper_bound(src/geometry_mm);
				attribute<int32>                        X_ext                := PointCol(SE) - PointCol(NW);
				attribute<int32>                        Y_ext                := PointRow(SE) - PointRow(NW);
				
				container meta
				{
					attribute<string>        status              (..);
					
					unit<uint32> uq_status := unique(status);
					attribute<int32>         begindatum          (..);
					attribute<int32>         documentdatum       (..);
					attribute<string>        documentnummer      (..);
					attribute<int32>         einddatum           (..);
					attribute<bool>          is_correctie        (..);
					attribute<bool>          is_inactief         (..);
					attribute<bool>          is_onderzoek        (..);
				}
			}
			
			unit<uint32> standplaats := subset(src/X_ext < 1000000i && src/Y_ext < 1000000i
											&& 	(src/meta/status == 'Plaats aangewezen')
											)
			{
				attribute<rdc_mm>                   geometry_mm (polygon)     := src/geometry_mm[Nr_OrgEntity];
				attribute<rdc>                      geometry (polygon)        := geometry_mm[rdc];
				attribute<rdc>                      centroid                  := centroid_or_mid(geometry);
				
				attribute<string>                              identificatie             := src/identificatie[Nr_OrgEntity];
				attribute<uint64>                              bag_nr                    := src/bag_nr[Nr_OrgEntity];
				attribute<string>                              status                    := src/meta/status[Nr_OrgEntity];
				attribute<NL_grid/domain>                      NL_grid_domain_rel        := centroid[NL_grid/domain];
				attribute<nrwonha>                             count_ha (NL_grid/domain) := count(centroid, NL_grid_domain_rel)[nrwonha];
			}
		}
	}
}

