container VolledigeBAG : using = "typeringen/BAG"
{ 
	parameter<string>  Snapshot_Date_Input := '20230411';
	parameter<string>  Result_FSS_dir      := '%SourceDataDir%/BAG/VolledigeTabel_' + Snapshot_Date_Input;
	parameter<int32>   MaxDatum            := 20500101i;
	
	
	unit<uint32>              uq_pand_bag_nr                                 := unique(vbos/vbo/pand_bag_nr); // X
	attribute<uq_pand_bag_nr> vbo_uq_pand_nr_rel  (vbos/vbo)                 := rlookup(vbos/vbo/pand_bag_nr, uq_pand_bag_nr/values);
	attribute<uq_pand_bag_nr> pand_uq_pand_nr_rel (panden/pand)              := rlookup(panden/pand/pand_bag_nr, uq_pand_bag_nr/values);
	
	unit<uint32> Volledige_VBOs_Panden_set := join_equal_values(vbo_uq_pand_nr_rel, pand_uq_pand_nr_rel)
	{
		attribute<rdc>         geometry                       := vbos/vbo/geometry[nr_1_rel];
		attribute<uint64>      pand_bag_nr                    := panden/pand/pand_bag_nr[nr_2_rel];
		attribute<uint64>      vbo_bag_nr                     := vbos/vbo/vbo_bag_nr[nr_1_rel];
		
		attribute<int32>       pand_begindatum                := panden/pand/begindatum[nr_2_rel];
		attribute<int32>       pand_einddatum                 := panden/pand/einddatum[nr_2_rel];
		attribute<int32>       vbo_begindatum                 := vbos/vbo/begindatum[nr_1_rel];
		attribute<int32>       vbo_einddatum                  := vbos/vbo/einddatum[nr_1_rel];
		
		attribute<pand_status> pand_status_rel                := panden/pand/status_rel[nr_2_rel];
		attribute<vbo_status>  vbo_status_rel                 := vbos/vbo/status_rel[nr_1_rel];
		attribute<uint16>      vbo_functie_code               := vbos/vbo/functie_code[nr_1_rel];
		
		attribute<string>      pand_vbo_key                   := string(pand_bag_nr) +'_'+ string(vbo_bag_nr);
		attribute<string>      pand_vbo_status_key            := string(pand_status_rel) + '_' + string(vbo_status_rel);
		attribute<string>      pand_vbo_id_status_key         := pand_vbo_key +'_'+ pand_vbo_status_key;
			
		attribute<bool>        selectie_1                     := pand_begindatum < vbo_einddatum;
		attribute<bool>        selectie_2                     := vbo_begindatum < pand_einddatum;
		attribute<bool>        selectie_3                     := vbo_begindatum != vbo_einddatum && pand_begindatum != pand_einddatum;
		
		
		unit<uint32> SelectNonOverlappingPeriods      := select_with_org_rel(selectie_1 && selectie_2 && selectie_3)
		{
			attribute<int32>       pand_begindatum                := org_rel -> pand_begindatum;
			attribute<int32>       pand_einddatum                 := org_rel -> pand_einddatum;
			attribute<int32>       vbo_begindatum                 := org_rel -> vbo_begindatum;
			attribute<int32>       vbo_einddatum                  := org_rel -> vbo_einddatum;
			
			attribute<uint64>      pand_bag_nr                    := org_rel -> pand_bag_nr;
			attribute<uint64>      vbo_bag_nr                     := org_rel -> vbo_bag_nr;
			attribute<pand_status> pand_status_rel                := org_rel -> pand_status_rel;
			attribute<vbo_status>  vbo_status_rel                 := org_rel -> vbo_status_rel;
			attribute<uint16>      vbo_functie_code               := org_rel -> vbo_functie_code;
		
			attribute<int32>       begindatum                     := max_elem(pand_begindatum, vbo_begindatum);
			attribute<int32>       einddatum                      := min_elem(pand_einddatum, vbo_einddatum);
			
			attribute<string>      pand_vbo_key                   := string(pand_bag_nr) +'_'+ string(vbo_bag_nr);
			attribute<string>      pand_vbo_status_key            := string(pand_status_rel) + '_' + string(vbo_status_rel);
			attribute<string>      pand_vbo_id_status_key         := pand_vbo_key +'_'+ pand_vbo_status_key;
			
			attribute<string>      pv_isd_begindatum_key          := pand_vbo_key +'_'+ string(begindatum) +'_'+ pand_vbo_status_key +'_'+ string(vbo_functie_code);
			attribute<string>      pv_isd_einddatum_key           := pand_vbo_key +'_'+ string(einddatum)  +'_'+ pand_vbo_status_key +'_'+ string(vbo_functie_code);
			attribute<.>           pv_isd_eind_begin_rel          := rlookup(pv_isd_einddatum_key, pv_isd_begindatum_key);
		}
		unit<uint32> SelectOnlyObjectWithChainRel     := select_with_org_rel(IsDefined(SelectNonOverlappingPeriods/pv_isd_eind_begin_rel))
		{
			attribute<SelectNonOverlappingPeriods> F1                                                := org_rel;
			attribute<SelectNonOverlappingPeriods> F2                                                := org_rel -> pv_isd_eind_begin_rel;
			attribute<.>                           TraceBack           (SelectNonOverlappingPeriods) := invert(org_rel);
			attribute<SelectNonOverlappingPeriods> ServiceArea         (SelectNonOverlappingPeriods) := service_area(F1, F2, TraceBack);
			attribute<bool>                        IsOnlyOrLastInChain (SelectNonOverlappingPeriods) := id(SelectNonOverlappingPeriods) == ServiceArea;
		}

		unit<uint32> SelectChainEndPoints             := select_with_org_rel(SelectOnlyObjectWithChainRel/IsOnlyOrLastInChain)
		{
			attribute<int32>       begindatum                     := min(SelectNonOverlappingPeriods/begindatum, per_SelectNonOverlappingPeriods);
			attribute<int32>       einddatum                      := org_rel -> einddatum;
			
			attribute<string>      old_pv_isd_begindatum_key      := org_rel -> pv_isd_begindatum_key;
			attribute<string>      old_pv_isd_einddatum_key       := org_rel -> pv_isd_einddatum_key;
			
			attribute<uint64>      pand_bag_nr                    := org_rel -> pand_bag_nr;
			attribute<uint64>      vbo_bag_nr                     := org_rel -> vbo_bag_nr;
			attribute<pand_status> pand_status_rel                := org_rel -> pand_status_rel;
			attribute<vbo_status>  vbo_status_rel                 := org_rel -> vbo_status_rel;
			attribute<uint16>      vbo_functie_code               := org_rel -> vbo_functie_code;
			
			attribute<.>           per_SelectNonOverlappingPeriods (SelectNonOverlappingPeriods) := invert(org_rel)[SelectOnlyObjectWithChainRel/ServiceArea];
		}
			


			
			// attribute<uq_pv_isd> uq_pv_isd_rel := rlookup(pv_isd_key, uq_pv_isd/values);
			// unit<uint32> uq_pv_isd := unique(pv_isd_key)
			// {
				// attribute<uint32> pcount_id_status := pcount(uq_pv_isd_rel);
			
			// }
			
			
			// attribute<string>        pv_isd_key    := pand_vbo_key +'_'+ pand_vbo_status_key +'_'+ string(vbo_functie_code);
			// attribute<bool>          IsPrevSameID_status_doel       := pv_isd_key == pv_isd_key[sub_or_null(id(.),1)];
			// unit<uint32>             uq_pv_isd_key                  := unique(pv_isd_key);
			// attribute<uq_pv_isd_key> uq_pv_isd_key_rel              := rlookup(pv_isd_key, uq_pv_isd_key/values);
			// attribute<int32>         einddatum_new                  := last(einddatum, uq_pv_isd_key_rel)[uq_pv_isd_key_rel];
			
			// unit<uint32> woDuplicates := select_with_attr_by_cond(.,!IsPrevSameID_status_doel)
			// {
			// }
		// }
	}
	
	
	
	
	// parameter<uint64> pand_id_subset := 3100000117486u64;
	// unit<uint32> Test_subset := select_with_attr_by_cond(VBOs_Panden_set, VBOs_Panden_set/pand_bag_nr == pand_id_subset)
	// {
		// attribute<string> pand_vbo_key           := string(pand_bag_nr) +'_'+ string(vbo_bag_nr);
		// attribute<string> pand_vbo_id_status_key := pand_vbo_key +'_'+ pand_vbo_status_key;
		
		// attribute<bool>   IsPrevSameID_status    := pand_vbo_id_status_key == pand_vbo_id_status_key[sub_or_null(id(.),1)];
		
		// unit<uint32> clean_duplicate_status := select_with_attr_by_cond(.,!IsPrevSameID_status)
		// {
			// attribute<bool>       IsNextSameID         := pand_vbo_id_status_key == pand_vbo_id_status_key[add_or_null(id(.),1)];
			// attribute<int32>     pand_einddatum_new   := IsNextSameID ? pand_begindatum[add_or_null(id(.),1)] : pand_einddatum;
			// attribute<int32>     vbo_einddatum_new    := IsNextSameID ? vbo_begindatum[add_or_null(id(.),1)] : vbo_einddatum;
		// }
	// }
	
	
	
	
	container panden
	{
		unit<uint32> vbo_domein := vbos/vbo;
		
		unit<uint32> import
		:	StorageName = "= Result_FSS_dir + '/pand.fss'"
		,	StorageReadOnly = "True"
		{
			attribute<rdc>                          geometry (poly);
			attribute<string>                       identificatie;
			attribute<jaar>                         bouwjaar;

			container meta := meta_src_template(., pand_status);
		}
		
		unit<uint32> src := import
		{
			attribute<rdc>                          geometry (poly)              := import/geometry;
			attribute<uint64>                       pand_bag_nr                  := uint64(identificatie);
			attribute<typeringen/bag/pand_status>   status_rel                   := import/meta/status_rel;
			attribute<int32>                      begindatum                := import/meta/BEGINDATUM == 0i ? MaxDatum : import/meta/BEGINDATUM;
			attribute<int32>                      einddatum                 := import/meta/EINDDATUM == 0i ? MaxDatum : import/meta/EINDDATUM;
			
			unit<uint32> impl := .
			{
				attribute<rdc>                          NW                           := lower_bound(geometry);
				attribute<rdc>                          SE                           := upper_bound(geometry);
				attribute<float32>                      X_ext                        := sub_or_null(PointCol(SE),PointCol(NW));
				attribute<float32>                      Y_ext                        := sub_or_null(PointRow(SE),PointRow(NW));
				
				attribute<float32>                      lower_x := pointCol(NW);
				attribute<float32>                      upper_x := pointCol(SE);
				attribute<float32>                      lower_y := pointRow(NW);
				attribute<float32>                      upper_y := pointRow(SE);
				
				attribute<bool>                         pand_selection_condition     := ='X_ext < 1000f && Y_ext < 1000f' //panden met een grotere x/y range dan 1km eruit
																						'&& lower_x < 300000f && lower_x > 0f'
																						'&& upper_x < 300000f && upper_x > 0f'
																						'&& lower_y < 620000f && lower_y > 300000f'
																						'&& upper_y < 620000f && upper_y > 300000f'; //binnen NL
			}
		}  
			
		// unit<uint32> pand := select_with_attr_by_org_rel(src, src/Impl/pand_selection_condition)
		unit<uint32> pand := select_with_attr_by_org_rel(src, const(TRUE,src))
		{
		}	
		
	}
	
	container VBOs
	{
		unit<uint32> pand_domein := panden/pand;
		
		unit<uint32> import
		:	StorageName = "= Result_FSS_dir + '/vbo.fss'"
		,	StorageReadOnly = "True"
		{
			attribute<rdc>                        geometry; 
			attribute<string>                     identificatie;
			// attribute<int32>                      oppervlakte;
			// attribute<string>                     nummeraanduiding_id;
			
			unit<uint32> gerelateerdPand
			{
				attribute<string> identificatie;
				attribute<string> pand_id;
			}
			
			container gebruiksdoelen :=
				for_each_ndv(
					vbo_gebruiksdoel/name
					, import
					, bool
				);
			
			container meta := meta_src_template(., vbo_status);
		}
		
		unit<uint32> src := import
		{
			attribute<rdc>                        geometry                  := import/geometry;
			attribute<uint64>                     vbo_bag_nr                := uint64(identificatie);
			attribute<uint64>                     pand_bag_nr               := rjoin(vbo_bag_nr, uint64(import/gerelateerdPand/identificatie), uint64(import/gerelateerdPand/pand_id));
			// attribute<int32>                      oppervlakte               := import/oppervlakte;
			attribute<vbo_status>                 status_rel                := import/meta/status_rel;
			// attribute<uint32>                     pand_rel                  := rlookup(pand_bag_nr, pand_domein/pand_bag_nr);
			attribute<int32>                      begindatum                := import/meta/BEGINDATUM == 0i ? MaxDatum : import/meta/BEGINDATUM;
			attribute<int32>                      einddatum                 := import/meta/EINDDATUM == 0i ? MaxDatum : import/meta/EINDDATUM;
			attribute<uint16>                     functie_code              := impl/gebruiksdoelen/functie_code;
			
			unit<uint32> impl := .
			{
				container gebruiksdoelen :=
					for_each_nedv(
						vbo_gebruiksdoel/name
						, 'import/gebruiksdoelen/'+vbo_gebruiksdoel/name
						, src
						, bool
					)
				{
					attribute<uint16> functie_code (src) := ='add('+AsItemList(vbo_gebruiksdoel/name+'? '+string(vbo_gebruiksdoel/functie_code)+'w : 0w')+')';
				}

				attribute<float32>    x                         := PointCol(geometry);
				attribute<float32>    y                         := PointRow(geometry);
				attribute<bool>       vbo_selection_condition   := x < 300000f && x > 0f && y < 620000f && y > 300000f; //binnen NL
			}
		}

		// unit<uint32> vbo := select_with_attr_by_org_rel(src, src/impl/vbo_selection_condition)
		unit<uint32> vbo := select_with_attr_by_org_rel(src, const(TRUE,src))
		{
			// attribute<string>        pand_vbo_id_status_doel_key    := string(pand_bag_nr) +'_'+ string(vbo_bag_nr) +'_'+ string(status_rel) +'_'+ string(functie_code);
			// attribute<bool>          IsPrevSameID_status_doel       := pand_vbo_id_status_doel_key == pand_vbo_id_status_doel_key[sub_or_null(id(.),1)];
			// unit<uint32>             uq_pv_isd_key                  := unique(pand_vbo_id_status_doel_key);
			// attribute<uq_pv_isd_key> uq_pv_isd_key_rel              := rlookup(pand_vbo_id_status_doel_key, uq_pv_isd_key/values);
			// attribute<int32>         einddatum_new                  := last(einddatum, uq_pv_isd_key_rel)[uq_pv_isd_key_rel];
			
			
		
		
		
		
		
		
			// attribute<bool> Heeft_Geen_Bestaand_Pand_ID := rjoin(vbo_bag_nr
																	// , Check_BAG_interne_consistentie/VBO_ids_zonder_bestaand_pand_id/uq_vbo_bag_nr/vbo_bag_nr
																	// , Check_BAG_interne_consistentie/VBO_ids_zonder_bestaand_pand_id/uq_vbo_bag_nr/Heeft_Geen_Bestaand_Pand_ID
																// );
			
			// unit<uint32> Fouten := select_with_attr_by_cond(., Heeft_Geen_Bestaand_Pand_ID)
			// {
			
			// }
			
			// unit<uint32> uq_id_datum_key := unique(id_datum_key)
			// {
				// attribute<string>     id_datum_key := values;
				// attribute<uint64>     vbo_bag_nr          := rjoin(id_datum_key, ../id_datum_key, ../vbo_bag_nr); 
				// attribute<vbo_status> status_rel          := rjoin(id_datum_key, ../id_datum_key, ../status_rel); 
				// attribute<uq_bag_nr>  uq_bag_nr_rel       := rlookup(vbo_bag_nr, uq_bag_nr/vbo_bag_nr);
				// attribute<string>     label                  := values;
				// attribute<uint32>     begindatum             := rjoin(id_datum_key, ../id_datum_key, uint32(../begindatum));
			// }
			// unit<uint32> uq_id_status_datum_key := unique(id_status_datum_key)
			// {
				// attribute<string>     id_status_datum_key    := values;
				// attribute<string>     id_status_key          := rjoin(id_status_datum_key, ../id_status_datum_key, ../id_status_key);
				// attribute<string>     id_datum_key           := rjoin(id_status_datum_key, ../id_status_datum_key, ../id_datum_key);
				// attribute<uint64>     vbo_bag_nr             := rjoin(id_status_datum_key, ../id_status_datum_key, ../vbo_bag_nr); 
				// attribute<vbo_status> status_rel             := rjoin(id_status_datum_key, ../id_status_datum_key, ../status_rel); 
				// attribute<uq_bag_nr>  uq_bag_nr_rel          := rlookup(vbo_bag_nr, uq_bag_nr/vbo_bag_nr);
				// attribute<string>     label                  := values;
				// attribute<uint32>     begindatum             := rjoin(id_status_datum_key, ../id_status_datum_key, uint32(../begindatum)); 
				// attribute<uint32>     einddatum              := rjoin(id_status_datum_key, ../id_status_datum_key, uint32(../einddatum)); 
				// attribute<string>     first_id_datum_key     := first(uq_id_status_datum_key/id_datum_key, uq_id_status_datum_key/uq_bag_nr_rel)[(uq_bag_nr_rel)];
				// attribute<.>          first_id_datum_key_rel := rlookup(first_id_datum_key, id_datum_key);
				// attribute<uint32>     ordinal                := id(.) - first_id_datum_key_rel;
				
				// attribute<bool>       IsPrevSameID_status    := id_status_key == id_status_key[sub_or_null(id(.),1)];
				
				// attribute<string>     einddatum_cleaned      := 
				
				// unit<uint32> clean_duplicate_status := select_with_attr_by_cond(.,!IsPrevSameID_status)
				// {
					// attribute<bool>       IsNextSameID    := vbo_bag_nr == vbo_bag_nr[add_or_null(id(.),1)];
					// attribute<uint32>     einddatum_new   := IsNextSameID ? begindatum[add_or_null(id(.),1)] : einddatum;
				// }
			// }
			// unit<uint32> uq_bag_nr := unique(vbo_bag_nr)
			// {
				// attribute<uint64>    vbo_bag_nr          := values;
				// attribute<ipoint>    bag_nr_status_key  (arc) := points2sequence(point(int32(uq_id_status_datum_key/status_rel),int32(uq_id_status_datum_key/begindatum),ipoint), uq_id_status_datum_key/uq_bag_nr_rel, uq_id_status_datum_key/ordinal);
			// }
			
			// parameter<int32> prik_datum := 20120101i;
			
			// container Prik_per_Kwartaal := 
				// for_each_ne(
					// typeringen/tijd/kwartalen/name 
					// , 'Prik_Condities_T(vbo,' +string( typeringen/tijd/kwartalen/value )+ '01[int32], ' +string( typeringen/tijd/kwartalen/next_value )+ '01[int32])' 
				// );
			
			// Template Prik_Condities_T
			// {
				// unit<uint32> domain;
				// parameter<int32> prik_start;
				// parameter<int32> prik_eind;
				
				// attribute<bool> IsInAanbouw      (domain) := vbo_status/IsInAanbouw[status_rel];
				// attribute<bool> IsVoorraad       (domain) := vbo_status/IsVoorraad[status_rel];
				// attribute<bool> IsOnttrokken     (domain) := vbo_status/IsIngetrokken[status_rel];
				// attribute<bool> WasGestart       (domain) := BEGINDATUM <  prik_start;
				// attribute<bool> IsGestart        (domain) := BEGINDATUM >= prik_start && BEGINDATUM <  prik_eind;
				// attribute<bool> IsBeeindigd      (domain) := EINDDATUM  >  prik_start && EINDDATUM  <= prik_eind;
				
				// attribute<bool> IsInAanbouw_InPrik  (domain) := IsInAanbouw  && WasGestart && not(WasBeeindigd);
				// attribute<bool> IsVoorraad_InPrik   (domain) := IsVoorraad   && WasGestart && not(WasBeeindigd);
				// attribute<bool> IsOnttrokken_InPrik (domain) := IsOnttrokken && WasGestart && not(WasBeeindigd);
			// }
		}
		
		// unit<uint32> vbo_woDuplicates := select_with_attr_by_cond(vbo,!vbo/IsPrevSameID_status_doel)
		// {
		// }

	}
	
	template meta_src_template // Voor het inlezen van de generieke BAG attributen
	{
		// begin case parameters
		unit<uint32> domain;
		unit<uint8>  statustype;
		// end case parameters

		attribute<string>     STATUS                 (domain);
		attribute<statustype> status_rel             (domain) := rlookup(lowercase(STATUS), lowercase(statustype/label));

		attribute<int32>      BEGINDATUM             (domain);
		attribute<int32>      EINDDATUM              (domain);
		attribute<uint32>     VOORKOMENIDENTIFICATIE (domain); //een identificatienummer kan meerdere keren voorkomen. Dit is een volgnummer dat de versie weergeeft.

		attribute<string>     TIJDSTIPREGISTRATIE    (domain);
		attribute<string>     EINDREGISTRATIE        (domain);

		attribute<int32>      DOCUMENTDATUM          (domain);
		attribute<string>     DOCUMENTNUMMER         (domain);

		attribute<bool>       IS_GECONSTATEERD       (domain);
		
		// attribute<int32>      EIND_minus_BEGIN       (domain) := EINDDATUM - BEGINDATUM;
		
	}
	
 	
/* 	container Check_BAG_interne_consistentie
	{
		unit<uint32>              uq_pand_bag_nr                    := unique(vbos/vbo/pand_bag_nr); // X
		attribute<uq_pand_bag_nr> vbo_uq_pand_nr_rel  (vbos/vbo)    := rlookup(vbos/vbo/pand_bag_nr, uq_pand_bag_nr/values);
		attribute<uq_pand_bag_nr> pand_uq_pand_nr_rel (panden/pand) := rlookup(panden/pand/pand_bag_nr, uq_pand_bag_nr/values);
		
	
		unit<uint32> join_equal_values_pand_zichzelf := join_equal_values(pand_uq_pand_nr_rel, pand_uq_pand_nr_rel) //check op database consistentie. Geen overlap in geldigheidsperiodes
		{
			attribute<uint64>      pand_bag_nr_1                    := panden/pand/pand_bag_nr[nr_1_rel];
			attribute<int32>       pand_begindatum_1                := panden/pand/begindatum[nr_1_rel];
			attribute<int32>       pand_einddatum_1                 := panden/pand/einddatum[nr_1_rel];
			
			attribute<uint64>      pand_bag_nr_2                    := panden/pand/pand_bag_nr[nr_2_rel];
			attribute<int32>       pand_begindatum_2                := panden/pand/begindatum[nr_2_rel];
			attribute<int32>       pand_einddatum_2                 := panden/pand/einddatum[nr_2_rel];
			
			attribute<bool>        test1                            := pand_begindatum_1 < pand_einddatum_2;
			attribute<bool>        test2                            := pand_begindatum_2 < pand_einddatum_1;
			attribute<bool>        test3                            := nr_1_rel != nr_2_rel;
			attribute<bool>        test1_2_3                        := test1 && test2 && test3; //test faalt als deze true waarden heeft.
		}
		
		unit<uint32>              uq_vbo_bag_nr                    := unique(vbos/vbo/vbo_bag_nr); // X
		attribute<uq_vbo_bag_nr>  vbo_uq_vbo_nr_rel  (vbos/vbo)    := rlookup(vbos/vbo/vbo_bag_nr, uq_vbo_bag_nr/values);
		
		unit<uint32> join_equal_values_vbo_zichzelf := join_equal_values(vbo_uq_vbo_nr_rel, vbo_uq_vbo_nr_rel)  //check op database consistentie. Geen overlap in geldigheidsperiodes
		{
			attribute<uint64>      vbo_bag_nr_1                    := vbos/vbo/vbo_bag_nr[nr_1_rel];
			attribute<int32>       vbo_begindatum_1                := vbos/vbo/begindatum[nr_1_rel];
			attribute<int32>       vbo_einddatum_1                 := vbos/vbo/einddatum[nr_1_rel];
			
			attribute<uint64>      vbo_bag_nr_2                    := vbos/vbo/vbo_bag_nr[nr_2_rel];
			attribute<int32>       vbo_begindatum_2                := vbos/vbo/begindatum[nr_2_rel];
			attribute<int32>       vbo_einddatum_2                 := vbos/vbo/einddatum[nr_2_rel];
			
			attribute<bool>        test1                            := vbo_begindatum_1 < vbo_einddatum_2;
			attribute<bool>        test2                            := vbo_begindatum_2 < vbo_einddatum_1;
			attribute<bool>        test3                            := nr_1_rel != nr_2_rel;
			attribute<bool>        test1_2_3                        := test1 && test2 && test3;  //test faalt als deze true waarden heeft.
		}
		
		unit<uint32> VBOs_Panden_set := join_equal_values(vbo_uq_pand_nr_rel, pand_uq_pand_nr_rel)
		{
			attribute<uint64>      pand_bag_nr                    := panden/pand/pand_bag_nr[nr_2_rel];
			attribute<uint64>      vbo_bag_nr                     := vbos/vbo/vbo_bag_nr[nr_1_rel];
			
			attribute<int32>       pand_begindatum                := panden/pand/begindatum[nr_2_rel];
			attribute<int32>       pand_einddatum                 := panden/pand/einddatum[nr_2_rel];
			attribute<int32>       vbo_begindatum                 := vbos/vbo/begindatum[nr_1_rel];
			attribute<int32>       vbo_einddatum                  := vbos/vbo/einddatum[nr_1_rel];
			
			attribute<pand_status> pand_status_rel                := panden/pand/status_rel[nr_2_rel];
			attribute<vbo_status>  vbo_status_rel                 := vbos/vbo/status_rel[nr_1_rel];
			
			attribute<string>      pand_vbo_status_key            := string(pand_status_rel) + '_' + string(vbo_status_rel);
			
		}
		 
		container VBO_ids_zonder_bestaand_pand_id //BAG ID opbouw = gemeente code + 10 (pand) || 01 (vbo) + 10 cijfers als volgnummer
		: URL = "https://www.amsterdam.nl/stelselpedia/bag-index/catalogus-bag/unieke-identificatie-van-het-object/"
		{
			unit<uint32>           uq_vbo_bag_nr                       := unique(vbos/vbo/vbo_bag_nr)
			{
				attribute<bool>    Heeft_Geen_Bestaand_Pand_ID         := !IsDefined(rlookup(values, uq_vbo_bag_nr_metBestaand_pand_id/values));
				attribute<uint64>  vbo_bag_nr                          := values; 
				attribute<uint64>  pand_bag_nr                         := rjoin(vbo_bag_nr, vbos/vbo/vbo_bag_nr, vbos/vbo/pand_bag_nr); //range 3100 miljard - 5600100 miljard
				
				attribute<vbo_status> vbo_status_rel                  := rjoin(vbo_bag_nr, vbos/vbo/vbo_bag_nr, vbos/vbo/status_rel);
				
				unit<uint32> Fouten := select_with_attr_by_cond(., Heeft_Geen_Bestaand_Pand_ID)
				{
				
				}
			}
			unit<uint32>           uq_vbo_bag_nr_metBestaand_pand_id   := unique(VBOs_Panden_set/vbo_bag_nr);
		}
		
			
	}
 */ 
 }
