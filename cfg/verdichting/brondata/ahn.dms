container AHN
{ 
	container impl
	{
		container blad_bbox
		{
			attribute<rdc> lowerbound (AHN/blad) := lower_bound(AHN/blad/geometry);
			attribute<rdc> upperbound (AHN/blad) := upper_bound(AHN/blad/geometry);

			attribute<m>        x_min_att  (AHN/blad) := PointCol(lowerbound)[m];
			attribute<m>        x_max_att  (AHN/blad) := PointCol(upperbound)[m];
			attribute<m>        y_min_att  (AHN/blad) := PointRow(lowerbound)[m];
			attribute<m>        y_max_att  (AHN/blad) := PointRow(upperbound)[m];

			parameter<m>        x_min      := min(x_min_att);
			parameter<m>        x_max      := max(x_max_att);
			parameter<m>        y_min      := min(y_min_att);
			parameter<m>        y_max      := max(y_max_att);
		}

		container blad_grid := define_grid(5000[m], 6250[m], blad_bbox)
		{
			attribute<string> unit (domain) := first(AHN/blad/unit, AHN/blad/blad_grid_rel);
			attribute<string> name (domain) := first(AHN/blad/name, AHN/blad/blad_grid_rel);
		}
	
		unit<uint32> blad_src:
			StorageName     = "%AHNDrive%/ahn_units.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<fpoint>   geometry    (poly);
			attribute<rdc>      geometry_rd (poly) := geometry[rdc]; // truc voor issue 855, weer wegwerken als is opgelost.
			attribute<rdc>      centroid           := centroid(geometry_rd);
			attribute<bool>     foute_10dz2        := blad_src/UNIT == '10dz2' && uint32(pointCol(blad_src/centroid)) == 152500 && uint32(pointRow(blad_src/centroid)) == 553125;

			attribute<string>   name               := 'blad_' + unit;

			attribute<string> int_filename_AHN3    := expand(., '%AHNDrive%') + '/AHN_3_cm/i' + substr(unit, 0, 2) + '/' + substr(unit, 2, 3) + '.tif';
			attribute<string> ruw_filename_AHN3    := replace(int_filename_AHN3, 'AHN_3_cm/i', 'AHN_3_cm/r');

			attribute<string> int_filename         := ='union_data(.,' + AsList('ExistingFiles/per_blad/' + name + '/int_filename',',') + ')', KeepData = "True", StoreData = "True";
			attribute<string> ruw_filename         := ='union_data(.,' + AsList('ExistingFiles/per_blad/' + name + '/ruw_filename',',') + ')', KeepData = "True", StoreData = "True";

			attribute<bool>   heeftAHN3data        := isNull(strpos(int_filename,'missing')) &&  isNull(strpos(ruw_filename,'missing'));

			container ExistingFiles
			{
				container per_blad := 
					for_each_ne(
						  name
						,'bepaal_existing_files(' + string(id(blad_src)) + ')'
					);
			}
		}
		
		template define_grid
		{
			// begin case parameters
			parameter<m> gridsizeX;
			parameter<m> gridsizeY;
			container bbox;
			// end case parameters

			parameter<int16> nr_cols := int16((bbox/x_max - bbox/x_min) / gridsizeX);
			parameter<int16> nr_rows := int16((bbox/y_max - bbox/y_min) / gridsizeY);

			unit<spoint> domain :=
				range(
					 gridset(
						 rdc
						,point(float32(gridsizeX), float32(-gridsizeY), rdc)
						,point(bbox/x_min, bbox/y_max, rdc)
						,spoint
					)
					,point(0s, 0s)
					,point(nr_cols,nr_rows)
				)
			,	DialogData = "rdc";
		}
		
		template bepaal_existing_files
		{
			// begin case parameters
			parameter<uint32> blad_rel;
			
			parameter<string> int_filename_AHN_3 := ExistingFile('missing', int_filename_AHN3[blad_rel]);
			parameter<string> ruw_filename_AHN_3 := ExistingFile('missing', ruw_filename_AHN3[blad_rel]);
			parameter<string> int_filename        := ExistingFile('missing', int_filename_AHN_3);
			parameter<string> ruw_filename        := ExistingFile('missing', ruw_filename_AHN_3);
			
			parameter<bool>   IsMissing_int       := int_filename == 'C:/GeoDMS/ProjDir/Tools/PHN/cfg/stam/missing';
			parameter<bool>   IsMissing_ruw       := ruw_filename == 'C:/GeoDMS/ProjDir/Tools/PHN/cfg/stam/missing';
		}
		template lees_data_per_blad
		{
			// begin case parameters
			parameter<string> filename;
			// end case parameters

			unit<spoint> grid
			:	StorageName     = "=filename"
			,	StorageType     = "gdal.grid"
			,	StorageReadOnly = "True"
			,	DialogData      = "rdc"
			{
				attribute<uint16> GridData;
				
			}
		}
	}


	unit<uint32> blad := Subset(!impl/blad_src/foute_10dz2 && impl/blad_src/heeftAHN3data) // 10dz2 is dubbel,geeft problemen later in de verwerking dus de unit met geen BAG data verwijderen.
	{
		// attribute<impl/blad_src> blad_src_rel    := nr_OrgEntity; // ->nr_OrgEntity;
		// attribute<rdc>      geometry      (poly) := blad_src_rel->geometry_rd;

		// attribute<string>   name                 := blad_src_rel->name;
		// attribute<string>   unit                 := blad_src_rel->unit;

		// attribute<string>   url_dsm              := 'https://geodata.nationaalgeoregister.nl/ahn3/extract/ahn3_05m_dsm/R_' +uppercase(unit)+ '.ZIP';
		// attribute<string>   url_dtm              := 'https://geodata.nationaalgeoregister.nl/ahn3/extract/ahn3_05m_dtm/M_' +uppercase(unit)+ '.ZIP';

		// attribute<impl/blad_grid/domain> blad_grid_rel := centroid(geometry)[impl/blad_grid/domain];

		// attribute<string> int_filename         := blad_src_rel->int_filename;
		// attribute<string> ruw_filename         := blad_src_rel->ruw_filename;
		
		attribute<rdc>      geometry      (poly) := impl/blad_src/geometry_rd[nr_OrgEntity];

		attribute<string>   name                 := impl/blad_src/name[nr_OrgEntity];
		attribute<string>   unit                 := impl/blad_src/unit[nr_OrgEntity];

		attribute<string>   url_dsm              := 'https://geodata.nationaalgeoregister.nl/ahn3/extract/ahn3_05m_dsm/R_' +uppercase(unit)+ '.ZIP';
		attribute<string>   url_dtm              := 'https://geodata.nationaalgeoregister.nl/ahn3/extract/ahn3_05m_dtm/M_' +uppercase(unit)+ '.ZIP';

		attribute<impl/blad_grid/domain> blad_grid_rel := centroid(geometry)[impl/blad_grid/domain];

		attribute<string> int_filename         := impl/blad_src/int_filename[nr_OrgEntity];
		attribute<string> ruw_filename         := impl/blad_src/ruw_filename[nr_OrgEntity];
	}
	

	container per_blad := 
		for_each_ne(
			 blad/name
			,'verwerk_blad(' + quote(blad/name) + ')'
		)
	{
		parameter<string> Generate := 'Ready', ExplicitSuppliers = "=AsList(blad/name+'/WritePoints',';')";
	}	
	
	unit<uint32> AnalysePoints := /Analyse/PandZichtlijnen/Zichtlijnen/DynaWithStartEnd
	{
		attribute<blad>            blad_rel         := point_in_polygon(geometry, blad/geometry);
	}

	template verwerk_blad
	{
		// begin case parameters
		parameter<string> blad_name;
		//

		parameter<blad> blad_rel := rlookup(blad_name, blad/name);

		parameter<string> int_filename := blad/int_filename[blad_rel];
		parameter<string> ruw_filename := blad/ruw_filename[blad_rel];

		container int := impl/lees_data_per_blad(int_filename);
		container ruw := impl/lees_data_per_blad(ruw_filename);
		
		unit<uint32> WritePoints := subset(AnalysePoints/blad_rel == blad_rel)
		, StorageName = "='%LocalDataDir%/Verdichting/AHN/perBlad/'+blad_name+'.fss'"
		{
			attribute<rdc>           geometry     := AnalysePoints/geometry[nr_OrgEntity];
			// attribute<AnalysePoints> DynaPoint_id := nr_OrgEntity;
			attribute<uint16>        hoogte       := ruw/grid/GridData[geometry[ruw/grid]];
		}
		unit<uint32> ReadPoints
		: StorageName     = "='%LocalDataDir%/Verdichting/AHN/perBlad/'+blad_name+'.fss'"
		, StorageReadOnly = "True"
		{
			attribute<rdc>           geometry;
			// attribute<uint32>        DynaPoint_id;
			attribute<uint16>        hoogte;
		}
	}
	
	unit<uint32> MergeBladen := ='union_unit('+AsList('per_blad/'+blad/name+'/ReadPoints',',')+')'
	{
		attribute<rdc>             geometry       := ='union_data(.,'+AsList('per_blad/'+blad/name+'/ReadPoints/geometry',',')+')';
		attribute<uint16>          hoogte         := ='union_data(.,'+AsList('per_blad/'+blad/name+'/ReadPoints/hoogte',',')+')';
		attribute<cm>              hoogte_cm      := (hoogte[int32] - 10000i)[cm];
		// attribute<AnalysePoints>   DynaPoint_id   := ='union_data(.,'+AsList('per_blad/'+blad/name+'/ReadPoints/DynaPoint_id',',')+')';
		
		// attribute<RegioUnit_Buurt> Buurt_rel      := point_in_polygon(geometry, RegioUnit_Buurt/geometry);
	
		// attribute<MergeBladen>     MergeBladen_rel  := rlookup(id(.), MergeBladen/DynaPoint_id);
		// attribute<cm>              hoogte           := MergeBladen/hoogte_cm[MergeBladen_rel];
		// attribute<RegioUnit_Buurt> Buurt_rel_merge  := MergeBladen/Buurt_rel[MergeBladen_rel];
		
		// attribute<RegioUnit_Buurt> Buurt_rel         := point_in_polygon(geometry, RegioUnit_Buurt/geometry);
		
		// attribute<bool>            IsBuurtEqual     := Buurt_rel == Buurt_rel_merge;
	}

	unit<uint32> RegioUnit_Buurt := /Brondata/RegioIndelingen/Buurten/j2021;
}