container woonmilieu_klassificatie:  using = "eenheden"
{ 
	unit<uint32>    RegioUnit_buurt   := brondata/regios/buurten/src_2019;
	unit<uint32>    RegioUnit_gem     := BronData/regios/gemeenten/gem_src/j2019;
	unit<uint32>    RegioUnit_wijk    := brondata/regios/wijken/src_2019;
	
	unit<uint32>    Pand              := Brondata/BAG/Snapshots/Panden/Y202001/pand;
	unit<uint32>    Vbo               := Brondata/BAG/Snapshots/VBOs/Y202001/src;
	unit<uint32>    Vbo_woon          := Vbo/GebruiksdoelSets/woon/GebruiksdoelSet;
	unit<uint8>     type_woonpand_2   := typeringen/type_woonpand_2;
	unit<uint8>     type_woonpand_4   := typeringen/type_woonpand;

	unit<uint8> WP4_ontwikkelpakketen
	:  StorageName = "%ProjDir%/SourceData/OntwikkelOptieSamenstellingen_nov2020.csv"
	,  StorageType = "gdal.vect"
	,  StorageReadOnly = "True"
	{
		attribute<string> Characteristic;
		attribute<string> name := replace(Characteristic ,'-','', ' ', '_');
		attribute<string> label := Characteristic, DialogType = "LabelText";
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}

	container dens :=
		for_each_nedv(
			type_woonpand_4/name
			, 'Vbo_woon/count_type_woonpand_4/'+type_woonpand_4/name+'[nrwonha]'
			, NL_grid/domain
			, nrwonha
		)
	{
		attribute<nrwonha>         totaal   (NL_grid/domain) := ='add_list('+asItemList(type_woonpand_4/name)+')', FreeData = "False";
		attribute<nrwonha>         max_elem (NL_grid/domain) := ='max_elem('+asItemList(type_woonpand_4/name)+')';
		attribute<type_woonpand_4> arg_max  (NL_grid/domain) := ='argmax('+asItemList(type_woonpand_4/name)+')[type_woonpand_4]';
		
		attribute<bool>            IsTerracedHomo (NL_grid/domain) := rijtjeswoning > 0f    && vrijstaand == 0f && twee_onder_1_kap == 0f && appartement == 0f;
		attribute<bool>            IsSemiDetHomo  (NL_grid/domain) := twee_onder_1_kap > 0f && rijtjeswoning == 0f    && vrijstaand == 0f && appartement == 0f;
		attribute<bool>            IsDetachedHomo (NL_grid/domain) := vrijstaand > 0f       && rijtjeswoning == 0f && twee_onder_1_kap == 0f && appartement == 0f;
		attribute<bool>            IsAppHomo      (NL_grid/domain) := appartement > 0f      && rijtjeswoning == 0f && twee_onder_1_kap == 0f && vrijstaand == 0f;
	}
		
	container fractie :=
		for_each_nedv(
			type_woonpand_4/name
			, 'dens/'+type_woonpand_4/name+' / dens/totaal'
			, NL_grid/domain
			, procent
		);
		
	container opp :=
		for_each_nedv(
			type_woonpand_4/name
			, 'MakeDefined(vbo_woon/Oppervlakte_type_woonpand4/'+type_woonpand_4/name+'[uint32],0)'
			, NL_grid/domain
			, uint32
		)
	{
		attribute<uint32> totaal (NL_grid/domain) := ='add_list('+asItemList(type_woonpand_4/name)+')';
	}
	
	unit<uint8> OP : nrofrows = 11
	{
		attribute<string> name : ['MixedDet','MixedSemiDet','MixedTerraced','Detached','SemiDet','Terraced','TerracedHD','AppLD','AppLD_SHR','AppMD_HR','AppHD_HR'];
		attribute<string> Label := name, DialogType = "LabelText";
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	attribute<bool> IsSemihighrise  (NL_grid/domain) := BronData/BAG/Snapshots/VBOs/Y202001/Src/GebruiksdoelSets/WOON/GebruiksdoelSet/max_pand_hoogte_grid > 1600w && BronData/BAG/Snapshots/VBOs/Y202001/Src/GebruiksdoelSets/WOON/GebruiksdoelSet/max_pand_hoogte_grid < 2500w;
	attribute<bool> IsHighrise      (NL_grid/domain) := BronData/BAG/Snapshots/VBOs/Y202001/Src/GebruiksdoelSets/WOON/GebruiksdoelSet/max_pand_hoogte_grid >= 2500w;
	
	attribute<bool> IsMixedTerraced (NL_grid/domain) := dens/arg_max == type_woonpand_4/V/rijtjeswoning && dens/totaal >= 15f && !dens/IsTerracedHomo && dens/rijtjeswoning < 15f;
	attribute<bool> IsTerraced      (NL_grid/domain) := dens/arg_max == type_woonpand_4/V/rijtjeswoning && !dens/IsTerracedHomo && dens/rijtjeswoning >= 15f && dens/rijtjeswoning < 35f;
	attribute<bool> IsTerracedHD    (NL_grid/domain) := dens/arg_max == type_woonpand_4/V/rijtjeswoning && !dens/IsTerracedHomo && dens/rijtjeswoning >= 35f;
	
	attribute<bool> IsMixedSemiDet  (NL_grid/domain) := dens/arg_max == type_woonpand_4/V/twee_onder_1_kap;
	attribute<bool> IsSemiDet       (NL_grid/domain) := dens/arg_max == type_woonpand_4/V/twee_onder_1_kap && dens/IsSemiDetHomo;
	
	attribute<bool> IsMixedDet      (NL_grid/domain) := dens/totaal < 15f && !dens/IsDetachedHomo && dens/vrijstaand > 1f && dens/twee_onder_1_kap > 1f && dens/rijtjeswoning > 1f && dens/vrijstaand > dens/twee_onder_1_kap;
	attribute<bool> IsDetached      (NL_grid/domain) := dens/arg_max == type_woonpand_4/V/vrijstaand && dens/IsDetachedHomo;
	
	attribute<bool> IsAppLD         (NL_grid/domain) := dens/arg_max == type_woonpand_4/V/appartement && dens/appartement < 20f && !IsSemihighrise && !IsHighrise;
	attribute<bool> IsAppLD_SHR     (NL_grid/domain) := dens/arg_max == type_woonpand_4/V/appartement && IsSemihighrise;
	attribute<bool> IsAppMD_HR      (NL_grid/domain) := dens/arg_max == type_woonpand_4/V/appartement && dens/appartement < 60f && IsHighrise;
	attribute<bool> IsAppHD_HR      (NL_grid/domain) := dens/arg_max == type_woonpand_4/V/appartement && dens/appartement >= 140f && IsHighrise;
	
	attribute<uint32> Check (NL_grid/domain) := IsMixedTerraced[uint32] + IsMixedSemiDet[uint32] + IsMixedDet[uint32] + IsTerraced[uint32] + IsTerracedHD[uint32] + IsDetached[uint32]+ IsSemiDet[uint32] + IsAppLD_SHR[uint32] + IsAppMD_HR[uint32] + IsAppHD_HR[uint32];

	attribute<OP>   Result          (NL_grid/domain) := switch(
															  case(IsMixedTerraced, OP/V/MixedTerraced[OP])
															, case(IsMixedSemiDet, OP/V/MixedSemiDet[OP])
															, case(IsMixedDet, OP/V/MixedDet[OP])
															, case(IsSemiDet, OP/V/SemiDet[OP])
															, case(IsTerraced, OP/V/Terraced[OP])
															, case(IsTerracedHD, OP/V/TerracedHD[OP])
															, case(IsDetached, OP/V/Detached[OP])
															, case(IsAppLD, OP/V/AppLD[OP])
															, case(IsAppLD_SHR, OP/V/AppLD_SHR[OP])
															, case(IsAppMD_HR, OP/V/AppMD_HR[OP])
															, case(IsAppHD_HR, OP/V/AppHD_HR[OP])
															, (0/0)[OP]
														);
														
	attribute<OP> Modus_Buurt (RegioUnit_buurt) := modus(Result,  RegioUnit_buurt/grid);
														
														
														
														
														
														
														
														
														
														
														
														
}
