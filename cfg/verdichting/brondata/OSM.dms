container OSM
{  
	parameter<string> file_date                := '20220207';                //OpenStreetMap file date #'20200117' 20211004 '20211221'
	parameter<string> dir       := '%SourceDataDir%/OSM/'+file_date;
	parameter<string> date      := 'latest';
	unit<uint32>      Regios    := OSM_Regios;
	
	parameter<km_hr>    CarDefaultSpeed         := 50[km_hr];
	parameter<km_hr>    CarDefaultSpeed_low     := 30[km_hr];
	parameter<km_hr>    WalkingSpeed_kmhr       := 4.8[km_hr];
	parameter<km_hr>    BikingSpeed_kmhr        := 18[km_hr];
	parameter<km_hr>    Ferry_Speed             := 10[km_hr];
	
	unit<uint32> OSM_Regios : nrofrows = 12
	{
		unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
		{
			attribute<String> Text:
			// Regio             , OrgSet , OrgPath, Land, Type, 
			[
			'Drenthe'                 ,'NL', 'OD',
			'Flevoland'               ,'NL', 'OD',
			'Friesland'               ,'NL', 'OD',
			'Gelderland'              ,'NL', 'OD',
			'Groningen'               ,'NL', 'OD',
			'Limburg'                 ,'NL', 'OD',
			'Noord-Brabant'           ,'NL', 'OD',
			'Noord-Holland'           ,'NL', 'OD',
			'Overijssel'              ,'NL', 'OD',
			'Utrecht'                 ,'NL', 'OD',
			'Zeeland'                 ,'NL', 'OD',
			'Zuid-Holland'            ,'NL', 'OD'
			]; 
		}
		
		attribute<string>        label          := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)], DialogType = "LabelText";
		attribute<string>        name           := replace(label, '-', '_');
		attribute<string>        Country        := Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)];
		// attribute<string>        Type_src       := Elements/Text[value(UInt32(ID(.))* nrAttr + 2, Elements)];
		
		parameter<uint32> nrAttr := 3;
	}

	container Prepare_SourceData :=
		for_each_ne(
			Regios/name
			, 'Prepare_SourceData_T('+quote(Regios/label)+','+quote(Regios/country)+')'
		);
	
	Template Prepare_SourceData_T
	{
		parameter<string> Regio;
		parameter<string> Country;
		///
		unit<uint32> Read_Roads_shp 
		:	StorageName     = "= dir + '/'+Regio+'-'+date+'-free.shp/gis_osm_roads_free_1.shp'"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	DialogType = "Map"
		,	DialogData = "geometry_lb"	
		{
			attribute<wgs84_base>                  geometry    (arc);
			attribute<rdc>                         geometry_rd (arc)   := LatLongWgs842RD(geometry, dpoint)[rdc];
			// attribute<rdc>                         geometry_simplify (arc) := bg_simplify_linestring(geometry_rd, 1d);

			attribute<string>                      fclass;
			attribute<int32>                       maxspeed;
			attribute<typeringen/OSM/wegtype>      wegtype        := rlookup(fclass, typeringen/OSM/wegtype/name);  
			attribute<string>                      OSM_id;
		}
	}
	
	unit<uint32>  Make_Merged_Roads := ='union_unit('+AsList('Prepare_SourceData/'+Regios/name+'/Read_Roads_shp', ',')+')'
	,   StorageName = "='%LocalDataProjDir%/UnlinkedData/OSM/Merged_Roads_'+file_date+'.fss'"
	{
		attribute<rdc>                          geometry (arc)                   := ='union_data(., '+AsList('Prepare_SourceData/'+Regios/name+'/Read_Roads_shp/geometry_rd', ',')+')';
		attribute<km_hr>                        maxspeed                         := ='union_data(., '+AsList('Prepare_SourceData/'+Regios/name+'/Read_Roads_shp/maxspeed', ',')+')[km_hr]';
		attribute<typeringen/OSM/wegtype>       wegtype                          := ='union_data(., '+AsList('Prepare_SourceData/'+Regios/name+'/Read_Roads_shp/wegtype', ',')+')';
		attribute<string>                       OSM_id                           := ='union_data(., '+AsList('Prepare_SourceData/'+Regios/name+'/Read_Roads_shp/OSM_id', ',')+')';
	}
			
	unit<uint32>  Read_Merged_Roads 
	:   StorageName = "='%LocalDataProjDir%/UnlinkedData/OSM/Merged_Roads_'+file_date+'.fss'"
	,   StorageReadOnly = "true"
	{
		attribute<rdc>                          geometry (arc);
		attribute<km_hr>                        maxspeed;
		attribute<typeringen/OSM/wegtype>       wegtype;
		attribute<string>                       OSM_id;
		
		attribute<km_hr>                       maxspeed_edit00                                                := maxspeed != 0[km_hr] && IsDefined(maxspeed) && maxspeed < 140[km_hr]  ? maxspeed : rjoin(wegtype, id(typeringen/OSM/wegtype), rth_maxspeed_per_wegtype_Defined);
		attribute<km_hr>                       maxspeed_edit0                                                 := wegtype == typeringen/OSM/wegtype/v/motorway && maxspeed_edit00 < 80[km_hr] ? rjoin(wegtype, id(typeringen/OSM/wegtype), rth_maxspeed_per_wegtype_Defined) : maxspeed_edit00;
		attribute<km_hr>                       maxspeed_edit                                                  := switch(case(maxspeed_edit0 == 0[km_hr], CarDefaultSpeed), case(maxspeed_edit0 < 15[km_hr], 15[km_hr]), maxspeed_edit0);
		attribute<km_hr>                       rth_maxspeed_per_wegtype (typeringen/OSM/wegtype)              := rth_element(maxspeed, 0.9f, wegtype);
		attribute<km_hr>                       rth_maxspeed_per_wegtype_Defined (typeringen/OSM/wegtype)      := MakeDefined(rth_maxspeed_per_wegtype, CarDefaultSpeed_low) == 0[km_hr] ? CarDefaultSpeed_low : MakeDefined(rth_maxspeed_per_wegtype, CarDefaultSpeed_low);
	}
	
	#include <NetworkPreperation.dms>

	unit<uint32> Read_Final_Network
	:   StorageName = "='%LocalDataProjDir%/UnlinkedData/OSM/Final_Network_'+file_date+'.fss'"
	,   StorageReadOnly = "true"
	{
		attribute<rdc>                          geometry (arc);
		attribute<typeringen/OSM/wegtype>  wegtype;
		attribute<km_hr>                        maxspeed;
		attribute<string>                       OSM_id;
		attribute<string>                       wegtype_label                    := typeringen/OSM/wegtype/label[wegtype];
		attribute<km_hr>                        freeflow_speed_bike              := const(BikingSpeed_kmhr,.);
		attribute<km_hr>                        freeflow_speed_pedestrian        := const(WalkingSpeed_kmhr,.);
		
		attribute<bool>                         isPartOfCarNetwork        := typeringen/OSM/wegtype/IsPartOfCarNetwork[wegtype];
		attribute<bool>                         isPartOfBikeNetwork       := typeringen/OSM/wegtype/isPartOfBikeNetwork[wegtype];
		attribute<bool>                         isPartOfPedestrianNetwork := typeringen/OSM/wegtype/isPartOfPedestrianNetwork[wegtype];
		
		container Connectiveness
		{
			unit<uint32> src := ..;
			attribute<geometries/rdc>               point (src)           := first_point(src/geometry);
			attribute<geometries/rdc>               nextpoint (src)       := last_point(src/geometry);
			
			unit<uint32> pointset : = union_unit(src,src)
			{
				attribute<geometries/rdc>       point       := union_data(., ../point, ../nextpoint);
				attribute<bool>                 isVerbonden := isNull(rlookup(point, NodesNotConnected/point));
				attribute<src>                   ArcNr       := value(ID(.) % #(src), src);
			}
			
			unit<uint32> NodeSet := unique(pointset/point)
			,	DialogData = "Values"
			,	DialogType = "Map"
			{
				attribute<geometries/rdc> values;
			}

			attribute<NodeSet> F1 (src) := rlookup(point,     NodeSet/Values);
			attribute<NodeSet> F2 (src) := rlookup(nextpoint, NodeSet/Values);
		
			unit<uint32> networks:= connected_parts(F1, F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
			{
				attribute<uint32>   nr_nodes   := sum(const(1, NodeSet, uint32), partnr);
				parameter<uint32>   MaxNrNodes := max(networks/nr_nodes);
				parameter<networks> main       := rlookup(MaxNrNodes, nr_nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
			}

			unit<uint32> NodesNotConnected := Subset(networks/partnr <> networks/main)
			{
				attribute<geometries/rdc> point := NodeSet/Values[Nr_OrgEntity];
			}
			attribute<bool> isVerbonden (src) := all(pointset/isVerbonden, pointset/ArcNr);
		}	
	}

	unit<uint32> Network_Car := subset(Read_Final_Network/isPartOfCarNetwork)
	{
		attribute<rdc>                          geometry (arc)                   := Read_Final_Network/geometry[nr_OrgEntity];
		attribute<typeringen/OSM/wegtype>       wegtype                          := Read_Final_Network/wegtype[nr_OrgEntity];
		attribute<string>                       OSM_id                           := Read_Final_Network/OSM_id[nr_OrgEntity];
		attribute<string>                       wegtype_label                    := Read_Final_Network/wegtype_label[nr_OrgEntity];
		
		attribute<km_hr>                        freeflow_speed_car               := Read_Final_Network/maxspeed[nr_OrgEntity];
		attribute<km_hr>                        freeflow_speed_bike              := const((0/0)[km_hr],.);
		attribute<km_hr>                        freeflow_speed_pedestrian        := const((0/0)[km_hr],.);
		
		attribute<bool>                         IsHoofdweg                       := typeringen/OSM/wegtype/IsMain[wegtype];
		
		container Connectiveness
		{
			unit<uint32> src := ..;
			attribute<geometries/rdc>               point (src)           := first_point(src/geometry);
			attribute<geometries/rdc>               nextpoint (src)       := last_point(src/geometry);
			
			unit<uint32> pointset : = union_unit(src,src)
			{
				attribute<geometries/rdc>       point       := union_data(., ../point, ../nextpoint);
				attribute<bool>                 isVerbonden := isNull(rlookup(point, NodesNotConnected/point));
				attribute<src>                  ArcNr       := value(ID(.) % #(src), src);
			}
			
			unit<uint32> NodeSet := unique(pointset/point)
			,	DialogData = "Values"
			,	DialogType = "Map"
			{
				attribute<geometries/rdc> values;
			}

			attribute<NodeSet> F1 (src) := rlookup(point,     NodeSet/Values);
			attribute<NodeSet> F2 (src) := rlookup(nextpoint, NodeSet/Values);
		
			unit<uint32> networks:= connected_parts(F1, F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
			{
				attribute<uint32>   nr_nodes   := sum(const(1, NodeSet, uint32), partnr);
				parameter<uint32>   MaxNrNodes := max(networks/nr_nodes);
				parameter<networks> main       := rlookup(MaxNrNodes, nr_nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
			}

			unit<uint32> NodesNotConnected := Subset(networks/partnr <> networks/main)
			{
				attribute<geometries/rdc> point := NodeSet/Values[Nr_OrgEntity];
			}
			attribute<bool> isVerbonden (src) := all(pointset/isVerbonden, pointset/ArcNr);
		}
	}
}

