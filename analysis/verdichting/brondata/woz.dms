container WOZ
{
	// unit<uint32>    RegioUnit_buurt   := /Brondata/regios/buurten/src_2015;
	// unit<uint32>    RegioUnit_wijk    := /Brondata/regios/wijken/src_2015;

	unit<uint8> CBSKlasse := typeringen/bbg/gg_src
	{
		attribute<WOZBbg> WOZBbg_rel := id(.) == V/woongebied ? 0[uint8] : id(.) == V/detailhandel_en_horeca || id(.) == V/openbare_voorzieningen || id(.) == V/sociaalculturele_voorzieningen ? 1[uint8] : id(.) == V/bedrijfsterreinen ? 2[uint8] : 3[uint8];
	}
	
	unit<uint8> WOZBbg: NrOfRows = 4
	{
		attribute<string> name: ['woongebied', 'voorzieningen', 'bedrijfsterreinen', 'overigen'];
		attribute<uint8> EK_rel := id(.) + 1[.];
	}
	
	container Y2017 // peildatum 1 jan 2016 (bestand is 1 jan 2017)
	{
		container Gemeente := T('Gem'  , 'GM', /Analyse/RegioUnit_gem);
		container Wijk     := T('Wijk' , 'WK', /Analyse/RegioUnit_wijk);
		container Buurt    := T('Buurt', 'BU', /Analyse/RegioUnit_buurt);
		
		unit<uint32> BAG := Brondata/BAG/Snapshots/VBOs/Y201701/vbo;
		
		container per_WOZBb :=
			for_each_nedv(
				WOZBbg/name,
				'MakeDefined(MakeDefined(Buurt/domain/Nul2Undefined/'+WOZBbg/name+', Wijk/domain/Nul2Undefined/'+WOZBbg/name+'), Gemeente/domain/Nul2Undefined/'+WOZBbg/name+')',
				NL_grid/domain, Eur_m2
			)
		{
			attribute<Eur_m2> max_elem (NL_grid/domain) := = 'max_elem('+AsItemList(WOZBbg/name)+')';
		}
		
		attribute<Eur_m2> Gegeven_BBG (NL_grid/domain) := =
			'merge('
				'value(CBSKlasse/WOZbbg_rel[Brondata/bestand_bodem_gebruik/BBG/dominant/per_domain_grid/j2017], uint16),'
				'Eur_m2,'+
				AsItemList('per_WOZBb/'+WOZBbg/name)+
			')';
		
		
		attribute<Eur> Make_Per_vob (BAG) := Gegeven_BBG[BAG/NL_grid_domain_rel] * (BAG/oppervlakte_trunc_m2), StorageName = '%LocalDataProjDir%/UnlinkedData/Vastgoed/WOZ/WOZ2017.fss';
		
		attribute<Eur> Per_vob (BAG) : StorageName = '%LocalDataProjDir%/UnlinkedData/Vastgoed/WOZ/WOZ2017.fss';
		
		attribute<Eur> Mean_domain_grid (NL_grid/domain) := mean(Per_vob, BAG/NL_grid_domain_rel);
		// attribute<Classifications/Vastgoed/WOZ> PerWOZKlasse (NL_grid/domain) := classify(Mean_domain_grid, Classifications/Vastgoed/WOZ/ClassBreaks);
		
		container Niet_woningen
		{
			attribute<Eur> Per_vob (BAG/GebruiksdoelSets/niet_woon) := Gegeven_BBG[BAG/GebruiksdoelSets/niet_woon/NL_grid_domain_rel] * (BAG/GebruiksdoelSets/niet_woon/oppervlakte_trunc);
			attribute<Eur> Sum_domain_grid (NL_grid/domain) := sum(Per_vob, BAG/GebruiksdoelSets/niet_woon/NL_grid_domain_rel);
		}
		
		Template T
		{
			//
			parameter<string> SrcRef;
			parameter<string> CodeRef;
			unit<uint32> RegionK;
			//
			
			unit<uint32> Domain
			:  StorageName = "= '%Redev_DataDir%/Overig/190215_'+ SrcRef +'_woz.csv'"
			,  StorageType = "gdal.vect"
			,  StorageReadOnly = "True"
			{
				attribute<string> r2017;
				attribute<string> bg2015_groep;
				attribute<string> wozm2_mean;
				attribute<string> wozm2_sd;
				attribute<string> aantalobjecten;
				
				attribute<string> R_CODE := CodeRef+r2017;
				
				attribute<RegionK> Region_rel := = 'rjoin(R_CODE, RegionK/'+CodeRef+'_CODE, id(RegionK))';
				attribute<WOZBbg> WOZbbg_rel := rjoin(uint8(bg2015_groep), WOZBbg/EK_rel, id(WOZBbg));
				
				attribute<Eur_m2> mean := wozm2_mean[Eur_m2];
				attribute<Eur_m2> sd := wozm2_sd[Eur_m2];
				attribute<int32> n := aantalobjecten[int32];
				
				container per_WOZBb :=
					for_each_nedv(
						WOZBbg/name,
						'sum('
							'(Domain/mean + Domain/sd) * float32(Domain/WOZBbg_rel == '+string(id(WOZBbg))+'[WOZBbg]),'
							'Domain/Region_rel'
						')[RegionK/per_grid]',
						NL_grid/domain, Eur_m2
					)
				{
					attribute<Eur_m2> max_elem (NL_grid/domain) := = 'max_elem('+AsItemList(WOZBbg/name)+')';
				}
				
				container Nul2Undefined :=
					for_each_nedv(
						WOZBbg/name,
						'per_WOZBb/'+WOZBbg/name+' == 0[Eur_m2] ? (0/0)[Eur_m2] : per_WOZBb/'+WOZBbg/name,
						NL_grid/domain, Eur_m2
					);
			}
		}
	}
	/*
	container Y2015
	{
		unit<uint32> Buurten
		:  StorageName = "%Redev_DataDir%/Overig/WOZ_per_m2_2015_Buurten.csv"
		,  StorageType = "gdal.vect"
		,  StorageReadOnly = "True"
		,  DialogData = "geometry"
		,  DialogType = "map"
		{
			attribute<string> Buurt_code;
			attribute<string> Gemeente;
			attribute<string> Wijk;
			attribute<string> Buurt;
			attribute<string> _2012_TOT;
			attribute<string> _2012_WON;
			attribute<string> _2012_WON_corr := replace(_2012_WON, " ", "");
			attribute<string> _2012_NIETWON;
			attribute<string> _2015_TOT;
			attribute<string> _2015_WON;
			attribute<string> _2015_WON_corr := replace(_2015_WON, " ", "");
			attribute<string> _2015_NIETWON;
			attribute<string> _2015_NIETWON_corr := replace(_2015_NIETWON, " ", "");
			
			attribute<rdc>       geometry (RegioUnit_buurt, polygon)  := RegioUnit_buurt/Geometry;
			attribute<uint32>    WON_2012 (RegioUnit_buurt)           := rjoin(RegioUnit_buurt/BU_CODE, Buurt_code, _2012_WON_corr[uint32]);
			attribute<uint32>    WON_2015 (RegioUnit_buurt)           := rjoin(RegioUnit_buurt/BU_CODE, Buurt_code, _2015_WON_corr[uint32]);
			
			attribute<uint32>       NIET_WON_2015 (RegioUnit_buurt)      := rjoin(RegioUnit_buurt/BU_CODE, Buurt_code, _2015_NIETWON_corr[uint32]);
		}
		
		unit<uint32> Wijken
		:  StorageName = "%Redev_DataDir%/Overig/WOZ_per_m2_2015_Wijken.csv"
		,  StorageType = "gdal.vect"
		,  StorageReadOnly = "True"
		,  DialogData = "geometry"
		,  DialogType = "map"
		{
			attribute<string> Wijkcode;
			attribute<string> Wijkcode_corr  := Wijkcode == "#N/A" ? CBS_Wijkcode : Wijkcode;
			attribute<string> Gemeente;
			attribute<string> Wijk;
			attribute<string> Gemeente_wijk := Gemeente + "_" + Wijk;
			attribute<string> _2012_TOT;
			attribute<string> _2012_WON;
			attribute<string> _2012_WON_corr := replace(_2012_WON, " ", "");
			attribute<string> _2012_NIETWON;
			attribute<string> _2015_TOT;
			attribute<string> _2015_WON;
			attribute<string> _2015_WON_corr := replace(_2015_WON, " ", "");
			attribute<string> _2015_NIETWON;
			attribute<string> _2015_NIETWON_corr := replace(_2015_NIETWON, " ", "");
			
			attribute<rdc>          geometry (RegioUnit_wijk, polygon)  := RegioUnit_wijk/Geometry;
			attribute<uint32>       WON_2012 (RegioUnit_wijk)           := rjoin(RegioUnit_wijk/WK_CODE, Wijkcode, _2012_WON_corr[uint32]);
			attribute<uint32>       WON_2015 (RegioUnit_wijk)           := rjoin(RegioUnit_wijk/WK_CODE, Wijkcode, _2015_WON_corr[uint32]);
			attribute<uint32>       NIET_WON_2015 (RegioUnit_wijk)      := rjoin(RegioUnit_wijk/WK_CODE, Wijkcode, _2015_NIETWON_corr[uint32]);
			
			attribute<string>       CBS_Wijkcode := rjoin(Gemeente_wijk, RegioUnit_wijk/Gemeente_wijk, RegioUnit_wijk/WK_CODE);
		}
	}
	*/
}

