container BRK
{ 
	unit<uint32>      RegioUnit_Aggl      := Brondata/RegioIndelingen/gemeente/Agglomeration_uq;
	unit<uint32>      RegioUnit_AMS       := Brondata/RegioIndelingen/Gemeente/Amsterdam;
	
	
	// unit<uint32> Perceel_GML 
	// :	StorageName     = "='%SourceDataDir%/BRK/'+Parameters/BRK_file_date+'/gml/kadastralekaart_perceel.gml'"
	// , 	StorageType     = "gdal.vect"
	// ,	StorageReadOnly = "True"
	// ,	DialogData      = "rdc"
	// {
		
	// }
	
	// unit<uint32> Make_Perceel_FSS := Perceel_GML
	// ,	StorageName     = "='%SourceDataDir%/BRK/'+Parameters/BRK_file_date+'/fss/perceel.fss'"
	// {
		// attribute<rdc>      geometry    (poly)   := Perceel_GML/geometry;
		// attribute<int64>    identificatie        := Perceel_GML/identificatie;
		// attribute<string>   beginGeldigheid      := Perceel_GML/beginGeldigheid;
		// attribute<string>   TijdstipRegistratie  := Perceel_GML/TijdstipRegistratie;
		// attribute<int32>    Volgnummer           := Perceel_GML/Volgnummer;
		// attribute<string>   Code                 := Perceel_GML/Code;
		// attribute<string>   Waarde               := Perceel_GML/Waarde;
		// attribute<string>   Sectie               := Perceel_GML/Sectie;
		// attribute<int32>    Perceelnummer        := Perceel_GML/Perceelnummer;
		// attribute<float64>  PerceelnummerRotatie := Perceel_GML/PerceelnummerRotatie;
	// }
	
	unit<uint32> Perceel
	:	StorageName     = "='%SourceDataDir%/BRK/'+Parameters/BRK_file_date+'/fss/perceel.fss'"
	, 	StorageReadOnly = "true"
	{
		attribute<rdc>      geometry    (poly);
		attribute<int64>    identificatie;
		attribute<string>   beginGeldigheid;
		attribute<string>   TijdstipRegistratie;
		attribute<int32>    Volgnummer;
		attribute<string>   Code;
		attribute<string>   Waarde;
		attribute<string>   Sectie;
		attribute<int32>    Perceelnummer;
		attribute<float64>  PerceelnummerRotatie;
		
		
		unit<uint32> Cutout_roads_tiled := bg_overlay_polygon(geometry, /Brondata/BRT/TiledNonWegen)
		{
			attribute<rdc> geometry (poly);
		}
		
		unit<uint32> Cutout_roads_tiled_split := split_polygon(Cutout_roads_tiled/geometry[rdc_mm])
		, StorageName = "='%LocalDataProjDir%/Temp/BRK/BRK_'+Parameters/BRK_file_date+'_minus_BRT_wegen_'+Parameters/BRT_file_date+'_Split.fss'"
		{
			attribute<rdc_mm> geometry    (poly) : DisableStorage = "true";
			attribute<rdc>    geometry_rd (poly) := geometry[rdc];
		}
		
		unit<uint32> Read_Cutout_roads_tiled_split
		: StorageName = "='%LocalDataProjDir%/Temp/BRK/BRK_'+Parameters/BRK_file_date+'_minus_BRT_wegen_'+Parameters/BRT_file_date+'_Split.fss'"
		, StorageReadOnly = "true"
		{
			attribute<rdc> geometry_rd (poly);
			attribute<m2>  area               := area(geometry_rd, m2);
		}
		
		unit<uint32> Perceel_minus_wegen := select(Read_Cutout_roads_tiled_split/area > 0.01[m2])
		{
			attribute<rdc> geometry (poly) := collect_by_cond(., Read_Cutout_roads_tiled_split/area > 0.01[m2], Read_Cutout_roads_tiled_split/geometry_rd);
			
			container Find_Overlap 
			{
				unit<uint32> overlap_vector := polygon_connectivity(Perceel_minus_wegen/geometry[rdc_mm])
				{
					attribute<rdc>     geometry_F1 (poly) := Perceel_minus_wegen/geometry[F1];
					attribute<rdc>     geometry_F2 (poly) := Perceel_minus_wegen/geometry[F2];
			   
					attribute<rdc>     intersect   (poly) := bg_intersect(geometry_F1, geometry_F2);
					attribute<m2>      area               := area(intersect, m2);
				}

				unit<uint32> met_overlap_vector := select_with_org_rel(overlap_vector/area > 0[m2])
				{
					attribute<rdc>     geometry    (poly) := overlap_vector/intersect[org_rel];
					attribute<m2>      area               := overlap_vector/area[org_rel];
				}
			}
		}
		
	}
}
