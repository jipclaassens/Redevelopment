container Optimaal_woning_type:  using = "eenheden"
{
	unit<uint32>				RegioUnit_buurt     	:= brondata/regios/buurten/src_2012;
	unit<uint32>				RegioUnit_wijk    		:= brondata/regios/wijken/src_2012;
	unit<uint32>				RegioUnit_gem    		:= BronData/regios/gemeenten/gem_2012/gem_uq;
	unit<uint32>				RegioUnit_nvm    		:= BronData/regios/nvm/src;
	unit<uint32>				RegioUnit_prov   		:= BronData/regios/provincies/src_2012;
	unit<uint32>				Vbo			:= Brondata/BAG/snapshots/vbos/y2017/src/GebruiksdoelSets/woon/GebruiksdoelSet;
	unit<uint8>				type_woonpand		:= typeringen/type_woonpand_4;

	container bouwkosten
	{
		parameter<eur_m2>			appartement		:= 924.82[eur_m2];
		parameter<eur_m2>			rijtjeswoning		:= 809.33[eur_m2];
		parameter<eur_m2>			twee_onder_1_kap	:= 958.76[eur_m2];
		parameter<eur_m2>			vrijstaand		:= 924.18[eur_m2];
		
		container regionaal :=
			for_each_nedv(
				type_woonpand/name
				, 'RegioUnit_prov/bouwkosten_regionaal_grid * Brondata/regios/grootstedelijke_agglomeratie/src_2012/bouwkosten_stedelijk_grid * Brondata/regios/corop/src_2012/bouwkosten_grensgebieden_grid * Brondata/regios/gemeenten/gem_2012/gem_uq/bouwkosten_wadden_grid * bouwkosten/'+type_woonpand/name
				, NL_grid/domain
				, eur_m2	
			);
	}
	container avg_opp
	{
		container buurt :=
			for_each_nedv(
				type_woonpand/name
				, 'mean(oppervlakte/PerJaar/Y2017/opp_sub/woonpand_rel == '+string(id(type_woonpand))+' [uint8]? oppervlakte/PerJaar/Y2017/opp_sub/oppervlakte[m2] : 0[m2], oppervlakte/PerJaar/Y2017/opp_sub/buurt_rel)'
				, RegioUnit_buurt
				, m2
			);
			
		container wijk :=
			for_each_nedv(
				type_woonpand/name
				, 'mean(oppervlakte/PerJaar/Y2017/opp_sub/woonpand_rel == '+string(id(type_woonpand))+' [uint8]? oppervlakte/PerJaar/Y2017/opp_sub/oppervlakte[m2] : 0[m2], oppervlakte/PerJaar/Y2017/opp_sub/wijk_rel)'
				, RegioUnit_wijk
				, m2
			);
			
		container gem :=
			for_each_nedv(
				type_woonpand/name
				, 'mean(oppervlakte/PerJaar/Y2017/opp_sub/woonpand_rel == '+string(id(type_woonpand))+' [uint8]? oppervlakte/PerJaar/Y2017/opp_sub/oppervlakte[m2] : 0[m2], oppervlakte/PerJaar/Y2017/opp_sub/gem_rel)'
				, RegioUnit_gem
				, m2
			);
		
		container grid :=
			for_each_nedv(
				type_woonpand/name
				, 'max_elem(avg_opp/buurt/'+type_woonpand/name+'[brondata/regios/buurten/src_2012/grid],avg_opp/wijk/'+type_woonpand/name+'[brondata/regios/wijken/src_2012/grid],avg_opp/gem/'+type_woonpand/name+'[BronData/regios/gemeenten/gem_2012/gem_uq/grid])'
				, NL_grid/domain
				, m2	
			), FreeData = "False";
	}
	
	container avg_dens
	{
		container buurt
		{
			attribute<nrwonha> appartement (RegioUnit_buurt)	:= MakeDefined(mean(vbo/type_woonpand/appartement[nrwonha] > 20[nrwonha] ? vbo/type_woonpand/appartement[nrwonha] : (0/0)[nrwonha], brondata/regios/buurten/src_2012/grid),0[nrwonha]);
			attribute<nrwonha> rijtjeswoning (RegioUnit_buurt)	:= MakeDefined(mean(vbo/type_woonpand/rijtjeswoning[nrwonha] > 20[nrwonha] ? vbo/type_woonpand/rijtjeswoning[nrwonha] : (0/0)[nrwonha], brondata/regios/buurten/src_2012/grid),0[nrwonha]);
			attribute<nrwonha> twee_onder_1_kap (RegioUnit_buurt) := MakeDefined(mean(vbo/type_woonpand/twee_onder_1_kap[nrwonha] > 10[nrwonha] ? vbo/type_woonpand/twee_onder_1_kap[nrwonha] : (0/0)[nrwonha], brondata/regios/buurten/src_2012/grid),0[nrwonha]);
			attribute<nrwonha> vrijstaand (RegioUnit_buurt)             := MakeDefined(mean(vbo/type_woonpand/vrijstaand[nrwonha] > 5[nrwonha] ? vbo/type_woonpand/vrijstaand[nrwonha] : (0/0)[nrwonha], brondata/regios/buurten/src_2012/grid),0[nrwonha]);
		}
		
		container wijk
		{
			attribute<nrwonha> appartement (RegioUnit_wijk)	:= MakeDefined(mean(vbo/type_woonpand/appartement[nrwonha] > 20[nrwonha] ? vbo/type_woonpand/appartement[nrwonha] : (0/0)[nrwonha], brondata/regios/wijken/src_2012/grid),0[nrwonha]);
			attribute<nrwonha> rijtjeswoning (RegioUnit_wijk)	:= MakeDefined(mean(vbo/type_woonpand/rijtjeswoning[nrwonha] > 20[nrwonha] ? vbo/type_woonpand/rijtjeswoning[nrwonha] : (0/0)[nrwonha], brondata/regios/wijken/src_2012/grid),0[nrwonha]);
			attribute<nrwonha> twee_onder_1_kap (RegioUnit_wijk) := MakeDefined(mean(vbo/type_woonpand/twee_onder_1_kap[nrwonha] > 10[nrwonha] ? vbo/type_woonpand/twee_onder_1_kap[nrwonha] : (0/0)[nrwonha], brondata/regios/wijken/src_2012/grid),0[nrwonha]);
			attribute<nrwonha> vrijstaand (RegioUnit_wijk)             := MakeDefined(mean(vbo/type_woonpand/vrijstaand[nrwonha] > 5[nrwonha] ? vbo/type_woonpand/vrijstaand[nrwonha] : (0/0)[nrwonha], brondata/regios/wijken/src_2012/grid),0[nrwonha]);
		}
		
		container gem
		{
			attribute<nrwonha> appartement (RegioUnit_gem)	:= MakeDefined(mean(vbo/type_woonpand/appartement[nrwonha] > 20[nrwonha] ? vbo/type_woonpand/appartement[nrwonha] : (0/0)[nrwonha], BronData/regios/gemeenten/gem_2012/gem_uq/grid),0[nrwonha]);
			attribute<nrwonha> rijtjeswoning (RegioUnit_gem)	:= MakeDefined(mean(vbo/type_woonpand/rijtjeswoning[nrwonha] > 20[nrwonha] ? vbo/type_woonpand/rijtjeswoning[nrwonha] : (0/0)[nrwonha], BronData/regios/gemeenten/gem_2012/gem_uq/grid),0[nrwonha]);
			attribute<nrwonha> twee_onder_1_kap (RegioUnit_gem) := MakeDefined(mean(vbo/type_woonpand/twee_onder_1_kap[nrwonha] > 10[nrwonha] ? vbo/type_woonpand/twee_onder_1_kap[nrwonha] : (0/0)[nrwonha], BronData/regios/gemeenten/gem_2012/gem_uq/grid),0[nrwonha]);
			attribute<nrwonha> vrijstaand (RegioUnit_gem)             := MakeDefined(mean(vbo/type_woonpand/vrijstaand[nrwonha] > 5[nrwonha] ? vbo/type_woonpand/vrijstaand[nrwonha] : (0/0)[nrwonha], BronData/regios/gemeenten/gem_2012/gem_uq/grid),0[nrwonha]);
		}
		container grid :=
			for_each_nedv(
				type_woonpand/name
				, 'max_elem(avg_dens/buurt/'+type_woonpand/name+'[brondata/regios/buurten/src_2012/grid],avg_dens/wijk/'+type_woonpand/name+'[brondata/regios/wijken/src_2012/grid],avg_dens/gem/'+type_woonpand/name+'[BronData/regios/gemeenten/gem_2012/gem_uq/grid])'
				, NL_grid/domain
				, nrwonha	
			), FreeData = "False";
	}
	container costs
	{
		container costs_per_ha :=
			for_each_nedv(
				type_woonpand/name
				, 'MakeDefined(bouwkosten/regionaal/'+type_woonpand/name+',0[eur])* MakeDefined(avg_opp/grid/'+type_woonpand/name+',0[m2])* MakeDefined(avg_dens/grid/'+type_woonpand/name+',0[nrwonha])'
				, NL_grid/domain
				, eur_ha
			);
	}
	container rev
	{
		container avg_rev
		{
			container buurt :=
				for_each_nedv(
					type_woonpand/name
					, 'mean(brondata/nvm/'+type_woonpand/name+'/price, brondata/nvm/'+type_woonpand/name+'/buurt_rel)'
					, RegioUnit_buurt
					, eur
				);
				
			container wijk :=
				for_each_nedv(
					type_woonpand/name
					, 'mean(brondata/nvm/'+type_woonpand/name+'/price, brondata/nvm/'+type_woonpand/name+'/wijk_rel)'
					, RegioUnit_wijk
					, eur
				);
				
			container gem :=
				for_each_nedv(
					type_woonpand/name
					, 'mean(brondata/nvm/'+type_woonpand/name+'/price, brondata/nvm/'+type_woonpand/name+'/gem_rel)'
					, RegioUnit_gem
					, eur
				);
			container nvm :=
				for_each_nedv(
					type_woonpand/name
					, 'mean(brondata/nvm/'+type_woonpand/name+'/price, brondata/nvm/'+type_woonpand/name+'/nvm_rel)'
					, RegioUnit_nvm
					, eur
				);
			container grid :=
				for_each_nedv(
					type_woonpand/name
					, 'max_elem(MakeDefined(buurt/'+type_woonpand/name+',0[eur])[brondata/regios/buurten/src_2012/grid], MakeDefined(wijk/'+type_woonpand/name+',0[eur])[brondata/regios/wijken/src_2012/grid], MakeDefined(gem/'+type_woonpand/name+',0[eur])[BronData/regios/gemeenten/gem_2012/gem_uq/grid], MakeDefined(nvm/'+type_woonpand/name+',0[eur])[BronData/regios/nvm/src/grid])'
					, NL_grid/domain
					, eur	
				), FreeData = "False";
			
			container grid_een_meergezins
			{
				attribute<eur> eengezins (NL_grid/domain) := brondata/regios/nederland/src/IsNederland_8[float32] * ((grid/rijtjeswoning + grid/twee_onder_1_kap + grid/vrijstaand) / 3[eur]);
				attribute<eur> meergezins (NL_grid/domain) := brondata/regios/nederland/src/IsNederland_8[float32] * grid/appartement;
			}	
		}
		
		container avg_rev_nieuwbouw
		{
			container buurt :=
				for_each_nedv(
					type_woonpand/name
					, 'mean(brondata/nvm/'+type_woonpand/name+'/uitleg ? brondata/nvm/'+type_woonpand/name+'/price : (0/0)[eur], brondata/nvm/'+type_woonpand/name+'/buurt_rel)'
					, RegioUnit_buurt
					, eur
				);
				
			container wijk :=
				for_each_nedv(
					type_woonpand/name
					, 'mean(brondata/nvm/'+type_woonpand/name+'/uitleg ? brondata/nvm/'+type_woonpand/name+'/price : (0/0)[eur], brondata/nvm/'+type_woonpand/name+'/wijk_rel)'
					, RegioUnit_wijk
					, eur
				);
				
			container gem :=
				for_each_nedv(
					type_woonpand/name
					, 'mean(brondata/nvm/'+type_woonpand/name+'/uitleg ? brondata/nvm/'+type_woonpand/name+'/price : (0/0)[eur], brondata/nvm/'+type_woonpand/name+'/gem_rel)'
					, RegioUnit_gem
					, eur
				);
				
			container nvm :=
				for_each_nedv(
					type_woonpand/name
					, 'mean(brondata/nvm/'+type_woonpand/name+'/uitleg ? brondata/nvm/'+type_woonpand/name+'/price : (0/0)[eur], brondata/nvm/'+type_woonpand/name+'/nvm_rel)'
					, RegioUnit_nvm
					, eur
				);
			container provincie :=
				for_each_nedv(
					type_woonpand/name
					, 'mean(brondata/nvm/'+type_woonpand/name+'/uitleg ? brondata/nvm/'+type_woonpand/name+'/price : (0/0)[eur], brondata/nvm/'+type_woonpand/name+'/prov_rel)'
					, RegioUnit_prov
					, eur
				);
			container grid :=
				for_each_nedv(
					type_woonpand/name
					, 'max_elem(MakeDefined(buurt/'+type_woonpand/name+',0[eur])[brondata/regios/buurten/src_2012/grid], MakeDefined(wijk/'+type_woonpand/name+',0[eur])[brondata/regios/wijken/src_2012/grid], MakeDefined(gem/'+type_woonpand/name+',0[eur])[BronData/regios/gemeenten/gem_2012/gem_uq/grid], MakeDefined(nvm/'+type_woonpand/name+',0[eur])[BronData/regios/nvm/src/grid], MakeDefined(provincie/'+type_woonpand/name+',0[eur])[brondata/regios/provincies/src_2012/grid])'
					, NL_grid/domain
					, eur	
				), FreeData = "False";
			
			container grid_een_meergezins
			{
				attribute<eur> eengezins (NL_grid/domain) := brondata/regios/nederland/src/IsNederland_8[float32] * ((grid/rijtjeswoning + grid/twee_onder_1_kap + grid/vrijstaand) / 3[eur]);
				attribute<eur> meergezins (NL_grid/domain) := brondata/regios/nederland/src/IsNederland_8[float32] *  grid/appartement;
			}	
		}
			
		container rev_per_ha :=
			for_each_nedv(
				type_woonpand/name
				, 'MakeDefined(avg_rev/grid/'+type_woonpand/name+' * avg_dens/grid/'+type_woonpand/name+',0[eur_ha])'
				, NL_grid/domain
				, eur_ha
			)
		{
			attribute<eur_ha> eengezins (NL_grid/domain) := MakeDefined(rev_per_ha/rijtjeswoning,0[eur]) + MakeDefined(rev_per_ha/twee_onder_1_kap,0[eur]) + MakeDefined(rev_per_ha/vrijstaand,0[eur]), FreeData = "False";
			attribute<eur_ha> meergezins (NL_grid/domain) := MakeDefined(rev_per_ha/appartement,0[eur]), FreeData = "False";
		}
		
	}
	container profit_per_ha :=
		for_each_nedv(
			type_woonpand/name
			, 'rev/rev_per_ha/'+type_woonpand/name+' - costs/costs_per_ha/'+type_woonpand/name
			, NL_grid/domain
			, eur_ha
		);
	
	attribute<eur_ha> dominant (NL_grid/domain)	:=  = 'max_elem('+AsItemList('profit_per_ha/'+typeringen/type_woonpand_4/name)+')';
	
	attribute<type_woonpand> dominant_pandtype 	(NL_grid/domain)	:= 
		switch(
			case(dominant != 0[eur_ha] && dominant == profit_per_ha/appartement, 3[uint8])
			,case(dominant != 0[eur_ha] && dominant == profit_per_ha/rijtjeswoning, 2[uint8])
			,case(dominant != 0[eur_ha] && dominant == profit_per_ha/twee_onder_1_kap, 1[uint8])
			,case(dominant != 0[eur_ha] && dominant == profit_per_ha/vrijstaand, 0[uint8])
			, (0/0)[uint8]
		);
	
	attribute<type_woonpand> dominant_pandtype_NL (NL_grid/domain) := dominant_pandtype * /Brondata/regios/nederland/src/IsNederland_8[uint8];
		
	// attribute<eur_ha> dominant_grid (NL_grid/domain)	:=  dominant[/Brondata/regios/buurten/src_2012/grid];

}
