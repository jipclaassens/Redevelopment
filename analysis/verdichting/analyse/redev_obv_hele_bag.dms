container Redev_obv_hele_bag :  using = "eenheden;typeringen;typeringen/bag;typeringen/redev;typeringen/tijd;geometries"
{
	unit<uint32>      Perceel             := /Brondata/BRK/Perceel_minus_Roads_CombinedFromCOROP;
	unit<uint32>      RegioUnit_Gem_oud   := /Brondata/RegioIndelingen/Gemeente_oud;
	
	#include<PrepBAG.dms>
	
	container PrepDomains := 
		for_each_ne(
			AdditionalClassifications/MutatieTypen/name
			, 'PrepDomains_T('+quote(AdditionalClassifications/MutatieTypen/name)+')'
		)
	{
		container Onveranderd
		{
			unit<uint32> domain := PrepBAG/BAG_Tabel/Onveranderd_Woon/uq;
		}
	}
		
	#include<AdditionalOperations.dms>
	
	
	
	container FinalDomains
	{
		unit<uint32> SN_Sites                       := AdditionalOperations/SN/Result;
		unit<uint32> SN_Sloop_Objecten              := AdditionalOperations/SN/Result/Sloop_Objecten;
		unit<uint32> SN_Nieuwbouw_Objecten          := AdditionalOperations/SN/Result/Nieuwbouw_Objecten;
		
		unit<uint32> Toevoeging_Sites               := AdditionalOperations/Clustering/T/CleanUp; 
		unit<uint32> Toevoeging_Objecten            := AdditionalOperations/Clustering/T/CleanUp/Objecten; 
		
		unit<uint32> Transformatie_Sites            := AdditionalOperations/Clustering/TMplus/CleanUp;
		unit<uint32> Transformatie_Objecten         := AdditionalOperations/Clustering/TMplus/CleanUp/Objecten;
		
		unit<uint32> Onttrekking_Sites              := AdditionalOperations/Clustering/O/CleanUp;
		unit<uint32> Onttrekking_Objecten           := AdditionalOperations/Clustering/O/CleanUp/Objecten;
		
		unit<uint32> Onveranderd_Sites              := AdditionalOperations/Clustering/Onveranderd/CleanUp;
		unit<uint32> Onveranderd_Objecten           := AdditionalOperations/Clustering/Onveranderd/CleanUp/Objecten;
		
		unit<uint32> Nieuwbouw_OpOnbebouwd_Sites    := AdditionalOperations/Nieuwbouw_Panden_OpOnbebouwd/result;
		unit<uint32> Nieuwbouw_OpOnbebouwd_Objecten := AdditionalOperations/Nieuwbouw_Panden_OpOnbebouwd/result/Objecten;
		
		unit<uint32> Nieuwbouw_OpBebouwd_Sites      := AdditionalOperations/Nieuwbouw_Panden_OpBebouwd/result;
		unit<uint32> Nieuwbouw_OpBebouwd_Objecten   := AdditionalOperations/Nieuwbouw_Panden_OpBebouwd/result/Objecten;
	}
	
	unit<uint8> Redev_ObjectTypes : nrofrows = 8
	{
		attribute<string> name : ['SN_Sloop','SN_Nieuwbouw','Toevoeging','Transformatie','Onttrekking','Onveranderd','Nieuwbouw_OpBebouwd','Nieuwbouw_OpOnbebouwd'];
		attribute<string> label := name;
	}
	unit<uint8> Redev_SiteTypes : nrofrows = 7
	{
		attribute<string> name : ['SN','Toevoeging','Transformatie','Onttrekking','Onveranderd','Nieuwbouw_OpBebouwd','Nieuwbouw_OpOnbebouwd'];
		attribute<string> label := name;
	}
	
	// voeg urbK rel toe
	unit<uint32> PerObject_Export := ='union_unit('+AsItemList('FinalDomains/'+Redev_ObjectTypes/name+'_Objecten')+')'
	, StorageName = "%LocalDataProjDir%/Temp/PerObject_Export.fss"
	{

		attribute<rdc>              geometry                        := ='union_data(., '+AsItemList('FinalDomains/'+Redev_ObjectTypes/name+'_Objecten/vbo_geometry')+')';
		attribute<string>           site_id                         := ='union_data(., '+AsItemList('FinalDomains/'+Redev_ObjectTypes/name+'_Objecten/site_id')+')';
		attribute<Redev_ObjectTypes>type_class                      := ='rlookup(union_data(., '+AsList('const('+quote(Redev_ObjectTypes/name)+',FinalDomains/'+Redev_ObjectTypes/name+'_Objecten)',',')+'), Redev_ObjectTypes/name)';
		attribute<upoint>           fdom_id                         := ='union_data(., '+AsList('point(const('+string(id(Redev_ObjectTypes))+',FinalDomains/'+Redev_ObjectTypes/name+'_Objecten), id(FinalDomains/'+Redev_ObjectTypes/name+'_Objecten))',',')+')';
		attribute<int32>            MutatieMaand                    := ='union_data(., '+AsItemList('FinalDomains/'+Redev_ObjectTypes/name+'_Objecten/MutatieMaand')+')';
	}
	
	unit<uint32> PerSite_Export := ='union_unit('+AsItemList('FinalDomains/'+Redev_SiteTypes/name+'_Sites')+')'
	, StorageName = "%LocalDataProjDir%/Temp/PerSite_Export.fss"
	{

		attribute<rdc>              geometry (poly)                 := ='union_data(., '+AsItemList('FinalDomains/'+Redev_SiteTypes/name+'_Sites/geometry')+')';
		attribute<string>           site_id                         := ='union_data(., '+AsItemList('FinalDomains/'+Redev_SiteTypes/name+'_Sites/site_id')+')';
		attribute<Redev_SiteTypes>  type_class                      := ='rlookup(union_data(., '+AsList('const('+quote(Redev_SiteTypes/name)+',FinalDomains/'+Redev_SiteTypes/name+'_Sites)',',')+'), Redev_SiteTypes/name)';
		attribute<upoint>           fdom_id                         := ='union_data(., '+AsList('point(const('+string(id(Redev_SiteTypes))+',FinalDomains/'+Redev_SiteTypes/name+'_Sites), id(FinalDomains/'+Redev_SiteTypes/name+'_Sites))',',')+')';
	}

	unit<uint32> Read_PerObject_Export
	: StorageName = "= propvalue(PerObject_Export, 'StorageName')"
	, StorageReadOnly = "true"
	{
		attribute<rdc>              geometry;
		attribute<string>           site_id;
		attribute<Redev_ObjectTypes>type_class;
		attribute<upoint>           fdom_id;
		attribute<int32>            MutatieMaand;
		
		attribute<UrbanisationK>    UrbanisationK_rel                         := Analyse/DetermineUrbanisationK/Urbanisation[point_in_polygon(geometry, RegioUnit_gem_oud/geometry)];
	}
	
	unit<uint32> Read_PerSite_Export
	: StorageName = "= propvalue(PerSite_Export, 'StorageName')"
	, StorageReadOnly = "true"
	{
		attribute<rdc>              geometry (poly);
		attribute<string>           site_id;
		attribute<Redev_SiteTypes>  type_class;
		attribute<upoint>           fdom_id;
	}

	
	#include<AdditionalClassifications.dms>
	
	Template PrepDomains_T
	{
		parameter<string> name;
		// /
		unit<uint32> domain     := ='select_with_org_rel(PrepBAG/FinalMutationTable/MutatieTypen_rel == AdditionalClassifications/MutatieTypen/v/'+name+')'
		{
			attribute<rdc>         vbo_geometry                                := org_rel -> geometry;
			attribute<int32>       MutatieMaand                                := org_rel -> MutatieMaand;
			attribute<string>      label                                       := org_rel -> string(pand_bag_nr);
			attribute<rdc>         pand_geometry  (poly)                       := org_rel -> pand_geometry;
			unit<uint32>           overlay_metPercelen                         := overlay_polygon(perceel/geometry[rdc_mm], pand_geometry[rdc_mm]) //intersect nieuwbouw_perceel_metSloop met gesloopte panden
			{
				attribute<m2> area_percelen := area(perceel/geometry[rdc], m2)[first_rel];
				attribute<m2> area_panden   := area(pand_geometry, m2)[second_rel];
				
				attribute<float32> share_pand_op_perceel := area_panden / area_percelen;
			}
		} 
	}
 
}


