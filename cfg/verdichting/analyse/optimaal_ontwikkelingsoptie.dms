container Optimaal_ontwikkelingsoptie:  using = "eenheden"
{
	unit<uint32>				RegioUnit_buurt     	:= brondata/regios/buurten/src_2012;
	unit<uint32>				RegioUnit_wijk    		:= brondata/regios/wijken/src_2012;
	unit<uint32>				RegioUnit_gem    		:= BronData/regios/gemeenten/gem_2012/gem_uq;
	unit<uint32>				RegioUnit_nvm    		:= BronData/regios/nvm/src;
	unit<uint32>				RegioUnit_prov   		:= BronData/regios/provincies/src_2012;
	unit<uint32>				Vbo			:= Brondata/BAG/snapshots/vbos/y2017/src/GebruiksdoelSets/woon/GebruiksdoelSet;
	unit<uint8>				type_woonpand		:= typeringen/type_woonpand_4;
	unit<uint8>				ontwikkelopties		:= typeringen/ontwikkelopties;

	container avg_opp
	{
		container buurt :=
			for_each_nedv(
				type_woonpand/name
				, 'mean(oppervlakte/opp_sub/y2018/opp_sub/woonpand_rel == '+string(type_woonpand/id)+' [uint8]? oppervlakte/opp_sub/y2018/opp_sub/oppervlakte[m2] : 0[m2], oppervlakte/opp_sub/y2018/opp_sub/buurt_rel)'
				, RegioUnit_buurt
				, m2
			);
			
		container wijk :=
			for_each_nedv(
				type_woonpand/name
				, 'mean(oppervlakte/opp_sub/y2018/opp_sub/woonpand_rel == '+string(type_woonpand/id)+' [uint8]? oppervlakte/opp_sub/y2018/opp_sub/oppervlakte[m2] : 0[m2], oppervlakte/opp_sub/y2018/opp_sub/wijk_rel)'
				, RegioUnit_wijk
				, m2
			);
			
		container gem :=
			for_each_nedv(
				type_woonpand/name
				, 'mean(oppervlakte/opp_sub/y2018/opp_sub/woonpand_rel == '+string(type_woonpand/id)+' [uint8]? oppervlakte/opp_sub/y2018/opp_sub/oppervlakte[m2] : 0[m2], oppervlakte/opp_sub/y2018/opp_sub/gem_rel)'
				, RegioUnit_gem
				, m2
			);
		
		container grid :=
			for_each_nedv(
				type_woonpand/name
				, 'max_elem(avg_opp/buurt/'+type_woonpand/name+'[brondata/regios/buurten/src_2012/grid],avg_opp/wijk/'+type_woonpand/name+'[brondata/regios/wijken/src_2012/grid],avg_opp/gem/'+type_woonpand/name+'[BronData/regios/gemeenten/gem_2012/gem_uq/grid])'
				, NL_grid/domain
				, m2	
			), FreeData = "False";
	}
	
	container rev
	{
		container avg_rev
		{
			container buurt :=
				for_each_nedv(
					type_woonpand/name
					, 'mean(brondata/nvm/'+type_woonpand/name+'/price, brondata/nvm/'+type_woonpand/name+'/buurt_rel)'
					, RegioUnit_buurt
					, eur
				);
				
			container wijk :=
				for_each_nedv(
					type_woonpand/name
					, 'mean(brondata/nvm/'+type_woonpand/name+'/price, brondata/nvm/'+type_woonpand/name+'/wijk_rel)'
					, RegioUnit_wijk
					, eur
				);
				
			container gem :=
				for_each_nedv(
					type_woonpand/name
					, 'mean(brondata/nvm/'+type_woonpand/name+'/price, brondata/nvm/'+type_woonpand/name+'/gem_rel)'
					, RegioUnit_gem
					, eur
				);
			container nvm :=
				for_each_nedv(
					type_woonpand/name
					, 'mean(brondata/nvm/'+type_woonpand/name+'/price, brondata/nvm/'+type_woonpand/name+'/nvm_rel)'
					, RegioUnit_nvm
					, eur
				);
			container grid :=
				for_each_nedv(
					type_woonpand/name
					, 'max_elem(MakeDefined(buurt/'+type_woonpand/name+',0[eur])[brondata/regios/buurten/src_2012/grid], MakeDefined(wijk/'+type_woonpand/name+',0[eur])[brondata/regios/wijken/src_2012/grid], MakeDefined(gem/'+type_woonpand/name+',0[eur])[BronData/regios/gemeenten/gem_2012/gem_uq/grid], MakeDefined(nvm/'+type_woonpand/name+',0[eur])[BronData/regios/nvm/src/grid])'
					, NL_grid/domain
					, eur	
				), FreeData = "False";
			
			container grid_een_meergezins
			{
				attribute<eur> eengezins (NL_grid/domain) := brondata/regios/nederland/src/IsNederland_8[float32] * ((grid/rijtjeswoning + grid/twee_onder_1_kap + grid/vrijstaand) / 3[eur]);
				attribute<eur> meergezins (NL_grid/domain) := brondata/regios/nederland/src/IsNederland_8[float32] * grid/appartement;
			}	
		}
		
		container avg_rev_nieuwbouw
		{
			container buurt :=
				for_each_nedv(
					type_woonpand/name
					, 'mean(brondata/nvm/'+type_woonpand/name+'/uitleg ? brondata/nvm/'+type_woonpand/name+'/price : (0/0)[eur], brondata/nvm/'+type_woonpand/name+'/buurt_rel)'
					, RegioUnit_buurt
					, eur
				);
				
			container wijk :=
				for_each_nedv(
					type_woonpand/name
					, 'mean(brondata/nvm/'+type_woonpand/name+'/uitleg ? brondata/nvm/'+type_woonpand/name+'/price : (0/0)[eur], brondata/nvm/'+type_woonpand/name+'/wijk_rel)'
					, RegioUnit_wijk
					, eur
				);
				
			container gem :=
				for_each_nedv(
					type_woonpand/name
					, 'mean(brondata/nvm/'+type_woonpand/name+'/uitleg ? brondata/nvm/'+type_woonpand/name+'/price : (0/0)[eur], brondata/nvm/'+type_woonpand/name+'/gem_rel)'
					, RegioUnit_gem
					, eur
				);
				
			container nvm :=
				for_each_nedv(
					type_woonpand/name
					, 'mean(brondata/nvm/'+type_woonpand/name+'/uitleg ? brondata/nvm/'+type_woonpand/name+'/price : (0/0)[eur], brondata/nvm/'+type_woonpand/name+'/nvm_rel)'
					, RegioUnit_nvm
					, eur
				);
			container provincie :=
				for_each_nedv(
					type_woonpand/name
					, 'mean(brondata/nvm/'+type_woonpand/name+'/uitleg ? brondata/nvm/'+type_woonpand/name+'/price : (0/0)[eur], brondata/nvm/'+type_woonpand/name+'/prov_rel)'
					, RegioUnit_prov
					, eur
				);
			container grid :=
				for_each_nedv(
					type_woonpand/name
					, 'max_elem(MakeDefined(buurt/'+type_woonpand/name+',0[eur])[brondata/regios/buurten/src_2012/grid], MakeDefined(wijk/'+type_woonpand/name+',0[eur])[brondata/regios/wijken/src_2012/grid], MakeDefined(gem/'+type_woonpand/name+',0[eur])[BronData/regios/gemeenten/gem_2012/gem_uq/grid], MakeDefined(nvm/'+type_woonpand/name+',0[eur])[BronData/regios/nvm/src/grid], MakeDefined(provincie/'+type_woonpand/name+',0[eur])[brondata/regios/provincies/src_2012/grid])'
					, NL_grid/domain
					, eur	
				), FreeData = "False";
			
			container grid_een_meergezins
			{
				attribute<eur> eengezins (NL_grid/domain) := brondata/regios/nederland/src/IsNederland_8[float32] * ((grid/rijtjeswoning + grid/twee_onder_1_kap + grid/vrijstaand) / 3[eur]);
				attribute<eur> meergezins (NL_grid/domain) := brondata/regios/nederland/src/IsNederland_8[float32] *  grid/appartement;
			}	
		}
			
		container rev_per_ha_eengezins :=
			for_each_nedv(
				ontwikkelopties/name
				, 'MakeDefined(avg_rev_nieuwbouw/grid_een_meergezins/eengezins * '+string(ontwikkelopties/dichtheid)+'[nrwonha] * '+string(ontwikkelopties/fr_eengezins)+'[procent],0[eur_ha])'
				, NL_grid/domain
				, eur_ha
			);
			
		container rev_per_ha_meergezins :=
			for_each_nedv(
				ontwikkelopties/name
				, 'MakeDefined(avg_rev_nieuwbouw/grid_een_meergezins/meergezins * '+string(ontwikkelopties/dichtheid)+'[nrwonha] * (1[procent] - '+string(ontwikkelopties/fr_eengezins)+'[procent]),0[eur_ha])'
				, NL_grid/domain
				, eur_ha
			);
			
		container rev_per_ha_totaal :=
			for_each_nedv(
				ontwikkelopties/name
				, 'rev_per_ha_eengezins/'+ontwikkelopties/name+' + rev_per_ha_meergezins/'+ontwikkelopties/name
				, NL_grid/domain
				, eur_ha
			);
	}
	
	attribute<eur_ha> dominant (NL_grid/domain)	:=  = 'max_elem('+AsItemList('rev/rev_per_ha_totaal/'+ontwikkelopties/name)+')';
	
	attribute<ontwikkelopties> dominant_ontwikkelingsoptie 	(NL_grid/domain)	:= 
		switch(
			case(dominant != 0[eur_ha] && dominant == rev/rev_per_ha_totaal/p0_30, 0[uint8])
			,case(dominant != 0[eur_ha] && dominant == rev/rev_per_ha_totaal/p30_50, 1[uint8])
			,case(dominant != 0[eur_ha] && dominant == rev/rev_per_ha_totaal/p50_70, 2[uint8])
			,case(dominant != 0[eur_ha] && dominant == rev/rev_per_ha_totaal/p70_90, 3[uint8])
			,case(dominant != 0[eur_ha] && dominant == rev/rev_per_ha_totaal/p90_100, 4[uint8])
			, (0/0)[uint8]
		);
	
	// attribute<ontwikkelopties> dominant_ontwikkelingsoptie_NL (NL_grid/domain) := dominant_ontwikkelingsoptie * /Brondata/regios/nederland/src/IsNederland_8[uint8];

}
