container Redev_obv_hele_bag :  using = "eenheden;typeringen;typeringen/bag;typeringen/redev;typeringen/tijd;geometries"
{
	unit<uint32>      Perceel             := /Brondata/BRK/Perceel_minus_Roads_CombinedFromCOROP;
	unit<uint32>      RegioUnit_Gem_oud   := /Brondata/RegioIndelingen/Gemeente_oud;
	
	#include<PrepBAG.dms>
	
	container PrepDomains := 
		for_each_ne(
			AdditionalClassifications/MutatieTypen/name
			, 'PrepDomains_T('+quote(AdditionalClassifications/MutatieTypen/name)+')'
		)
	{
		container Onveranderd
		{
			unit<uint32> domain := PrepBAG/BAG_Tabel/Onveranderd_Woon/uq;
		}
	}
		
	#include<AdditionalOperations.dms>
	
	container FinalDomains
	{
		unit<uint32> SN_Sites                       := AdditionalOperations/SN/Result;
		unit<uint32> SN_Sloop_Objecten              := AdditionalOperations/SN/Result/Sloop_Objecten;
		unit<uint32> SN_Nieuwbouw_Objecten          := AdditionalOperations/SN/Result/Nieuwbouw_Objecten;
		
		unit<uint32> Toevoeging_Sites               := AdditionalOperations/Clustering/T/CleanUp; 
		unit<uint32> Toevoeging_Objecten            := AdditionalOperations/Clustering/T/CleanUp/Objecten; 
		
		unit<uint32> Transformatie_Sites            := AdditionalOperations/Clustering/TMplus/CleanUp;
		unit<uint32> Transformatie_Objecten         := AdditionalOperations/Clustering/TMplus/CleanUp/Objecten;
		
		unit<uint32> Onttrekking_Sites              := AdditionalOperations/Clustering/O/CleanUp;
		unit<uint32> Onttrekking_Objecten           := AdditionalOperations/Clustering/O/CleanUp/Objecten;
		
		unit<uint32> Sloop_Sites                    := AdditionalOperations/Clustering/S/CleanUp;
		unit<uint32> Sloop_Objecten                 := AdditionalOperations/Clustering/S/CleanUp/Objecten;
		
		unit<uint32> Onveranderd_Sites              := AdditionalOperations/Clustering/Onveranderd/CleanUp;
		unit<uint32> Onveranderd_Objecten           := AdditionalOperations/Clustering/Onveranderd/CleanUp/Objecten;
		
		unit<uint32> Nieuwbouw_OpOnbebouwd_Sites    := AdditionalOperations/Nieuwbouw_Panden_OpOnbebouwd/result;
		unit<uint32> Nieuwbouw_OpOnbebouwd_Objecten := AdditionalOperations/Nieuwbouw_Panden_OpOnbebouwd/result/Objecten;
		
		unit<uint32> Nieuwbouw_OpBebouwd_Sites      := AdditionalOperations/Nieuwbouw_Panden_OpBebouwd/result;
		unit<uint32> Nieuwbouw_OpBebouwd_Objecten   := AdditionalOperations/Nieuwbouw_Panden_OpBebouwd/result/Objecten;
	}
	
	unit<uint32> PerObject_Export := ='union_unit('+AsItemList('FinalDomains/'+AdditionalClassifications/Redev_ObjectTypes/name+'_Objecten')+')'
	, StorageName = "%LocalDataProjDir%/Temp/PerObject_Export.fss"
	, using = "AdditionalClassifications"
	{
		attribute<rdc>              geometry                        := ='union_data(., '+AsItemList('FinalDomains/'+Redev_ObjectTypes/name+'_Objecten/vbo_geometry')+')';
		attribute<string>           site_id                         := ='union_data(., '+AsItemList('FinalDomains/'+Redev_ObjectTypes/name+'_Objecten/site_id')+')';
		attribute<Redev_ObjectTypes>type_class                      := ='rlookup(union_data(., '+AsList('const('+quote(Redev_ObjectTypes/name)+',FinalDomains/'+Redev_ObjectTypes/name+'_Objecten)',',')+'), Redev_ObjectTypes/name)';
		attribute<upoint>           fdom_id                         := ='union_data(., '+AsList('point(const('+string(id(Redev_ObjectTypes))+',FinalDomains/'+Redev_ObjectTypes/name+'_Objecten), id(FinalDomains/'+Redev_ObjectTypes/name+'_Objecten))',',')+')';
		attribute<int32>            MutatieMaand                    := ='union_data(., '+AsItemList('FinalDomains/'+Redev_ObjectTypes/name+'_Objecten/MutatieMaand')+')';
		attribute<int32>            vbo_oppervlakte                 := ='union_data(., '+AsItemList('FinalDomains/'+Redev_ObjectTypes/name+'_Objecten/vbo_oppervlakte')+')';
		attribute<jaar>             pand_bouwjaar                   := ='union_data(., '+AsItemList('FinalDomains/'+Redev_ObjectTypes/name+'_Objecten/pand_bouwjaar')+')';
		attribute<UrbanisationK>    UrbanisationK_rel               := Analyse/DetermineUrbanisationK/Urbanisation[point_in_polygon(geometry, RegioUnit_gem_oud/geometry)];
	}
	
	unit<uint32> PerSite_Export := ='union_unit('+AsItemList('FinalDomains/'+AdditionalClassifications/Redev_SiteTypes/name+'_Sites')+')'
	, StorageName = "%LocalDataProjDir%/Temp/PerSite_Export.fss"
	, using = "AdditionalClassifications"
	{
		attribute<rdc>              geometry (poly)                 := ='union_data(., '+AsItemList('FinalDomains/'+Redev_SiteTypes/name+'_Sites/geometry')+')';
		attribute<string>           site_id                         := ='union_data(., '+AsItemList('FinalDomains/'+Redev_SiteTypes/name+'_Sites/site_id')+')';
		attribute<Redev_SiteTypes>  type_class                      := ='rlookup(union_data(., '+AsList('const('+quote(Redev_SiteTypes/name)+',FinalDomains/'+Redev_SiteTypes/name+'_Sites)',',')+'), Redev_SiteTypes/name)';
		attribute<upoint>           fdom_id                         := ='union_data(., '+AsList('point(const('+string(id(Redev_SiteTypes))+',FinalDomains/'+Redev_SiteTypes/name+'_Sites), id(FinalDomains/'+Redev_SiteTypes/name+'_Sites))',',')+')';
		attribute<int32>            MutatieMaand                    := ='union_data(., '+AsItemList('FinalDomains/'+Redev_SiteTypes/name+'_Sites/MutatieMaand')+')';
		attribute<m2>               site_oppervlakte                := ='union_data(., '+AsItemList('FinalDomains/'+Redev_SiteTypes/name+'_Sites/area')+')';
		attribute<jaar>             avg_bouwjaar                    := ='union_data(., '+AsItemList('FinalDomains/'+Redev_SiteTypes/name+'_Sites/avg_bouwjaar')+')';
		attribute<jaar>             sd_bouwjaar                     := ='union_data(., '+AsItemList('FinalDomains/'+Redev_SiteTypes/name+'_Sites/sd_bouwjaar')+')';
	}

	unit<uint32> Read_PerObject_Export
	: StorageName = "= propvalue(PerObject_Export, 'StorageName')"
	, StorageReadOnly = "true"
	, using = "AdditionalClassifications"
	{
		attribute<rdc>              geometry;
		attribute<string>           site_id;
		attribute<Redev_ObjectTypes>type_class;
		attribute<upoint>           fdom_id;
		attribute<int32>            MutatieMaand;
		attribute<int32>            vbo_oppervlakte;
		attribute<int32>            vbo_oppervlakte_edit := vbo_oppervlakte > 9900i ? null_i : vbo_oppervlakte;
		attribute<jaar>             pand_bouwjaar;
		attribute<UrbanisationK>    UrbanisationK_rel;
		attribute<m2>               site_oppervlakte     := rjoin(site_id, Read_PerSite_Export/site_id, Read_PerSite_Export/site_oppervlakte);
		attribute<bool>             IsWithinUrbanContour := IsDefined(point_in_polygon(geometry, /Brondata/begenzing_bebouwd_gebied/Bevolkingskern_2011/shapes/geometry));
		
		attribute<NL_grid/domain>   per_grid := geometry[NL_grid/domain];
		
		unit<uint8> DensK : nrofrows = 6
		{
			attribute<string> name : ['B_dens','B_grey','B_green','N_dens','N_grey','N_green'];
			attribute<string> label := name;
		}
		
		// /Brondata/bestand_bodem_gebruik/BBG/Dominant/bbg2012_100m_3k
		container GridAnalysis :=
			for_each_ne(
				Redev_ObjectTypes/name
				, 'GridAnalysis_T('+quote(Redev_ObjectTypes/name)+')'
			)
		{
			container Transform :=
				for_each_nedv(
					Redev_ObjectTypes/name
					, replace('union_data(DensK, '+AsList('GridAnalysis/@OT@/Total/'+DensK/name,',')+')','@OT@', Redev_ObjectTypes/name)
					, DensK
					, uint32
				);
		}
		
		Template GridAnalysis_T
		{
			parameter<string> RedevType;
			///
			container PerGrid
			{
				attribute<uint32>  totaal   (NL_grid/domain)  := ='sum(type_class == Redev_ObjectTypes/V/'+RedevType+' ? 1 : 0, per_grid)';
				attribute<uint32>  B_dens   (NL_grid/domain)  := Brondata/zones/gg_zones_bbg2000_begr2000/gg_3K_in_bbg/dens[uint32] * totaal;
				attribute<uint32>  B_grey   (NL_grid/domain)  := Brondata/zones/gg_zones_bbg2000_begr2000/gg_3K_in_bbg/grey[uint32] * totaal;
				attribute<uint32>  B_green  (NL_grid/domain)  := Brondata/zones/gg_zones_bbg2000_begr2000/gg_3K_in_bbg/green[uint32] * totaal;
				attribute<uint32>  N_dens   (NL_grid/domain)  := Brondata/zones/gg_zones_bbg2000_begr2000/gg_3K_buiten_bbg/dens[uint32] * totaal;
				attribute<uint32>  N_grey   (NL_grid/domain)  := Brondata/zones/gg_zones_bbg2000_begr2000/gg_3K_buiten_bbg/grey[uint32] * totaal;
				attribute<uint32>  N_green  (NL_grid/domain)  := Brondata/zones/gg_zones_bbg2000_begr2000/gg_3K_buiten_bbg/green[uint32] * totaal;
			}
			
			container Total
			{
				parameter<uint32>  totaal     := sum(PerGrid/totaal);
				parameter<uint32>  B_dens     := sum(PerGrid/B_dens);
				parameter<uint32>  B_grey     := sum(PerGrid/B_grey);
				parameter<uint32>  B_green    := sum(PerGrid/B_green);
				parameter<uint32>  N_dens     := sum(PerGrid/N_dens);
				parameter<uint32>  N_grey     := sum(PerGrid/N_grey);
				parameter<uint32>  N_green    := sum(PerGrid/N_green);
			}
		}
		
		container Per_VerslagMaand := 
			for_each_ne(
				Verslagmaanden/label
				, 'Per_VerslagMaand_T('+quote(Verslagmaanden/name)+'[int32])'
			);

		container Count_PerRedevType_PerVerslagMaand :=
			for_each_nedv(
				Redev_ObjectTypes/name
				, replace('union_data(Verslagmaanden, '+AsList('Per_VerslagMaand/'+Verslagmaanden/label+'/Totalen_PerRedevType/@OT@', ',')+')', '@OT@', Redev_ObjectTypes/name)
				, Verslagmaanden
				, int32
			)
		{
			attribute<string> Label (Verslagmaanden) := Verslagmaanden/label;
		}
		
		container Count_Urban_PerRedevType_PerVerslagMaand :=
			for_each_nedv(
				Redev_ObjectTypes/name
				, replace('union_data(Verslagmaanden, '+AsList('Per_VerslagMaand/'+Verslagmaanden/label+'/Count_Urban_PerRedevType/@OT@', ',')+')', '@OT@', Redev_ObjectTypes/name)
				, Verslagmaanden
				, int32
			);
		container Count_PeriUrban_PerRedevType_PerVerslagMaand :=
			for_each_nedv(
				Redev_ObjectTypes/name
				, replace('union_data(Verslagmaanden, '+AsList('Per_VerslagMaand/'+Verslagmaanden/label+'/Count_PeriUrban_PerRedevType/@OT@', ',')+')', '@OT@', Redev_ObjectTypes/name)
				, Verslagmaanden
				, int32
			);
		container Count_Peripheral_PerRedevType_PerVerslagMaand :=
			for_each_nedv(
				Redev_ObjectTypes/name
				, replace('union_data(Verslagmaanden, '+AsList('Per_VerslagMaand/'+Verslagmaanden/label+'/Count_Peripheral_PerRedevType/@OT@', ',')+')', '@OT@', Redev_ObjectTypes/name)
				, Verslagmaanden
				, int32
			);
		
		container AvgObjectSize_PerRedevType_PerVerslagMaand :=
			for_each_nedv(
				Redev_ObjectTypes/name
				, replace('union_data(Verslagmaanden, '+AsList('Per_VerslagMaand/'+Verslagmaanden/label+'/AvgObjectSize_PerRedevType/@OT@', ',')+')', '@OT@', Redev_ObjectTypes/name)
				, Verslagmaanden
				, int32
			);
		
		container AvgObjectSize_PerRedevType :=
			for_each_nedv(
				Redev_ObjectTypes/name
				, 'mean(type_class == Redev_ObjectTypes/v/'+Redev_ObjectTypes/name+' ? vbo_oppervlakte_edit : null_i)'
				, void
				, int32
			);
		container AvgSiteSize_PerRedevType :=
			for_each_nedv(
				Redev_ObjectTypes/name
				, 'mean(type_class == Redev_ObjectTypes/v/'+Redev_ObjectTypes/name+' ? site_oppervlakte : null_f)'
				, void
				, m2
			);
			
		container Count_PerUrbanK_PerRedevType :=
			for_each_nedv(
				Redev_ObjectTypes/name
				, replace('union_data(UrbanisationK, '+AsList('sum(type_class == Redev_ObjectTypes/v/@OT@ && UrbanisationK_rel == UrbanisationK/v/'+UrbanisationK/label+'? 1 : 0)', ',')+')', '@OT@', Redev_ObjectTypes/name)
				, UrbanisationK
				, uint32
			)
		{
			attribute<string> Label (UrbanisationK) := UrbanisationK/label;
		}
			
		container Count_BegrBebGeb_PerRedevType :=
			for_each_nedv(
				Redev_ObjectTypes/name
				, 'sum(type_class == Redev_ObjectTypes/v/'+Redev_ObjectTypes/name+' ? IsWithinUrbanContour[uint32] : 0)'
				, void
				, uint32
			);
			
		Template Per_VerslagMaand_T
		{
			parameter<int32> VerslagMaand;
			///
			container Totalen_PerRedevType := 
				for_each_nedv(
					Redev_ObjectTypes/name
					, 'sum((MutatieMaand * 100i + 1i) == '+string(VerslagMaand)+'[int32] && type_class == Redev_ObjectTypes/v/'+Redev_ObjectTypes/name+' ? 1i : 0i)'
					, void
					, int32
				);
			container Count_Urban_PerRedevType := 
				for_each_nedv(
					Redev_ObjectTypes/name
					, 'sum((MutatieMaand * 100i + 1i) == '+string(VerslagMaand)+'[int32] && type_class == Redev_ObjectTypes/v/'+Redev_ObjectTypes/name+' && UrbanisationK_rel == UrbanisationK/v/urban ? 1i : 0i)'
					, void
					, int32
				);
			container Count_PeriUrban_PerRedevType := 
				for_each_nedv(
					Redev_ObjectTypes/name
					, 'sum((MutatieMaand * 100i + 1i) == '+string(VerslagMaand)+'[int32] && type_class == Redev_ObjectTypes/v/'+Redev_ObjectTypes/name+' && UrbanisationK_rel == UrbanisationK/v/PeriUrban ? 1i : 0i)'
					, void
					, int32
				);
			container Count_Peripheral_PerRedevType := 
				for_each_nedv(
					Redev_ObjectTypes/name
					, 'sum((MutatieMaand * 100i + 1i) == '+string(VerslagMaand)+'[int32] && type_class == Redev_ObjectTypes/v/'+Redev_ObjectTypes/name+' && UrbanisationK_rel == UrbanisationK/v/Peripheral ? 1i : 0i)'
					, void
					, int32
				);
			container AvgObjectSize_PerRedevType := 
				for_each_nedv(
					Redev_ObjectTypes/name
					, 'mean((MutatieMaand * 100i + 1i) == '+string(VerslagMaand)+'[int32] && type_class == Redev_ObjectTypes/v/'+Redev_ObjectTypes/name+' ? vbo_oppervlakte_edit : null_i)'
					, void
					, int32
				);
		}
	}
	
	unit<uint32> AMS 
	: StorageName = "%LocalDataProjDir%/Temp/Amsterdam.shp"
	, StorageType = "gdal.vect"
	, DialogData = "rdc";
	
	unit<uint32> PerSite_Amsterdam := select_with_attr_by_cond(Read_PerSite_Export, IsDefined(Read_PerSite_Export/Amsterdam_rel))
	{
	
	}
	
	unit<uint32> Read_PerSite_Export
	// : StorageName = "= propvalue(PerSite_Export, 'StorageName')"
	: StorageName = "%LocalDataProjDir%/Temp/PerSite_Export.fss"
	, StorageReadOnly = "true"
	, using = "AdditionalClassifications"
	{
		attribute<rdc>              geometry (poly);
		attribute<string>           site_id;
		attribute<Redev_SiteTypes>  type_class;
		attribute<upoint>           fdom_id;
		attribute<int32>            MutatieMaand;
		attribute<m2>               site_oppervlakte;
		attribute<jaar>             avg_bouwjaar;
		attribute<jaar>             sd_bouwjaar;
		
		attribute<AMS>              Amsterdam_rel := point_in_polygon(centroid_or_mid(geometry), AMS/geometry);
		
		unit<uint32> test := select_with_attr_by_cond(., type_class == Redev_SiteTypes/v/transformatie);
  		container Per_VerslagMaand := 
			for_each_ne(
				Verslagmaanden/label
				, 'Per_VerslagMaand_T('+quote(Verslagmaanden/name)+'[int32])'
			);
			
		container Count_PerRedevType_PerVerslagMaand :=
			for_each_nedv(
				Redev_SiteTypes/name
				, replace('union_data(Verslagmaanden, '+AsList('Per_VerslagMaand/'+Verslagmaanden/label+'/Totalen_PerRedevType/@OT@', ',')+')', '@OT@', Redev_SiteTypes/name)
				, Verslagmaanden
				, int32
			)
		{
			attribute<string> Label (Verslagmaanden) := Verslagmaanden/label;
		}
		
		container AvgSize_PerRedevType :=
			for_each_nedv(
				Redev_SiteTypes/name
				, 'mean(type_class == Redev_SiteTypes/v/'+Redev_SiteTypes/name+' ? site_oppervlakte : null_f)'
				, void
				, m2
			);
		
		container AvgBouwjaar_PerRedevType :=
			for_each_nedv(
				Redev_SiteTypes/name
				, 'mean(type_class == Redev_SiteTypes/v/'+Redev_SiteTypes/name+' ? avg_bouwjaar : null_s)'
				, void
				, jaar
			);
		
		container SDBouwjaar_PerRedevType :=
			for_each_nedv(
				Redev_SiteTypes/name
				, 'sd(type_class == Redev_SiteTypes/v/'+Redev_SiteTypes/name+' ? avg_bouwjaar : null_s)'
				, void
				, jaar
			);
		
		container Count_PerRedevType :=
			for_each_nedv(
				Redev_SiteTypes/name
				, 'sum(type_class == Redev_SiteTypes/v/'+Redev_SiteTypes/name+' ? 1 : 0)'
				, void
				, uint32
			);
		
		Template Per_VerslagMaand_T
		{
			parameter<int32> VerslagMaand;
			///
			container Totalen_PerRedevType := 
				for_each_nedv(
					Redev_SiteTypes/name
					, 'sum((MutatieMaand * 100i + 1i) == '+string(VerslagMaand)+'[int32] && type_class == Redev_SiteTypes/v/'+Redev_SiteTypes/name+' ? 1i : 0i)'
					, void
					, int32
				);
			container Avg_Size_PerRedevType := 
				for_each_nedv(
					Redev_SiteTypes/name
					, 'mean((MutatieMaand * 100i + 1i) == '+string(VerslagMaand)+'[int32] && type_class == Redev_SiteTypes/v/'+Redev_SiteTypes/name+' ? site_oppervlakte : null_f)'
					, void
					, m2
				);
		}
	}

	
	#include<AdditionalClassifications.dms>
	
	Template PrepDomains_T
	{
		parameter<string> name;
		// /
		unit<uint32> domain     := ='select_with_org_rel(PrepBAG/FinalMutationTable/MutatieTypen_rel == AdditionalClassifications/MutatieTypen/v/'+name+')'
		, DialogType = "map"
		, DialogData = "vbo_geometry"
		{
			attribute<rdc>         vbo_geometry                                := org_rel -> geometry;
			attribute<int32>       MutatieMaand                                := org_rel -> MutatieMaand;
			attribute<int32>       vbo_oppervlakte                             := org_rel -> vbo_oppervlakte;
			attribute<string>      label                                       := org_rel -> string(pand_bag_nr);
			attribute<rdc>         pand_geometry  (poly)                       := org_rel -> pand_geometry;
			attribute<jaar>        pand_bouwjaar                               := org_rel -> pand_bouwjaar;
			unit<uint32>           overlay_metPercelen                         := bg_overlay_polygon(perceel/geometry, pand_geometry) //intersect nieuwbouw_perceel_metSloop met gesloopte panden
			{
				attribute<m2> area_percelen := area(perceel/geometry[rdc], m2)[first_rel];
				attribute<m2> area_panden   := area(pand_geometry, m2)[second_rel];
				
				attribute<float32> share_pand_op_perceel := area_panden / area_percelen;
			}
		} 
	}
}


