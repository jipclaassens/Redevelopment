container NVM: using = "units;classifications/tijd"
{ 
	unit<uint32>    RegioUnit_buurt   := /SourceData/RegioIndelingen/buurt;
	unit<uint32>    RegioUnit_wijk    := /SourceData/RegioIndelingen/wijk;
	// unit<uint32>    RegioUnit_PC4     := /SourceData/RegioIndelingen/PC4_vlakken;
	unit<uint32>    RegioUnit_gem     := /SourceData/RegioIndelingen/gemeente;
	unit<uint32>    RegioUnit_nvm     := /SourceData/RegioIndelingen/nvm;
	unit<uint32>    RegioUnit_aggl    := /SourceData/RegioIndelingen/gemeente/UrbanCores;
	unit<uint32>    RegioUnit_corop   := /SourceData/RegioIndelingen/corop;
	unit<uint32>    RegioUnit_prov    := /SourceData/RegioIndelingen/provincie;
	unit<uint32>    RegioUnit_NL      := /SourceData/RegioIndelingen/nederland;

	unit<uint32> ReadCommPart_coeff 
	: StorageName     = "%Redev_DataDir%/NVM/results_particulier_comm_vastgoed_wide.csv"
	, StorageType     = "gdal.vect"
	, StorageReadOnly = "True"
	{
		
		unit<uint32> CoropDomain := RegioUnit_corop
		{
			attribute<uint32>  csv_corop_rel := rlookup(string(corop_code), ../corop);
			attribute<float32> pricegap      := Particulier/change12_19 - Commercieel/change12_19;
			
			
			container Particulier := 
				for_each_nedv(
					jaren00_19/name
					, 'exp(ReadCommPart_coeff/particulier'+string(jaren00_19/value)+'[float32])[csv_corop_rel]'
					, CoropDomain
					, float32
				)
			{
				attribute<string> name (CoropDomain) := CoropDomain/label;
				
				attribute<float32> change00_19 (CoropDomain) := Y2019 - Y2000;
				attribute<float32> change00_10 (CoropDomain) := Y2010 - Y2000;
				attribute<float32> change10_19 (CoropDomain) := Y2019 - Y2010;
				attribute<float32> change12_19 (CoropDomain) := Y2019 - Y2012;
			}
			container Commercieel := 
				for_each_nedv(
					jaren00_19/name
					, 'exp(ReadCommPart_coeff/commercieel'+string(jaren00_19/value)+'[float32])[csv_corop_rel]'
					, CoropDomain
					, float32
				)
			{
				attribute<string> name (CoropDomain) := CoropDomain/label;
				
				attribute<float32> change00_19 (CoropDomain) := Y2019 - Y2000;
				attribute<float32> change00_10 (CoropDomain) := Y2010 - Y2000;
				attribute<float32> change10_19 (CoropDomain) := Y2019 - Y2010;
				attribute<float32> change12_19 (CoropDomain) := Y2019 - Y2012;
			}
		}
	}

	parameter<string> nvm_filedate   := '20220406';
	
	container TableChopper
	{
		parameter<string> filename       := '%Redev_DataDir%/NVM/NVM_cleaned_'+nvm_filedate+'.csv';
		unit<uint32>      domain         := range(uint32, 0, count_rows);
		parameter<string> fieldseparator := ';';
		
		parameter<string> filedata_src
		:  StorageType   = "str"
		,  StorageName = "=filename"
		,  StorageReadOnly = "true";
		parameter<string> filedata := replace(filedata_src, ',', '', '\''',''); 
		parameter<uint32> count_rows              := strcount(filedata, '\n') - 1; //   4136157  

		parameter<string> headerline              := readLines(filedata, void, 0);
		
		unit<uint32> field := Range(uint32, 0, strcount(headerline, fieldseparator) + 1)
		{
			attribute<string> name := ReadArray(headerline , field, string, 0);
		}
			
		attribute<string> bodylines (domain) := readLines(filedata, domain, headerline/ReadPos);

		container data := 
			for_each_nedv(
				field/name
				,'ReadElems(
					BodyLines
					,string
					,'+ MakeDefined(field/name[id(field)-1] + '/ReadPos','const(0, domain)')+' 
					,16
				)'
				,domain
				,string
			);
	}
	
	parameter<string> Generate_FSS     := 'Ready', ExplicitSuppliers = "MakeFSS";
		
	container MakeFSS := 
		for_each_nedv(
			TableChopper/Field/name
			, 'TableChopper/Data/' +TableChopper/Field/name
			, TableChopper/domain
			, string
		), StorageName = "='%LocalDataDir%/NVM/nvm_'+nvm_filedate+'.fss'";
	
	
	container ReadFSS := 
		for_each_ndv(
			TableChopper/Field/name
			, TableChopper/domain
			, string
		)
	, StorageName     = "='%LocalDataDir%/NVM/nvm_'+nvm_filedate+'.fss'"
	, StorageReadOnly = "True"
	{
		unit<uint32> domain := TableChopper/domain;

		attribute<int32>         obsid (domain);
		attribute<string>        xcoord (domain);
		attribute<string>        ycoord (domain);
		
		attribute<string>        street_edit  (domain) := replace(street, ';', '', ';;', '', '+' , '', '&#x', '');
		attribute<string>        nmbr_edit    (domain) := replace(nmbr, ';', '', ';;', '', '+' , '', '&#x', '');
		attribute<string>        nmbradd_edit (domain) := replace(nmbradd, ';', '', ';;', '', '+' , '', '&#x', '');
		
		attribute<uint32>        obsid_value          (domain) := obsid[uint32];
		attribute<float32>       xco                  (domain) := xcoord[float32];
		attribute<float32>       yco                  (domain) := ycoord[float32];
		attribute<geography/rdc> geometry_rd         (domain) := point(xco, yco, geography/rdc), FreeData = "False";
		attribute<uint2>         d_apartment_value    (domain) := d_apartment[uint2];
		attribute<uint2>         d_terraced_value     (domain) := d_terraced[uint2];
		attribute<uint2>         d_semidetached_value (domain) := d_semidetached[uint2];
		attribute<uint2>         d_detached_value     (domain) := d_detached[uint2];
		attribute<eur>           price_value          (domain) := price[eur];
		attribute<eur>           pricelist_value      (domain) := pricelist[eur];
		attribute<m2>            size_value           (domain) := size[m2];
		attribute<eur_m2>        price_m2             (domain) := price_value / size_value;
		attribute<m2>            lotsize_value        (domain) := lotsize[m2];
		attribute<jaar>          trans_year_value     (domain) := value(trans_year, int16)[jaar];
		attribute<maand>         trans_month_value    (domain) := value(trans_month, int16)[maand];
		attribute<jaar>          bouwjaar_value       (domain) := bouwjaar[jaar];
		attribute<uint32>        nrooms_value         (domain) := nrooms[uint32];
		attribute<uint32>        nbathrooms_value          (domain) := nbathrooms[uint32];
		attribute<uint32>        nroofterraces_value     (domain) := nroofterraces[uint32];
		attribute<uint32>        nbalcony_value        (domain) := nbalcony[uint32];
		attribute<uint2>         d_maintgood_value    (domain) := d_maintgood[uint2];
		attribute<uint2>         d_CV_value           (domain) := d_centralheating[uint2];
		attribute<uint2>         d_privpark_value     (domain) := d_privpark[uint2];
		attribute<uint2>         d_kk_value           (domain) := d_kk[uint2];
		attribute<uint2>         d_erfpacht_value     (domain) := d_erfpacht[uint2];
		attribute<uint2>         d_isol_compl_value   (domain) := d_isol_compl[uint2];
		
		attribute<int32>         daysonmarket_value   (domain) := daysonmarket[int32];
		attribute<uint2>         d_garden_value       (domain) := d_garden[uint2];
		attribute<uint2>         d_listed_value       (domain) := d_listed[uint2];
		// attribute<uint2>         d_highrise_value     (domain) := d_highrise[uint2]; 
		// attribute<float32>         pand_hoogte_value     (domain) := pand_hoogte[float32]; 
		
		attribute<uint2>         d_garage_value       (domain) := d_garage[uint2];
		attribute<uint2>         d_parkingplace_value (domain) := d_parkingplace[uint2];
		attribute<uint2>         d_carport_value      (domain) := d_carport[uint2];
		attribute<uint2>         d_garagecarport_value(domain) := d_garagecarport[uint2];
		attribute<uint2>         d_doublegarage_value (domain) := d_doublegarage[uint2];
		
		attribute<uint2>         d_app_downst_value   (domain) := d_app_downst[uint2];
		attribute<uint2>         d_app_upst_value     (domain) := d_app_upst[uint2];
		attribute<uint2>         d_app_maison_value   (domain) := d_app_maison[uint2];
		attribute<uint2>         d_app_porch_value    (domain) := d_app_porch[uint2];
		attribute<uint2>         d_app_galler_value   (domain) := d_app_galler[uint2];
		attribute<uint2>         d_app_service_value  (domain) := d_app_service[uint2];
		attribute<uint2>         d_app_downup_value   (domain) := d_app_downup[uint2];
		
		attribute<RegioUnit_gem>   gem_rel    (domain) := point_in_polygon(geometry_rd, RegioUnit_gem/geometry);
		attribute<RegioUnit_buurt> buurt_rel  (domain) := point_in_polygon(geometry_rd, RegioUnit_buurt/geometry);
		attribute<RegioUnit_wijk>  wijk_rel   (domain) := point_in_polygon(geometry_rd, RegioUnit_wijk/geometry);
		attribute<RegioUnit_NL>    nl_rel     (domain) := point_in_polygon(geometry_rd, RegioUnit_NL/geometry);
	} 

	unit<uint32> points := Subset(IsDefined(ReadFSS/nl_rel)) //ReadFSS/gem_rel == 136) // && Points_src_ReadFSS/buurt_rel == 4255)
	// unit<uint32> points := Subset(ReadFSS/gem_rel == 192) //ReadFSS/gem_rel == 192) // && Points_src_ReadFSS/buurt_rel == 4255)
	// ,	StorageName     = "%Redev_DataDir%/NVM/NVM_cleaned_200507.fss"
	, 	DialogType = "Map"
	, 	DialogData = "geometry"
	, 	FreeData = "False"
	{
		attribute<geography/rdc>   geometry         := ReadFSS/geometry_rd[nr_OrgEntity];
		attribute<float32>          x                := pointcol(geometry);
		attribute<float32>          y                := pointrow(geometry);
		attribute<uint32>           obsid            := ReadFSS/obsid_value[nr_OrgEntity];
		
		attribute<string>           street_nmbr      := ReadFSS/street_edit[nr_OrgEntity] + '_' + ReadFSS/nmbr_edit[nr_OrgEntity]+ '_' + ReadFSS/nmbradd_edit[nr_OrgEntity];
		
		// attribute<string>           nmbr             := replace(ReadFSS/nmbr[nr_OrgEntity], ';', '');
		// attribute<string>           nmbradd          := replace(ReadFSS/nmbradd[nr_OrgEntity], ';', '');
		
		attribute<uint32>           pand_2021_rel    := point_in_polygon(geometry, SourceData/BAG/Snapshots/Panden/Y202101/pand/pand_met_vbo/Geometry);
		attribute<string>           pand_2021_id     := rjoin(pand_2021_rel, id(SourceData/BAG/Snapshots/Panden/Y202101/pand/pand_met_vbo), SourceData/BAG/Snapshots/Panden/Y202101/pand/pand_met_vbo/identificatie);
		attribute<uint16>           pand_hoogte_2021 := rjoin(pand_2021_id, SourceData/BAG/Snapshots/Panden/woonvbo_en_hoogte_2021/identificatie, SourceData/BAG/Snapshots/Panden/woonvbo_en_hoogte_2021/hoogte);
		
		attribute<uint2>            d_apartment      := ReadFSS/d_apartment_value[nr_OrgEntity];
		attribute<uint2>            d_terraced       := ReadFSS/d_terraced_value[nr_OrgEntity];
		attribute<uint2>            d_semidetached   := ReadFSS/d_semidetached_value[nr_OrgEntity];
		attribute<uint2>            d_detached       := ReadFSS/d_detached_value[nr_OrgEntity];
		
		attribute<eur>              price            := ReadFSS/price_value[nr_OrgEntity];
		attribute<eur>              pricelist        := ReadFSS/pricelist_value[nr_OrgEntity];
		
		// attribute<eur_m2>           price_m2         := price / size;
		
		// attribute<float32>          overboden_perc   := (price - pricelist) / pricelist;
		// attribute<float32>          overboden_perc_edit := overboden_perc < -1f 
															// ? 0f 
															// : overboden_perc > 1f 
																// ? 0f
																// : overboden_perc;
		
		// attribute<uint32>           jaar_rel := rlookup(trans_year[uint32], jaren00_19/value);
		// attribute<float32>          avg_overboden (jaren00_19) := mean(overboden_perc_edit, jaar_rel);
		// attribute<uint32>           count_overboden (jaren00_19) := count(overboden_perc_edit, jaar_rel);
		
		attribute<m2>               size             := ReadFSS/size_value[nr_OrgEntity];
		attribute<m2>               lotsize          := ReadFSS/lotsize_value[nr_OrgEntity];
		
		attribute<jaar>             trans_year       := ReadFSS/trans_year_value[nr_OrgEntity];
		attribute<jaar>             bouwjaar         := ReadFSS/bouwjaar_value[nr_OrgEntity];
		attribute<uint32>           nrooms           := ReadFSS/nrooms_value[nr_OrgEntity];
		// attribute<uint32>           nroofterraces    := ReadFSS/nroofterraces_value[nr_OrgEntity];
		// attribute<uint32>           nbalcony         := ReadFSS/nbalcony_value[nr_OrgEntity];
		attribute<uint32>           nbathrooms       := ReadFSS/nbathrooms_value[nr_OrgEntity];
		attribute<uint2>            d_maintgood      := ReadFSS/d_maintgood_value[nr_OrgEntity];
		attribute<uint2>            d_CV             := ReadFSS/d_CV_value[nr_OrgEntity];
		attribute<uint2>            d_privpark       := ReadFSS/d_privpark_value[nr_OrgEntity];
		attribute<uint2>            d_kk             := ReadFSS/d_kk_value[nr_OrgEntity];
		attribute<uint2>            d_erfpacht       := ReadFSS/d_erfpacht_value[nr_OrgEntity];
		attribute<uint2>            d_isol_compl     := ReadFSS/d_isol_compl_value[nr_OrgEntity];
		// attribute<float32>          pand_hoogte      := ReadFSS/pand_hoogte_value[nr_OrgEntity];
		
		attribute<NL_grid/domain>   NL_grid_domain_rel := geometry[NL_grid/domain];
		attribute<RegioUnit_PC4>    pc4_rel            := point_in_polygon(geometry, RegioUnit_PC4/Geometry);
		
		attribute<RegioUnit_Aggl>   aggl_rel           := point_in_polygon(geometry, RegioUnit_Aggl/Geometry);
		attribute<string>           Aggl_name          := RegioUnit_Aggl/Agglomeration[aggl_rel];
		
		attribute<RegioUnit_gem>    gem_rel     := point_in_polygon(geometry, RegioUnit_gem/geometry);
		attribute<RegioUnit_buurt>  buurt_rel   := point_in_polygon(geometry, RegioUnit_buurt/geometry);
		attribute<RegioUnit_wijk>   wijk_rel    := point_in_polygon(geometry, RegioUnit_wijk/geometry);
		// attribute<RegioUnit_NL>     nl_rel      := point_in_polygon(geometry, RegioUnit_NL/geometry);
		
		// attribute<float32>           UAI_2018                    := /Analyse/RedevelopmentOptionValue/RegionalAvgCharacteristics/Overige_vars/impl/UAI_5000m_dcsq[NL_grid_domain_rel];
		// attribute<float32>           UAI_2021                    := /Analyse/RedevelopmentOptionValue/RegionalAvgCharacteristics/Overige_vars/impl/UAI_2021 [NL_grid_domain_rel];
		attribute<float32>           Reistijd_stations_2006      := /Analyse/RedevelopmentOptionValue/RegionalAvgCharacteristics/Overige_vars/Reistijd_stations_edit[NL_grid_domain_rel];
		// attribute<float32>           Reistijd_stations_2019      := /Analyse/RedevelopmentOptionValue/RegionalAvgCharacteristics/Overige_vars/impl/DistTo_Trainstations_2019[NL_grid_domain_rel]; 
		
		// attribute<float32>           Reistijd_100k_inw_2017_NL      := /Analyse/RedevelopmentOptionValue/RegionalAvgCharacteristics/Overige_vars/Reistijd_100k_inw_2017_NL_edit[NL_grid_domain_rel];
		// attribute<float32>           Reistijd_100k_inw_2020_DE_BE      := /Analyse/RedevelopmentOptionValue/RegionalAvgCharacteristics/Overige_vars/Reistijd_100k_inw_2020_DE_BE_edit[NL_grid_domain_rel];
		// attribute<float32>           Reistijd_500k_inw_2020_NL      := /Analyse/RedevelopmentOptionValue/RegionalAvgCharacteristics/Overige_vars/Reistijd_500k_inw_2020_NL_edit[NL_grid_domain_rel];
		// attribute<float32>           Reistijd_500k_inw_2020_DE_BE      := /Analyse/RedevelopmentOptionValue/RegionalAvgCharacteristics/Overige_vars/Reistijd_500k_inw_2020_DE_BE_edit[NL_grid_domain_rel];
		// attribute<float32>           Reistijd_1000k_inw_2020_DE_BE      := /Analyse/RedevelopmentOptionValue/RegionalAvgCharacteristics/Overige_vars/Reistijd_1000k_inw_2020_DE_BE_edit[NL_grid_domain_rel];
		
		attribute<float32>           GroenNabij_2015             := /Analyse/RedevelopmentOptionValue/RegionalAvgCharacteristics/Overige_vars/bbg2015_groen_100mbuff_100m[NL_grid_domain_rel];
		
		// attribute<float32>           Reistijd_100k_inw_2017_NL_edit      := /Analyse/RedevelopmentOptionValue/RegionalAvgCharacteristics/Overige_vars/Reistijd_100k_inw_2017_NL_edit[NL_grid_domain_rel];
		// attribute<float32>           Reistijd_100k_inw_2020_DE_BE_edit   := /Analyse/RedevelopmentOptionValue/RegionalAvgCharacteristics/Overige_vars/Reistijd_100k_inw_2020_DE_BE_edit[NL_grid_domain_rel];
		// attribute<float32>           Reistijd_500k_inw_2020_DE_BE_edit   := /Analyse/RedevelopmentOptionValue/RegionalAvgCharacteristics/Overige_vars/Reistijd_500k_inw_2020_DE_BE_edit[NL_grid_domain_rel];
		attribute<float32>           Reistijd_500k_inw_2020_NL_edit      := /Analyse/RedevelopmentOptionValue/RegionalAvgCharacteristics/Overige_vars/Reistijd_500k_inw_2020_NL_edit[NL_grid_domain_rel];
		// attribute<float32>           Reistijd_1000k_inw_2020_DE_BE_edit  := /Analyse/RedevelopmentOptionValue/RegionalAvgCharacteristics/Overige_vars/Reistijd_1000k_inw_2020_DE_BE_edit[NL_grid_domain_rel];

		// attribute<float32>           Distance_100k_jobs_jaar_onbekend     := SourceData/Spatial_data/Dani/Dist_100k_job_value[NL_grid_domain_rel];
		attribute<float32>           UAI_2021                    := Analyse/UrbanAttractivityIndex/UAI_smoothed_norm[NL_grid_domain_rel];
	
		// parameter<string>            Pand_path := 'SourceData/BAG/Snapshots/Panden/Y20@YY@01/pand/Voorraad';
		
		// attribute<uint32>            Aantal_app_in_gebouw_2012   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+'/count_vbo_pand : 0)[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '12');
		// attribute<uint32>            Aantal_app_in_gebouw_2013   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+'/count_vbo_pand : 0)[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '13');
		// attribute<uint32>            Aantal_app_in_gebouw_2014   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+'/count_vbo_pand : 0)[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '14');
		// attribute<uint32>            Aantal_app_in_gebouw_2015   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+'/count_vbo_pand : 0)[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '15');
		// attribute<uint32>            Aantal_app_in_gebouw_2016   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+'/count_vbo_pand : 0)[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '16');
		// attribute<uint32>            Aantal_app_in_gebouw_2017   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+'/count_vbo_pand : 0)[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '17');
		// attribute<uint32>            Aantal_app_in_gebouw_2018   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+'/count_vbo_pand : 0)[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '18');
		// attribute<uint32>            Aantal_app_in_gebouw_2019   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+'/count_vbo_pand : 0)[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '19');
		// attribute<uint32>            Aantal_app_in_gebouw_2020   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+'/count_vbo_pand : 0)[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '20');
		// attribute<uint32>            Aantal_app_in_gebouw_2021   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+'/count_vbo_pand : 0)[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '21');
		// attribute<uint32>            Aantal_app_in_gebouw_2022   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+'/count_vbo_pand : 0)[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '22');
		
		
		// attribute<float32>           Pand_Footprint_2012   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+ '/footprint : (0f/0f))[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '12');
		// attribute<float32>           Pand_Footprint_2013   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+ '/footprint : (0f/0f))[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '13');
		// attribute<float32>           Pand_Footprint_2014   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+ '/footprint : (0f/0f))[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '14');
		// attribute<float32>           Pand_Footprint_2015   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+ '/footprint : (0f/0f))[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '15');
		// attribute<float32>           Pand_Footprint_2016   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+ '/footprint : (0f/0f))[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '16');
		// attribute<float32>           Pand_Footprint_2017   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+ '/footprint : (0f/0f))[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '17');
		// attribute<float32>           Pand_Footprint_2018   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+ '/footprint : (0f/0f))[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '18');
		// attribute<float32>           Pand_Footprint_2019   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+ '/footprint : (0f/0f))[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '19');
		// attribute<float32>           Pand_Footprint_2020   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+ '/footprint : (0f/0f))[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '20');
		// attribute<float32>           Pand_Footprint_2021   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+ '/footprint : (0f/0f))[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '21');
		// attribute<float32>           Pand_Footprint_2022   := =replace('('+Pand_path+'/woonpand_type == classifications/BAG/type_woonpand/V/Appartement ? '+Pand_path+ '/footprint : (0f/0f))[point_in_polygon(geometry, '+Pand_path+'/geometry)]', '@YY@', '22');
		
		// unit<uint32> jaar_sub := subset(trans_year == 1985[jaar])
		// {
			// attribute<geography/rdc>   geometry         := ../geometry[nr_OrgEntity];
			// attribute<eur>              price            := ../price[nr_OrgEntity];
			// attribute<eur_m2>           price_m2         := ../price_m2[nr_OrgEntity];
		// }
		
		// parameter<uint32> threshold := 5;
		
		// container count_per_gem_per_jaar :=
			// for_each_nedv(
				// jaren85_20/name
				// , 'sum(../trans_year == '+string(jaren85_20/value)+'[jaar] ?  1 : 0, ../gem_rel) > threshold'
				// , RegioUnit_gem
				// , bool
			// );
			
		// container pricem2_per_gem_per_jaar :=
			// for_each_nedv(
				// jaren85_20/name
				// , '	count_per_gem_per_jaar/'+string(jaren85_20/name)+'
						// ? mean(../trans_year == '+string(jaren85_20/value)+'[jaar] 
							// ?  ../price_m2 
							// : (0/0)[eur_m2], ../gem_rel)
						// : (0/0)[eur_m2]'
				// , RegioUnit_gem
				// , eur_m2
			// );
			 
		// container pricem2_per_gem_per_jaar_class :=
			// for_each_nedv(
				// jaren85_20/name
				// , 'classify(pricem2_per_gem_per_jaar/'+jaren85_20/name+', classifications/klassen/Eur_m2_class/Classes)'
				// , RegioUnit_gem
				// , classifications/klassen/Eur_m2_class
			// );
			

		
		// container Price_change_per_gem := 
			// for_each_nedv(
				// jaren85_20/last10years/name
				// , '(pricem2_per_gem_per_jaar/'+jaren85_20/last10years/name+' - pricem2_per_gem_per_jaar/'+jaren85_20/last10years/prev_name+') / pricem2_per_gem_per_jaar/'+jaren85_20/last10years/prev_name
				// , RegioUnit_gem
				// , float32
			// );
			
		// container price_per_wijk_per_jaar :=
			// for_each_nedv(
				// jaren85_20/name
				// , 'mean(../trans_year == '+string(jaren85_20/value)+'[jaar] ?  ../price : (0/0)[eur], ../wijk_rel)'
				// , RegioUnit_wijk
				// , eur
			// );
		
		// container Price_change_per_wijk := 
			// for_each_nedv(
				// jaren85_20/last10years/name
				// , '(price_per_wijk_per_jaar/'+jaren85_20/last10years/name+' - price_per_wijk_per_jaar/'+jaren85_20/last10years/prev_name+') / price_per_wijk_per_jaar/'+jaren85_20/last10years/prev_name
				// , RegioUnit_wijk
				// , float32
			// );
	}
	
	container Types := 
		for_each_ne(
			classifications/bag/type_woonpand_4/name
			, 'Types_T('+quote(classifications/bag/type_woonpand_4/name_english)+')'
	);
	
	Template Types_T
	{
		///
		parameter<string> type;
		///
		
		unit<uint32> subset := ='subset(points/d_' +string(type)+ '[uint2] == 1[uint2] && points/lotsize[m2] < 99999[m2])'
		,	DialogType = "Map"
		,	DialogData = "geometry"
		, 	FreeData = "False"
		{
			attribute<rdc>             geometry           := points/geometry[nr_OrgEntity];
			attribute<m2>              size               := points/size[nr_OrgEntity];
			attribute<m2>              lotsize            := points/lotsize[nr_OrgEntity];
			attribute<jaar>            trans_year         := points/trans_year[nr_OrgEntity];
			attribute<jaar>            bouwjaar           := points/bouwjaar[nr_OrgEntity];
			attribute<eur>             price              := points/price[nr_OrgEntity];
			attribute<uint2>           d_apartment        := points/d_apartment[nr_OrgEntity];
			attribute<uint2>           d_terraced         := points/d_terraced[nr_OrgEntity];
			attribute<uint2>           d_semidetached     := points/d_semidetached[nr_OrgEntity];
			attribute<uint2>           d_detached         := points/d_detached[nr_OrgEntity];
			attribute<uint32>          nrooms             := points/nrooms[nr_OrgEntity][uint32];
			attribute<uint32>          nbathrooms         := points/nbathrooms[nr_OrgEntity][uint32];
			attribute<uint32>          d_maintgood        := points/d_maintgood[nr_OrgEntity][uint32];
			attribute<uint16>          pand_hoogte        := points/pand_hoogte_2021[nr_OrgEntity];
			attribute<uint32>          d_highrise         := (pand_hoogte >= 1500w)[uint32];
			attribute<uint32>          d_centralheating   := points/d_CV[nr_OrgEntity][uint32];
			attribute<uint32>          d_privpark         := points/d_privpark[nr_OrgEntity][uint32];
			attribute<uint32>          d_kk               := points/d_kk[nr_OrgEntity][uint32];
			attribute<uint32>          d_erfpacht         := points/d_erfpacht[nr_OrgEntity][uint32];
			attribute<uint32>          d_isol_compl       := points/d_isol_compl[nr_OrgEntity][uint32];
			
			attribute<bool>            nl_rel             := RegioUnit_nl/IsNederland[geometry[NL_grid/domain]];
			attribute<RegioUnit_buurt> buurt_rel          := point_in_polygon(geometry, RegioUnit_buurt/geometry);
			attribute<RegioUnit_wijk>  wijk_rel           := point_in_polygon(geometry, RegioUnit_wijk/geometry);
			attribute<RegioUnit_gem>   gem_rel            := point_in_polygon(geometry, RegioUnit_gem/geometry);
			attribute<RegioUnit_nvm>   nvm_rel            := point_in_polygon(geometry, RegioUnit_nvm/geometry);
			attribute<RegioUnit_prov>  prov_rel           := point_in_polygon(geometry, RegioUnit_prov/geometry);
			attribute<string>          GM_CODE            := RegioUnit_gem/GM_CODE[gem_rel];
			attribute<NL_grid/domain>  NL_grid_domain_rel := geometry[NL_grid/domain];
			
			attribute<float32>         reistijd_station_2006_edit       := points/Reistijd_stations_2006[nr_OrgEntity];
			attribute<float32>         Reistijd_500k_inw_2020_NL_edit      := points/Reistijd_500k_inw_2020_NL_edit[nr_OrgEntity];
			attribute<float32>         UAI_2021                         := points/UAI_2021[nr_OrgEntity];
			attribute<float32>          GroenNabij_2015                  := points/GroenNabij_2015[nr_OrgEntity];
			
			// attribute<eur>             avg_price_ha (NL_grid/domain) := mean(price, NL_grid_domain_rel);
			// attribute<NL_grid/domain>  uitleg_id                     := rlookup(NL_grid_domain_rel, SourceData/CBS_vierkanten/BBG_2012_2000/id);
		}
	}
	
	unit<uint32> eengezins := subset(points/d_apartment[uint2] != 1[uint2] && points/lotsize[m2] < 99999[m2])
	,	DialogType = "Map"
	,	DialogData = "geometry"
	, 	FreeData = "False"
	{
		attribute<geography/rdc>  geometry          := points/geometry[nr_OrgEntity];
		attribute<m2>              size              := points/size[nr_OrgEntity];
		attribute<m2>              lotsize           := points/lotsize[nr_OrgEntity];
		attribute<jaar>            trans_year        := points/trans_year[nr_OrgEntity];
		attribute<jaar>            bouwjaar          := points/bouwjaar[nr_OrgEntity];
		attribute<eur>             price             := points/price[nr_OrgEntity];
		attribute<uint2>           d_apartment       := points/d_apartment[nr_OrgEntity];
		attribute<uint2>           d_terraced        := points/d_terraced[nr_OrgEntity];
		attribute<uint2>           d_semidetached    := points/d_semidetached[nr_OrgEntity];
		attribute<uint2>           d_detached        := points/d_detached[nr_OrgEntity];
		attribute<uint32>          nrooms            := points/nrooms[nr_OrgEntity];
		attribute<uint32>          nbadk             := points/nbadk[nr_OrgEntity];
		attribute<uint2>           d_maintgood       := points/d_maintgood[nr_OrgEntity];
		attribute<float32>         pand_hoogte       := points/pand_hoogte[nr_OrgEntity];
		attribute<uint2>          d_centralheating  := points/d_cv[nr_OrgEntity];
		attribute<uint2>          d_privpark        := points/d_privpark[nr_OrgEntity];
		attribute<uint2>          d_kk              := points/d_kk[nr_OrgEntity];
		attribute<uint2>          d_erfpacht        := points/d_erfpacht[nr_OrgEntity];
		attribute<uint2>          d_isol_compl      := points/d_isol_compl[nr_OrgEntity];
		
		
		attribute<float32>         reistijd_station_2006_edit       := points/Reistijd_stations_2006[nr_OrgEntity];
		attribute<float32>         Reistijd_100k_inwoners_edit      := points/Reistijd_100k_inwoners_2017[nr_OrgEntity];
		attribute<float32>         UAI_2018                         := points/UAI_5000m_dcsq[nr_OrgEntity];

		attribute<bool>            nl_rel             := RegioUnit_nl/IsNederland[geometry[NL_grid/domain]];
		attribute<RegioUnit_buurt> buurt_rel          := point_in_polygon(geometry, RegioUnit_buurt/geometry);
		attribute<RegioUnit_wijk>  wijk_rel           := point_in_polygon(geometry, RegioUnit_wijk/geometry);
		attribute<RegioUnit_gem>   gem_rel            := point_in_polygon(geometry, RegioUnit_gem/geometry);
		attribute<RegioUnit_nvm>   nvm_rel            := point_in_polygon(geometry, RegioUnit_nvm/geometry);
		attribute<RegioUnit_prov>  prov_rel           := point_in_polygon(geometry, RegioUnit_prov/geometry);
		attribute<string>          GM_CODE            := RegioUnit_gem/GM_CODE[gem_rel];
		
		attribute<NL_grid/domain>                       NL_grid_domain_rel            := geometry[NL_grid/domain];
		
		// attribute<eur>                                  avg_price_ha (NL_grid/domain) := mean(price, NL_grid_domain_rel);
		// attribute<NL_grid/domain>                       uitleg_id                     := rlookup(NL_grid_domain_rel, SourceData/CBS_vierkanten/BBG_2012_2000/id);
		// attribute<bool>                                 uitleg                        := rjoin(uitleg_id, SourceData/CBS_vierkanten/BBG_2012_2000/id, SourceData/CBS_vierkanten/BBG_2012_2000/uitleg_bool);
		
		// attribute<uint32>                  GroenNabij_1996 := points/GroenNabij_1996[nr_OrgEntity];
		// attribute<uint32>                  GroenNabij_2000 := points/GroenNabij_2000[nr_OrgEntity];
		// attribute<uint32>                  GroenNabij_2003 := points/GroenNabij_2003[nr_OrgEntity];
		// attribute<uint32>                  GroenNabij_2006 := points/GroenNabij_2006[nr_OrgEntity];
		// attribute<uint32>                  GroenNabij_2008 := points/GroenNabij_2008[nr_OrgEntity];
		// attribute<uint32>                  GroenNabij_2010 := points/GroenNabij_2010[nr_OrgEntity];
		// attribute<uint32>                  GroenNabij_2012 := points/GroenNabij_2012[nr_OrgEntity];
		attribute<float32>                  GroenNabij_2015 := points/GroenNabij_2015[nr_OrgEntity];
		
	}
	
	unit<uint32> Avg_prijsm2_perCOROP_in2012
	: StorageName     = "%Redev_DataDir%/NVM/Avg_pm2_perCOROP_in2012.csv"
	, StorageType     = "gdal.vect"
	, StorageReadOnly = "True";
	
	attribute<uint32> Avg_prijsm2_uitWOZ_in2017 (NL_grid/domain)
	: StorageName     = "%Redev_DataDir%/SpatialData/WOZ_pm2_Woongebied_2017.tif"
	, Descr           = "Uit RSL_2020 cfg: /SourceData/Vastgoed/woz/Y2017/per_WOZBb/Woongebied"
	, StorageType     = "gdal.grid"
	, StorageReadOnly = "True";
	

	
	container PC4_coefficients
	{
		container MakeFSS
		{
			unit<uint32> src
			: StorageName     = "%Redev_DataDir%/NVM/PriceIndexPC4_export.csv"
			, StorageType     = "gdal.vect"
			, StorageReadOnly = "True";

			unit<uint32> name := SubItem_PropValues(src,'name');
			unit<uint32> fssdomain := src;

			container to_fss_domain : StorageName = "%LocalDataDir%/NVM/nvm_domain_pc4.fss"
			{
				unit<uint32> domain := fssdomain;
			}
			
			container to_fss := 
				for_each_nedv(
					name/name
					, 'src/' + name/name
					, to_fss_domain/domain
					, string
				), StorageName = "%LocalDataDir%/NVM/nvm_pc4.fss";
		}

		container ReadFSS_domain 
		: StorageName     = "%LocalDataDir%/NVM/nvm_domain_pc4.fss"
		, StorageReadOnly = "True"
		{
			unit<uint32> domain;
		}
		
		container ReadFSS := 
			for_each_ndv(
				MakeFSS/name/name
				, ReadFSS_domain/domain
				, string
			)
		, StorageName     = "%LocalDataDir%/NVM/nvm_pc4.fss"
		, StorageReadOnly = "True"
		, DialogType = "map"
		, DialogData = "geometry_rd"
		{
			unit<uint32> domain := ReadFSS_domain/domain;
				
			attribute<string>         parm (domain);
			
			attribute<string>         pc4 (domain) := left(parm, strlen(parm) - 8);
		}
	}
}
