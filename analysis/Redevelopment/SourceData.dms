container SourceData :  using = "units;geography;classifications"
{
	#include <bag.dms>
	#include <bbg.dms>
	// #include <begrbebgeb.dms>
	// #include <brk.dms>
	#include <brt.dms>
	// #include <nvm.dms>
	// #include <overig.dms>
	#include <regios.dms>
	// #include <spatial_data.dms>
	// #include <woz.dms>
	
 	container EigendomStaat
	{
		unit<uint32> Corporatiebezit_data
		:   StorageName     = "%Redev_DataDir%/Vastgoed/EigendomStaat/CorporatieBezit.shp"
		,   StorageType     = "gdal.vect"
		// ,	DialogType      = "Map"
		,	StorageReadOnly = "True"
		,	Source          = "https://pbl.sliksvn.com/vesta/SD51/EigendomStaat revision 640"
		{
			attribute<string> Label := 'C_'+string(OBJECTID), DialogType = "LabelText";
			attribute<rdc> geometry;
			attribute<classifications/Eigendom> Eigendom_rel := const(classifications/Eigendom/V/WoonCorp,.); //eigendomstatus als attribuut
		}
		
		// inlezen puntenbestand particuliere huur
		unit<uint32> Particulierehuur_data
		:   StorageName     = "%Redev_DataDir%/Vastgoed/EigendomStaat/ParticuliereHuur.shp"
		,   StorageType     = "gdal.vect"
		,	DialogType      = "Map"
		,	StorageReadOnly = "True"
		,	Source          = "https://pbl.sliksvn.com/vesta/SD51/EigendomStaat revision 640"
		{
			attribute<string> Label := 'H_'+string(OBJECTID);
			attribute<rdc> geometry;
			attribute<classifications/Eigendom> Eigendom_rel := const(classifications/Eigendom/V/PartHuur,.); //eigendomstatus als attribuut
		}
		
		//samenvoegen bovenstaande puntenbestanden tot gezamenlijke entiteit
		unit<uint32> EigendomStaat_data := union_unit(Corporatiebezit_data, Particulierehuur_data)
		{
			attribute<string> Label := union_data(., Corporatiebezit_data/Label, Particulierehuur_data/Label);
			attribute<rdc> geometry := union_data(., Corporatiebezit_data/geometry, Particulierehuur_data/geometry);
			attribute<classifications/Eigendom> Eigendom_rel := union_data(., Corporatiebezit_data/Eigendom_rel, Particulierehuur_data/Eigendom_rel);
			
			// ruimtelijke matching om bijbehorend BAG pand per punt te bepalen
			attribute<pand> Pand_rel := point_in_polygon(geometry, pand/Geometry);
		}
		
		//afgeleide attributen vastgesteld per BAG pand
		// unit<uint32> pand := ='SourceData/Vastgoed/BAG/PerJaar/Y'+string(ModelParameters/Model_Startyear)+'/panden/pand'
		// {
			// attribute<rdc> Geometry (poly) := ='SourceData/Vastgoed/BAG/PerJaar/Y'+string(ModelParameters/Model_Startyear)+'/panden/pand/Geometry';
			
			//eigendomstatus wordt afgeleid van gekoppelde puntattributen, uitgaande van meest voorkomende status. Indien onbekend wordt koop verondersteld.
			// attribute<classifications/Eigendom> Eigendom_rel := makedefined(modus(EigendomStaat_data/Eigendom_rel, EigendomStaat_data/Pand_rel), classifications/Eigendom/V/Koop);
		// }
	}
 
 
/* 	container Zones : using = "/classifications/BBG"
	{
		container gg_zones_bbg2000_begr2000
		{
			container gg_3K_in_bbg := 
				for_each_nedv( 
					gg_3K/name
					,'begenzing_bebouwd_gebied/BBG_2000/is_bbg && /SourceData/bestand_bodem_gebruik/bbg/dominant/bbg2000_100m_3k == gg_3K/V/' + gg_3K/name
					,NL_grid/domain
					,bool
				);
			container gg_3K_buiten_bbg := 
				for_each_nedv(
					gg_3K/name
					,'!begenzing_bebouwd_gebied/BBG_2000/is_bbg && /SourceData/bestand_bodem_gebruik/bbg/dominant/bbg2000_100m_3k == gg_3K/V/' + gg_3K/name
					,NL_grid/domain
					,bool
				);
			container gg_10K_in_bbg := 
				for_each_nedv(
					gg_10K/name
					,'begenzing_bebouwd_gebied/BBG_2000/is_bbg && /SourceData/bestand_bodem_gebruik/bbg/dominant/bbg2000_100m_10k == gg_10K/V/' + gg_10K/name
					,NL_grid/domain
					,bool
				);
			container gg_10K_buiten_bbg := 
				for_each_nedv(
					gg_10K/name
					,'!begenzing_bebouwd_gebied/BBG_2000/is_bbg && /SourceData/bestand_bodem_gebruik/bbg/dominant/bbg2000_100m_10k == gg_10K/V/' + gg_10K/name
					,NL_grid/domain
					,bool
				);
		} 
	}
 */
}
