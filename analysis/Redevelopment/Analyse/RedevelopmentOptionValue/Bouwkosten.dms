container Bouwkosten : using = "geography"
{ 
	unit<uint32> Kentallen 
	: StorageName = "%ProjDir%/Data/Bouwkosten_Bouwkompas2022_export.csv"
	, StorageType = "gdal.vect"
	, StorageReadOnly = "true"
	{
		attribute<WP4> wp4_rel := rlookup(lowercase(woningtype), WP4/name);
	}

	unit<uint32> Distances := RegioUnit_gem
	, DialogType = "map"
	, DialogData = "centroid"
	{
		attribute<rdc>      geometry (poly) := RegioUnit_gem/geometry;
		attribute<rdc>      centroid        := centroid_or_mid(geometry);
		attribute<float32>  x                               := PointCol(centroid);
		attribute<float32>  y                               := PointRow(centroid);
		attribute<string>   name            := RegioUnit_gem/name;
		
		container CalcDist    := for_each_ne(./name, 'CalculateDistance('+quote(./name)+',..)');
		// attribute<m> MaxDists := ='union_data(.,'+AsList('CalcDist/'+name+'/subset/max_dist', ',')+')';
		// parameter<m> MaxDist  := max(MaxDists);
		
		container Dist_vanaf
		{
			attribute<float32> Amsterdam       (..) := CalcDist/Amsterdam/subset/dist_edit;
			attribute<float32> Den_Helder      (..) := CalcDist/Den_Helder/subset/dist_edit;
			attribute<float32> Pekela          (..) := CalcDist/Pekela/subset/dist_edit;
			attribute<float32> s_Hertogenbosch (..) := CalcDist/_s_Hertogenbosch/subset/dist_edit;
			attribute<float32> Maastricht      (..) := CalcDist/Maastricht/subset/dist_edit;
			attribute<float32> Sluis           (..) := CalcDist/Sluis/subset/dist_edit;
			attribute<float32> Gouda           (..) := CalcDist/Gouda/subset/dist_edit;
			attribute<float32> Almelo          (..) := CalcDist/Almelo/subset/dist_edit;
			attribute<float32> Emmeloord       (..) := CalcDist/Noordoostpolder/subset/dist_edit;
			attribute<float32> Harlingen       (..) := CalcDist/Harlingen/subset/dist_edit;
		}
		container Weights
		{
			attribute<float32> Amsterdam        (..) := (1f-(Dist_vanaf/Amsterdam / (max(Dist_vanaf/Amsterdam) + 1f) )^exponent)^exponent;
			attribute<float32> Den_Helder       (..) := (1f-(Dist_vanaf/Den_Helder / (max(Dist_vanaf/Den_Helder)+1f))^exponent)^exponent;
			attribute<float32> Pekela           (..) := (1f-(Dist_vanaf/Pekela / (max(Dist_vanaf/Pekela)+1f)^exponent))^exponent;
			attribute<float32> s_Hertogenbosch  (..) := (1f-(Dist_vanaf/s_Hertogenbosch / (max(Dist_vanaf/s_Hertogenbosch)+1f))^exponent)^exponent;
			attribute<float32> Maastricht       (..) := (1f-(Dist_vanaf/Maastricht / (max(Dist_vanaf/Maastricht)+1f))^exponent)^exponent;
			attribute<float32> Sluis            (..) := (1f-(Dist_vanaf/Sluis / (max(Dist_vanaf/Sluis)+1f))^exponent)^exponent;
			attribute<float32> Gouda            (..) := (1f-(Dist_vanaf/Gouda / (max(Dist_vanaf/Gouda)+1f))^exponent)^exponent;
			attribute<float32> Almelo           (..) := (1f-(Dist_vanaf/Almelo / (max(Dist_vanaf/Almelo)+1f))^exponent)^exponent;
			attribute<float32> Emmeloord        (..) := (1f-(Dist_vanaf/Emmeloord / (max(Dist_vanaf/Emmeloord)+1f))^exponent)^exponent;
			attribute<float32> Harlingen        (..) := (1f-(Dist_vanaf/Harlingen / (max(Dist_vanaf/Harlingen)+1f))^exponent)^exponent;
			parameter<float32> exponent := 1f;
		}
	}
	
	container PerWP4 :=
		for_each_ne(
			WP4/name
			, 'CalcPerWP4_T('+quote(WP4/name)+')'
		)
	{
		container Appartement_HR := CalcPerWP4_T('Appartement_HR');
	}
	
	Template CalcPerWP4_T
	{
		parameter<string>  WoningType;
		parameter<uint32> test := rlookup(lowercase(WoningType), lowercase(Kentallen/WoningType));
		attribute<float32> Bouwkosten_Interpolated (RegioUnit_gem) := ='(Kentallen/Amsterdam['+string(rlookup(lowercase(WoningType), lowercase(Kentallen/WoningType)))+'[Kentallen]][float32] * Distances/Weights/Amsterdam
																			+ Kentallen/Den_Helder['+string(rlookup(lowercase(WoningType), lowercase(Kentallen/WoningType)))+'[Kentallen]][float32] * Distances/Weights/Den_Helder
																			+ Kentallen/Boven_Pekela['+string(rlookup(lowercase(WoningType), lowercase(Kentallen/WoningType)))+'[Kentallen]][float32] * Distances/Weights/Pekela
																			+ Kentallen/Den_Bosch['+string(rlookup(lowercase(WoningType), lowercase(Kentallen/WoningType)))+'[Kentallen]][float32] * Distances/Weights/s_Hertogenbosch
																			+ Kentallen/Maastricht['+string(rlookup(lowercase(WoningType), lowercase(Kentallen/WoningType)))+'[Kentallen]][float32] * Distances/Weights/Maastricht
																			+ Kentallen/Sluis['+string(rlookup(lowercase(WoningType), lowercase(Kentallen/WoningType)))+'[Kentallen]][float32] * Distances/Weights/Sluis
																			+ Kentallen/Gouda['+string(rlookup(lowercase(WoningType), lowercase(Kentallen/WoningType)))+'[Kentallen]][float32] * Distances/Weights/Gouda
																			+ Kentallen/Almelo['+string(rlookup(lowercase(WoningType), lowercase(Kentallen/WoningType)))+'[Kentallen]][float32] * Distances/Weights/Almelo
																			+ Kentallen/Emmeloord['+string(rlookup(lowercase(WoningType), lowercase(Kentallen/WoningType)))+'[Kentallen]][float32] * Distances/Weights/Emmeloord
																			+ Kentallen/Harlingen['+string(rlookup(lowercase(WoningType), lowercase(Kentallen/WoningType)))+'[Kentallen]][float32] * Distances/Weights/Harlingen
																			) / 
																			(Distances/Weights/Amsterdam
																			+ Distances/Weights/Den_Helder
																			+ Distances/Weights/Pekela
																			+ Distances/Weights/s_Hertogenbosch
																			+ Distances/Weights/Maastricht
																			+ Distances/Weights/Sluis
																			+ Distances/Weights/Gouda
																			+ Distances/Weights/Almelo
																			+ Distances/Weights/Emmeloord
																			+ Distances/Weights/Harlingen
																			)';
															
		attribute<Eur_m2 > bouwkosten_grid (NL_grid/domain) := Bouwkosten_Interpolated[Distances/per_grid][Eur_m2];
		attribute<eur_m2>  bouwkosten_pc4  (RegioUnit_PC4)  := mean(bouwkosten_grid, RegioUnit_PC4/per_grid);
	} 

	template CalculateDistance
	{
		//
		parameter<string> name;
		unit<uint32> target_domain;
		//
		unit<uint32> subset  := Subset(target_domain/name == name)
		, DialogData = "geometry"
		, DialogType = "map"
		{
			attribute<geography/rdc>   geometry                        := target_domain/centroid[nr_OrgEntity];
			attribute<float32>          x                               := PointCol(geometry);
			attribute<float32>          y                               := PointRow(geometry);
			
			attribute<subset>           point_rel (target_domain)       := connect(geometry, target_domain/centroid);		

			attribute<float32>          x_targetdomain (target_domain)  := PointCol(geometry)[point_rel];
			attribute<float32>          y_targetdomain (target_domain)  := PointRow(geometry)[point_rel];
			attribute<float32>          delta_x (target_domain)         := abs(x_targetdomain - target_domain/x)^2f;
			attribute<float32>          delta_y (target_domain)         := abs(y_targetdomain - target_domain/y)^2f;

			attribute<m>                dist (target_domain)            := MakeDefined(sqrt(delta_x + delta_y)[m], 0[m]);
			attribute<m>                dist_edit (target_domain)       := dist == 0[m] ? 1[m] : dist;
			attribute<float32>          dist_norm (target_domain)       := dist / MaxDist;
			parameter<m>                max_dist                        := max(dist);
		}
	}
	
	// unit<uint32> Export_Thomas := RegioUnit_PC4
	// {
		// attribute<string> PC4              := RegioUnit_PC4/PC4;
		// attribute<eur_m2> Appartement_HR   := PerWP4/Appartement_HR/bouwkosten_pc4;
		// attribute<eur_m2> Vrijstaand       := PerWP4/Vrijstaand/bouwkosten_pc4;
		// attribute<eur_m2> Rijtjeswoning    := PerWP4/Rijtjeswoning/bouwkosten_pc4;
		// attribute<eur_m2> Twee_onder_1_kap := PerWP4/Twee_onder_1_kap/bouwkosten_pc4;
		// attribute<eur_m2> Appartement      := PerWP4/Appartement/bouwkosten_pc4;
	// }
}