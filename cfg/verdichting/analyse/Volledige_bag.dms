container volledige_bag:  using = "eenheden"
{
	unit<uint32>	RegioUnit_buurt  		:= brondata/regios/buurten/src_2012;
	unit<uint32>	RegioUnit_gem     		:= BronData/regios/gemeenten/gem_2012/gem_uq;
	unit<uint32>	RegioUnit_wijk    		:= brondata/regios/wijken/src_2012;
	
	parameter<string> 	FSSDir         		:= '%SourceDataDir%/BAG/20170910/fss';

	container startdatum
	{
		parameter<int32> 	prik_datum			:= 20120101[int32];
	
		container pand
		{
			unit<uint32> src_met_grote_panden
			:	StorageName     = "= FSSDir + '/pand.fss'"
			,	StorageReadOnly = "True"
			{
				attribute<geometries/rdc_mm> geometry_mm (polygon);
				attribute<string>            identificatie;
				attribute<eenheden/jaar>     bouwjaar;

				container meta             := meta_src_template(.);
				container inSelectieExtent := BepaalInSelectieExtent(.,geometry_mm);
				
				container extents
				{
					attribute<geometries/rdc_mm> NW (src_met_grote_panden) := lower_bound(geometry_mm);
					attribute<geometries/rdc_mm> SE (src_met_grote_panden) := upper_bound(geometry_mm);
					attribute<int32> X_ext          (src_met_grote_panden) := PointCol(SE) - PointCol(NW);
					attribute<int32> Y_ext          (src_met_grote_panden) := PointRow(SE) - PointRow(NW);
				}
			}

			unit<uint32> src:= subset(src_met_grote_panden/extents/X_ext < 1000000i && src_met_grote_panden/extents/Y_ext < 1000000i) 
			{
				attribute<geometries/rdc_mm> geometry_mm (polygon) := src_met_grote_panden/geometry_mm[nr_OrgEntity];
				attribute<string>            identificatie         := src_met_grote_panden/identificatie[nr_OrgEntity];
				attribute<eenheden/jaar>     bouwjaar              := src_met_grote_panden/bouwjaar[nr_OrgEntity];

				container meta
				{
					attribute<string> STATUS         (src) := pand/src_met_grote_panden/meta/STATUS[nr_OrgEntity];
					attribute<INT32>  BEGINDATUM     (src) := pand/src_met_grote_panden/meta/BEGINDATUM[nr_OrgEntity];
					attribute<INT32>  EINDDATUM      (src) := pand/src_met_grote_panden/meta/EINDDATUM[nr_OrgEntity];
					attribute<INT32>  DOCUMENTDATUM  (src) := pand/src_met_grote_panden/meta/DOCUMENTDATUM[nr_OrgEntity];
					attribute<string> DOCUMENTNUMMER (src) := pand/src_met_grote_panden/meta/DOCUMENTNUMMER[nr_OrgEntity];
					attribute<Bool >  IS_ONDERZOEK   (src) := pand/src_met_grote_panden/meta/IS_ONDERZOEK[nr_OrgEntity];
					attribute<Bool >  IS_CORRECTIE   (src) := pand/src_met_grote_panden/meta/IS_CORRECTIE[nr_OrgEntity];
					attribute<Bool >  IS_INACTIEF    (src) := pand/src_met_grote_panden/meta/IS_INACTIEF[nr_OrgEntity];
				}
				container inSelectieExtent := BepaalInSelectieExtent(src,geometry_mm);
			}

			container results :=
				='datum_selectie(src, prik_datum, '
				+ (geometries/selectie_extent/isActive 
						?  'True,  src/inSelectieExtent/result'
						:  'False'
					)
				+ ')'
			{
				unit<uint32> selectie
				{
					attribute<geometries/rdc_mm> geometry_mm (polygon) := domain/geometry_mm[selectie/nr_OrgEntity];
					attribute<string>            identificatie         := domain/identificatie[selectie/nr_OrgEntity];
					attribute<eenheden/jaar>     bouwjaar              := domain/bouwjaar[selectie/nr_OrgEntity];
					attribute<unique>            unique_rel            := rlookup(identificatie,unique/identificatie);
				}

				unit<uint32> unique_base := unique(selectie/identificatie);
				unit<uint32> unique      := TiledUnit(1000000[unique_base])
				,	DialogType  = "Map"
				,	DialogData  = "geometry_mm"
				,	FreeData    = "False"
				{
					attribute<uint32>                                     sel_count             := pcount(selectie/unique_rel)        , DisableStorage = "True";
					attribute<uint32>                                     vbo_count             := pcount(vbo/results/unique/pand_rel), DisableStorage = "True";
					attribute<geometries/rdc_mm>                          geometry_mm (polygon) := rjoin(identificatie, selectie/identificatie, selectie/geometry_mm);

					attribute<string>                                     identificatie         := unique_base/values[mapping(unique,unique_base)];
					attribute<eenheden/jaar>                              bouwjaar              := last(selectie/bouwjaar, selectie/unique_rel);

					container meta := meta_template(selectie, unique);
				}
			}
		}

		container vbo
		{
			unit<uint32> src
			:	StorageName     = "= FSSDir + '/vbo.fss'"
			,	StorageReadOnly = "True"
			{
				attribute<geometries/rdc_mm> geometry_mm;
				attribute<string>            identificatie;
				attribute<string>            nummeraanduiding_id;
				attribute<int32>             oppervlakte;

				container meta := meta_src_template(src);

				container gebruiksdoelen :=
					for_each_ndv(
						typeringen/vbo_gebruiksdoel/name
						, src
						, bool
					);

				unit<uint32> polygon // is een 1->0..1 relatie
				{
					attribute<geometries/rdc_mm> geometry_mm (polygon);
					attribute<src>               parent_rel;
					attribute<string>            vbo_id      := src/identificatie[parent_rel], DisableStorage = "True";
					attribute<geometries/rdc_mm> centroid_mm := centroid(geometry_mm);
				}

				attribute<geometries/rdc_mm> centroid_mm := polygon/centroid_mm[invert(polygon/parent_rel)];

				unit<uint32> gerelateerdPand // is een 1->0..n relatie
				{
					attribute<string> pand_id;
					attribute<src>    parent_rel;
					attribute<string> vbo_id := src/identificatie[parent_rel], DisableStorage = "True";

					attribute<bool>   PandInSelectieExtent := IsDefined(rlookup(pand_id, pand/results/selectie/identificatie));

				}

				unit<uint32> nevenadres // is een 1->0..n relatie
				{
					attribute<string> nummeraanduiding_id;
					attribute<src>    parent_rel;
					attribute<string> vbo_id := src/identificatie[parent_rel], DisableStorage = "True";
				}
				
				attribute<bool>   GerelateerdPandInSelectieExtent := any(gerelateerdPand/PandInSelectieExtent, gerelateerdPand/parent_rel);
			}

			container results:= 
				='datum_selectie(src, prik_datum, '
				+ (geometries/selectie_extent/isActive 
						?  'True,  src/GerelateerdPandInSelectieExtent'
						:  'False'
					)
				+ ')'

			{
				unit<uint32> selectie
				{
					attribute<geometries/rdc_mm> geometry_mm_raw_or_centroid := MakeDefined(domain/geometry_mm, domain/centroid_mm)[selectie/nr_OrgEntity]; // Op snapshot moment willen we alleen punt geometrien hebben voor vbo's
					attribute<int32> X:= PointCol(geometry_mm_raw_or_centroid);
					attribute<int32> Y:= PointRow(geometry_mm_raw_or_centroid);
					attribute<geometries/rdc_mm> geometry_mm:= 
						   X >=  -8000000i &&  X <= 300000000i
						&& Y >= 289000000i &&  Y <= 629000000i
						?	geometry_mm_raw_or_centroid
						:	point(0i/0i, 0i/0i, geometries/rdc_mm);
					// Op snapshot moment willen we alleen geometrien in NL (https://nl.wikipedia.org/wiki/Rijksdriehoeksco%C3%B6rdinaten), dit ten behoeve van gemiddelde bepalingen (denk aan coordinaten voor geocode)

					attribute<string> identificatie       := domain/identificatie[selectie/nr_OrgEntity];
					attribute<int32>  oppervlakte         := domain/oppervlakte[selectie/nr_OrgEntity];
					attribute<string> nummeraanduiding_id := domain/nummeraanduiding_id[selectie/nr_OrgEntity];
					attribute<unique> unique_rel          := rlookup(identificatie,unique/identificatie);

				container gebruiksdoelen :=
					for_each_nedv(
						typeringen/vbo_gebruiksdoel/name
						, 'domain/gebruiksdoelen/' + typeringen/vbo_gebruiksdoel/name + '[selectie/nr_OrgEntity]'
						, selectie
						, bool
					);
				}

				unit<uint32> unique_base := unique(selectie/identificatie);
				unit<uint32> unique      := TiledUnit(1000000[unique_base])
				,	DialogType  = "Map"
				,	DialogData  = "geometry_mm"
				,	FreeData    = "False"
				{
					attribute<uint32> count := pcount(selectie/unique_rel), DisableStorage = "True";

					attribute<geometries/rdc_mm>   geometry_mm         := rjoin(identificatie, selectie/identificatie, selectie/geometry_mm);
					attribute<string>              identificatie       := unique_base/values[mapping(unique, unique_base)];
					attribute<int32>               oppervlakte         := last(selectie/oppervlakte, selectie/unique_rel);
					attribute<string>              nummeraanduiding_id := last(selectie/nummeraanduiding_id, selectie/unique_rel);

					attribute<pand/results/unique> pand_rel            := point_in_polygon(geometry_mm, pand/results/unique/geometry_mm);
					attribute<string>              pand_id_geom        := pand/results/unique/identificatie[pand_rel];

					container gebruiksdoelen:=
						for_each_nedv(
							typeringen/vbo_gebruiksdoel/name
							, 'last(selectie/gebruiksdoelen/' + typeringen/vbo_gebruiksdoel/name + ', selectie/unique_rel)'
							, unique
							, bool
						);

					container meta := meta_template(selectie, unique);

					unit<uint32> gerelateerdPand := Subset(isDefined(rlookup(src/gerelateerdPand/parent_rel,selectie/nr_OrgEntity))) // is een 1->0..n relatie
					{
						attribute<string> pand_id      := src/gerelateerdPand/pand_id[nr_OrgEntity];
						attribute<string> vbo_id       := src/gerelateerdPand/vbo_id[nr_OrgEntity];
						attribute<uint32> nr_OrgEntity : DisableStorage = "True";
					}

					unit<uint32> nevenadres:= Subset(isDefined(rlookup(src/nevenadres/parent_rel,selectie/nr_OrgEntity))) // is een 1->0..n relatie
					{
						attribute<string> nummeraanduiding_id := src/nevenadres/nummeraanduiding_id[nr_OrgEntity];
						attribute<string> vbo_id              := src/nevenadres/vbo_id[nr_OrgEntity];
						attribute<uint32> nr_OrgEntity        : DisableStorage = "True";
					}
					
					
					unit<uint32> woon_functie := 
						Subset(unique/gebruiksdoelen/woon && (unique/meta/status == 'Verblijfsobject buiten gebruik' || unique/meta/status == 'Verblijfsobject in gebruik' || unique/meta/status == 'Verblijfsobject in gebruik (niet ingemeten)'))
					,	DialogType = "Map"
					,	DialogData = "geometry_mm"
					, 	FreeData = "False"
					{
						attribute<geometries/rdc_mm>      						geometry_mm         	:= unique/geometry_mm[nr_OrgEntity];
						attribute<geometries/rdc>          						geometry            	:= geometry_mm[geometries/rdc];

						attribute<string>                             			identificatie       	:= unique/identificatie[nr_OrgEntity];
						attribute<int32>										oppervlakte         	:= unique/oppervlakte[nr_OrgEntity];
						attribute<string>                   					nummeraanduiding_id 	:= unique/nummeraanduiding_id[nr_OrgEntity];
						attribute<jaar>            								bouwjaar            	:= rjoin(pand_id_geom, pand/results/unique/identificatie, pand/results/unique/bouwjaar);

						attribute<string>                   					pand_id_geom        	:= unique/pand_id_geom[nr_OrgEntity];

						attribute<NL_grid/domain>           					NL_grid_domain_rel  	:= geometry[NL_grid/domain];
						
						container gebruiksdoelen :=
							for_each_nedv(
								typeringen/vbo_gebruiksdoel/name
								, 'unique/gebruiksdoelen/' + typeringen/vbo_gebruiksdoel/name + '[nr_OrgEntity]'
								, woon_functie
								, bool
							);

						container meta
						{
							attribute<string>    status        (woon_functie) := unique/meta/status[nr_OrgEntity];
							attribute<Statussen> Statussen_rel (woon_functie) := rlookup(status, Statussen/values);
						}

						unit<uint32> Statussen := unique(meta/status)
						{
							attribute<uint32> count := pcount(meta/Statussen_rel);
						}
					}
					
					unit<uint32> niet_woon_functie := 
						Subset(!unique/gebruiksdoelen/woon && (unique/meta/status == 'Verblijfsobject buiten gebruik' || unique/meta/status == 'Verblijfsobject in gebruik' || unique/meta/status == 'Verblijfsobject in gebruik (niet ingemeten)'))
					,	DialogType = "Map"
					,	DialogData = "geometry_mm"
					, 	FreeData = "False"
					{
						attribute<geometries/rdc_mm>      				geometry_mm         	:= unique/geometry_mm[nr_OrgEntity];
						attribute<geometries/rdc>          				geometry            	:= geometry_mm[geometries/rdc];

						attribute<string>                            	identificatie       	:= unique/identificatie[nr_OrgEntity];
						attribute<int32>								oppervlakte         	:= unique/oppervlakte[nr_OrgEntity];
						attribute<string>                   			nummeraanduiding_id 	:= unique/nummeraanduiding_id[nr_OrgEntity];
						attribute<eenheden/jaar>            			bouwjaar            	:= rjoin(pand_id_geom,pand/results/unique/identificatie, pand/results/unique/bouwjaar);

						attribute<string>                   			pand_id_geom        	:= unique/pand_id_geom[nr_OrgEntity];

						attribute<NL_grid/domain>           			NL_grid_domain_rel  	:= geometry[NL_grid/domain];
						
						container gebruiksdoelen :=
							for_each_nedv(
								typeringen/vbo_gebruiksdoel/name
								, 'unique/gebruiksdoelen/' + typeringen/vbo_gebruiksdoel/name + '[nr_OrgEntity]'
								, niet_woon_functie
								, bool
							);
						
						container meta
						{
							attribute<string>    status        (niet_woon_functie) := unique/meta/status[nr_OrgEntity];
							attribute<Statussen> Statussen_rel (niet_woon_functie) := rlookup(status, Statussen/values);
						}

						unit<uint32> Statussen := unique(meta/status)
						{
							attribute<uint32> count := pcount(meta/Statussen_rel);
						}
					}
					
				}
				
			}
			
		}
		
	}

	container Einddatum
	{
		parameter<int32> 	prik_datum			:= 20170101[int32];

		container pand
		{
			unit<uint32> src_met_grote_panden
			:	StorageName     = "= FSSDir + '/pand.fss'"
			,	StorageReadOnly = "True"
			{
				attribute<geometries/rdc_mm> geometry_mm (polygon);
				attribute<string>            identificatie;
				attribute<eenheden/jaar>     bouwjaar;

				container meta             := meta_src_template(.);
				container inSelectieExtent := BepaalInSelectieExtent(.,geometry_mm);
				
				container extents
				{
					attribute<geometries/rdc_mm> NW (src_met_grote_panden) := lower_bound(geometry_mm);
					attribute<geometries/rdc_mm> SE (src_met_grote_panden) := upper_bound(geometry_mm);
					attribute<int32> X_ext          (src_met_grote_panden) := PointCol(SE) - PointCol(NW);
					attribute<int32> Y_ext          (src_met_grote_panden) := PointRow(SE) - PointRow(NW);
				}
			}

			unit<uint32> src:= subset(src_met_grote_panden/extents/X_ext < 1000000i && src_met_grote_panden/extents/Y_ext < 1000000i) 
			{
				attribute<geometries/rdc_mm> geometry_mm (polygon) := src_met_grote_panden/geometry_mm[nr_OrgEntity];
				attribute<string>            identificatie         := src_met_grote_panden/identificatie[nr_OrgEntity];
				attribute<eenheden/jaar>     bouwjaar              := src_met_grote_panden/bouwjaar[nr_OrgEntity];

				container meta
				{
					attribute<string> STATUS         (src) := pand/src_met_grote_panden/meta/STATUS[nr_OrgEntity];
					attribute<INT32>  BEGINDATUM     (src) := pand/src_met_grote_panden/meta/BEGINDATUM[nr_OrgEntity];
					attribute<INT32>  EINDDATUM      (src) := pand/src_met_grote_panden/meta/EINDDATUM[nr_OrgEntity];
					attribute<INT32>  DOCUMENTDATUM  (src) := pand/src_met_grote_panden/meta/DOCUMENTDATUM[nr_OrgEntity];
					attribute<string> DOCUMENTNUMMER (src) := pand/src_met_grote_panden/meta/DOCUMENTNUMMER[nr_OrgEntity];
					attribute<Bool >  IS_ONDERZOEK   (src) := pand/src_met_grote_panden/meta/IS_ONDERZOEK[nr_OrgEntity];
					attribute<Bool >  IS_CORRECTIE   (src) := pand/src_met_grote_panden/meta/IS_CORRECTIE[nr_OrgEntity];
					attribute<Bool >  IS_INACTIEF    (src) := pand/src_met_grote_panden/meta/IS_INACTIEF[nr_OrgEntity];
				}
				container inSelectieExtent := BepaalInSelectieExtent(src,geometry_mm);
			}

			container results :=
				='datum_selectie(src, prik_datum, '
				+ (geometries/selectie_extent/isActive 
						?  'True,  src/inSelectieExtent/result'
						:  'False'
					)
				+ ')'
			{
				unit<uint32> selectie
				{
					attribute<geometries/rdc_mm> geometry_mm (polygon) := domain/geometry_mm[selectie/nr_OrgEntity];
					attribute<string>            identificatie         := domain/identificatie[selectie/nr_OrgEntity];
					attribute<eenheden/jaar>     bouwjaar              := domain/bouwjaar[selectie/nr_OrgEntity];
					attribute<unique>            unique_rel            := rlookup(identificatie,unique/identificatie);
				}

				unit<uint32> unique_base := unique(selectie/identificatie);
				unit<uint32> unique      := TiledUnit(1000000[unique_base])
				,	DialogType  = "Map"
				,	DialogData  = "geometry_mm"
				,	FreeData    = "False"
				{
					attribute<uint32>                                     sel_count             := pcount(selectie/unique_rel)        , DisableStorage = "True";
					attribute<uint32>                                     vbo_count             := pcount(vbo/results/unique/pand_rel), DisableStorage = "True";
					attribute<geometries/rdc_mm>                          geometry_mm (polygon) := rjoin(identificatie, selectie/identificatie, selectie/geometry_mm);

					attribute<string>                                     identificatie         := unique_base/values[mapping(unique,unique_base)];
					attribute<eenheden/jaar>                              bouwjaar              := last(selectie/bouwjaar, selectie/unique_rel);

					container meta := meta_template(selectie, unique);
				}
			}
		}

		container vbo
		{
			unit<uint32> src
			:	StorageName     = "= FSSDir + '/vbo.fss'"
			,	StorageReadOnly = "True"
			{
				attribute<geometries/rdc_mm> geometry_mm;
				attribute<string>            identificatie;
				attribute<string>            nummeraanduiding_id;
				attribute<int32>             oppervlakte;

				container meta := meta_src_template(src);

				container gebruiksdoelen :=
					for_each_ndv(
						typeringen/vbo_gebruiksdoel/name
						, src
						, bool
					);

				unit<uint32> polygon // is een 1->0..1 relatie
				{
					attribute<geometries/rdc_mm> geometry_mm (polygon);
					attribute<src>               parent_rel;
					attribute<string>            vbo_id      := src/identificatie[parent_rel], DisableStorage = "True";
					attribute<geometries/rdc_mm> centroid_mm := centroid(geometry_mm);
				}

				attribute<geometries/rdc_mm> centroid_mm := polygon/centroid_mm[invert(polygon/parent_rel)];

				unit<uint32> gerelateerdPand // is een 1->0..n relatie
				{
					attribute<string> pand_id;
					attribute<src>    parent_rel;
					attribute<string> vbo_id := src/identificatie[parent_rel], DisableStorage = "True";

					attribute<bool>   PandInSelectieExtent := IsDefined(rlookup(pand_id, pand/results/selectie/identificatie));

				}

				unit<uint32> nevenadres // is een 1->0..n relatie
				{
					attribute<string> nummeraanduiding_id;
					attribute<src>    parent_rel;
					attribute<string> vbo_id := src/identificatie[parent_rel], DisableStorage = "True";
				}
				
				attribute<bool>   GerelateerdPandInSelectieExtent := any(gerelateerdPand/PandInSelectieExtent, gerelateerdPand/parent_rel);
			}

			container results:= 
				='datum_selectie(src, prik_datum, '
				+ (geometries/selectie_extent/isActive 
						?  'True,  src/GerelateerdPandInSelectieExtent'
						:  'False'
					)
				+ ')'

			{
				unit<uint32> selectie
				{
					attribute<geometries/rdc_mm> geometry_mm_raw_or_centroid := MakeDefined(domain/geometry_mm, domain/centroid_mm)[selectie/nr_OrgEntity]; // Op snapshot moment willen we alleen punt geometrien hebben voor vbo's
					attribute<int32> X:= PointCol(geometry_mm_raw_or_centroid);
					attribute<int32> Y:= PointRow(geometry_mm_raw_or_centroid);
					attribute<geometries/rdc_mm> geometry_mm:= 
						   X >=  -8000000i &&  X <= 300000000i
						&& Y >= 289000000i &&  Y <= 629000000i
						?	geometry_mm_raw_or_centroid
						:	point(0i/0i, 0i/0i, geometries/rdc_mm);
					// Op snapshot moment willen we alleen geometrien in NL (https://nl.wikipedia.org/wiki/Rijksdriehoeksco%C3%B6rdinaten), dit ten behoeve van gemiddelde bepalingen (denk aan coordinaten voor geocode)

					attribute<string> identificatie       := domain/identificatie[selectie/nr_OrgEntity];
					attribute<int32>  oppervlakte         := domain/oppervlakte[selectie/nr_OrgEntity];
					attribute<string> nummeraanduiding_id := domain/nummeraanduiding_id[selectie/nr_OrgEntity];
					attribute<unique> unique_rel          := rlookup(identificatie,unique/identificatie);

				container gebruiksdoelen :=
					for_each_nedv(
						typeringen/vbo_gebruiksdoel/name
						, 'domain/gebruiksdoelen/' + typeringen/vbo_gebruiksdoel/name + '[selectie/nr_OrgEntity]'
						, selectie
						, bool
					);
				}

				unit<uint32> unique_base := unique(selectie/identificatie);
				unit<uint32> unique      := TiledUnit(1000000[unique_base])
				,	DialogType  = "Map"
				,	DialogData  = "geometry_mm"
				,	FreeData    = "False"
				{
					attribute<uint32> count := pcount(selectie/unique_rel), DisableStorage = "True";

					attribute<geometries/rdc_mm>   geometry_mm         := rjoin(identificatie, selectie/identificatie, selectie/geometry_mm);
					attribute<string>              identificatie       := unique_base/values[mapping(unique, unique_base)];
					attribute<int32>               oppervlakte         := last(selectie/oppervlakte, selectie/unique_rel);
					attribute<string>              nummeraanduiding_id := last(selectie/nummeraanduiding_id, selectie/unique_rel);

					attribute<pand/results/unique> pand_rel            := point_in_polygon(geometry_mm, pand/results/unique/geometry_mm);
					attribute<string>              pand_id_geom        := pand/results/unique/identificatie[pand_rel];

					container gebruiksdoelen:=
						for_each_nedv(
							typeringen/vbo_gebruiksdoel/name
							, 'last(selectie/gebruiksdoelen/' + typeringen/vbo_gebruiksdoel/name + ', selectie/unique_rel)'
							, unique
							, bool
						);

					container meta := meta_template(selectie, unique);

					unit<uint32> gerelateerdPand := Subset(isDefined(rlookup(src/gerelateerdPand/parent_rel,selectie/nr_OrgEntity))) // is een 1->0..n relatie
					{
						attribute<string> pand_id      := src/gerelateerdPand/pand_id[nr_OrgEntity];
						attribute<string> vbo_id       := src/gerelateerdPand/vbo_id[nr_OrgEntity];
						attribute<uint32> nr_OrgEntity : DisableStorage = "True";
					}

					unit<uint32> nevenadres:= Subset(isDefined(rlookup(src/nevenadres/parent_rel,selectie/nr_OrgEntity))) // is een 1->0..n relatie
					{
						attribute<string> nummeraanduiding_id := src/nevenadres/nummeraanduiding_id[nr_OrgEntity];
						attribute<string> vbo_id              := src/nevenadres/vbo_id[nr_OrgEntity];
						attribute<uint32> nr_OrgEntity        : DisableStorage = "True";
					}
					
					
					unit<uint32> woon_functie := 
						Subset(unique/gebruiksdoelen/woon && (unique/meta/status == 'Verblijfsobject buiten gebruik' || unique/meta/status == 'Verblijfsobject in gebruik' || unique/meta/status == 'Verblijfsobject in gebruik (niet ingemeten)'))
					,	DialogType = "Map"
					,	DialogData = "geometry_mm"
					, 	FreeData = "False"
					{
						attribute<geometries/rdc_mm>      						geometry_mm         	:= unique/geometry_mm[nr_OrgEntity];
						attribute<geometries/rdc>          						geometry            	:= geometry_mm[geometries/rdc];

						attribute<string>                             			identificatie       	:= unique/identificatie[nr_OrgEntity];
						attribute<int32>										oppervlakte         	:= unique/oppervlakte[nr_OrgEntity];
						attribute<string>                   					nummeraanduiding_id 	:= unique/nummeraanduiding_id[nr_OrgEntity];
						attribute<jaar>            								bouwjaar            	:= rjoin(pand_id_geom, pand/results/unique/identificatie, pand/results/unique/bouwjaar);

						attribute<string>                   					pand_id_geom        	:= unique/pand_id_geom[nr_OrgEntity];

						attribute<NL_grid/domain>           					NL_grid_domain_rel  	:= geometry[NL_grid/domain];
						
						container gebruiksdoelen :=
							for_each_nedv(
								typeringen/vbo_gebruiksdoel/name
								, 'unique/gebruiksdoelen/' + typeringen/vbo_gebruiksdoel/name + '[nr_OrgEntity]'
								, woon_functie
								, bool
							);

						container meta
						{
							attribute<string>    status        (woon_functie) := unique/meta/status[nr_OrgEntity];
							attribute<Statussen> Statussen_rel (woon_functie) := rlookup(status, Statussen/values);
						}

						unit<uint32> Statussen := unique(meta/status)
						{
							attribute<uint32> count := pcount(meta/Statussen_rel);
						}
					}
					
					unit<uint32> niet_woon_functie := 
						Subset(!unique/gebruiksdoelen/woon && (unique/meta/status == 'Verblijfsobject buiten gebruik' || unique/meta/status == 'Verblijfsobject in gebruik' || unique/meta/status == 'Verblijfsobject in gebruik (niet ingemeten)'))
					,	DialogType = "Map"
					,	DialogData = "geometry_mm"
					, 	FreeData = "False"
					{
						attribute<geometries/rdc_mm>      				geometry_mm         	:= unique/geometry_mm[nr_OrgEntity];
						attribute<geometries/rdc>          				geometry            	:= geometry_mm[geometries/rdc];

						attribute<string>                            	identificatie       	:= unique/identificatie[nr_OrgEntity];
						attribute<int32>								oppervlakte         	:= unique/oppervlakte[nr_OrgEntity];
						attribute<string>                   			nummeraanduiding_id 	:= unique/nummeraanduiding_id[nr_OrgEntity];
						attribute<eenheden/jaar>            			bouwjaar            	:= rjoin(pand_id_geom,pand/results/unique/identificatie, pand/results/unique/bouwjaar);

						attribute<string>                   			pand_id_geom        	:= unique/pand_id_geom[nr_OrgEntity];

						attribute<NL_grid/domain>           			NL_grid_domain_rel  	:= geometry[NL_grid/domain];
						
						container gebruiksdoelen :=
							for_each_nedv(
								typeringen/vbo_gebruiksdoel/name
								, 'unique/gebruiksdoelen/' + typeringen/vbo_gebruiksdoel/name + '[nr_OrgEntity]'
								, niet_woon_functie
								, bool
							);
						
						container meta
						{
							attribute<string>    status        (niet_woon_functie) := unique/meta/status[nr_OrgEntity];
							attribute<Statussen> Statussen_rel (niet_woon_functie) := rlookup(status, Statussen/values);
						}

						unit<uint32> Statussen := unique(meta/status)
						{
							attribute<uint32> count := pcount(meta/Statussen_rel);
						}
					}
					
				}
				
			}
			
		}
		
	}

	container Delta_12_17
	{
		attribute<uint32> 	ingetrokken_rel 		(startdatum/vbo/results/unique/woon_functie) 	:= rlookup(startdatum/vbo/results/unique/woon_functie/identificatie, Brondata/BAG/Volledige_BAG/vbo/src_woon/src_woon_ingetrokken/identificatie);
		attribute<int32>	ingetrokken_begindatum 	(startdatum/vbo/results/unique/woon_functie) 	:= rjoin(ingetrokken_rel, Brondata/BAG/Volledige_BAG/vbo/src_woon/src_woon_ingetrokken/id, Brondata/BAG/Volledige_BAG/vbo/src_woon/src_woon_ingetrokken/begindatum);
		unit<uint32>		ing_begindatum_uq														:= unique(ingetrokken_begindatum);
		attribute<int32>	ingetrokken_einddatum 	(startdatum/vbo/results/unique/woon_functie) 	:= rjoin(ingetrokken_rel, Brondata/BAG/Volledige_BAG/vbo/src_woon/src_woon_ingetrokken/id, Brondata/BAG/Volledige_BAG/vbo/src_woon/src_woon_ingetrokken/begindatum);
		unit<uint32>		ing_einddatum_uq														:= unique(ingetrokken_einddatum);
		
		
		attribute<uint32> 	gevormd_rel 		(einddatum/vbo/results/unique/woon_functie) 		:= rlookup(einddatum/vbo/results/unique/woon_functie/identificatie, Brondata/BAG/Volledige_BAG/vbo/src_woon/src_woon_gevormd/identificatie);
		attribute<int32>	gevormd_begindatum 	(einddatum/vbo/results/unique/woon_functie) 		:= rjoin(gevormd_rel, Brondata/BAG/Volledige_BAG/vbo/src_woon/src_woon_gevormd/id, Brondata/BAG/Volledige_BAG/vbo/src_woon/src_woon_gevormd/begindatum);
		unit<uint32>		gev_begindatum_uq														:= unique(gevormd_begindatum);
		attribute<int32>	gevormd_einddatum 	(einddatum/vbo/results/unique/woon_functie) 		:= rjoin(gevormd_rel, Brondata/BAG/Volledige_BAG/vbo/src_woon/src_woon_gevormd/id, Brondata/BAG/Volledige_BAG/vbo/src_woon/src_woon_gevormd/begindatum);
		unit<uint32>		gev_einddatum_uq														:= unique(gevormd_einddatum);

		
	
	}
	
	template meta_src_template // Voor het inlezen van de generieke BAG attributen
	{
		// begin case parameters
		unit<uint32> domain;
		// end case parameters

		attribute<string> Status         (domain);
		attribute<int32 > BEGINDATUM     (domain);
		attribute<int32>  EINDDATUM      (domain);

		attribute<int32>  DOCUMENTDATUM  (domain);
		attribute<string> DOCUMENTNUMMER (domain);

		attribute<bool>   IS_ONDERZOEK   (domain);
		attribute<bool>   IS_CORRECTIE   (domain);
		attribute<bool>   IS_INACTIEF    (domain);
	}

	template meta_template // Voor het aggregeren van de generieke BAG attributen
	{
		// begin case parameters
		unit<uint32> src_domain;
		unit<uint32> target_domain;
		// end case parameters

		attribute<string>         Status         (target_domain):= AsItemList(selectie/meta/Status         , selectie/unique_rel);
		attribute<eenheden/datum> BEGINDATUM     (target_domain):=       last(selectie/meta/BEGINDATUM     , selectie/unique_rel);
		attribute<eenheden/datum> EINDDATUM      (target_domain):=       last(selectie/meta/EINDDATUM      , selectie/unique_rel);
		attribute<eenheden/datum> DOCUMENTDATUM  (target_domain):=       last(selectie/meta/DOCUMENTDATUM  , selectie/unique_rel);
		attribute<string>         DOCUMENTNUMMER (target_domain):= AsItemList(selectie/meta/DOCUMENTNUMMER , selectie/unique_rel);

		attribute<bool>           IS_ONDERZOEK   (target_domain):= any(selectie/meta/IS_ONDERZOEK, selectie/unique_rel);
		attribute<bool>           IS_CORRECTIE   (target_domain):= any(selectie/meta/IS_CORRECTIE, selectie/unique_rel);
		attribute<bool>           IS_INACTIEF    (target_domain):= any(selectie/meta/IS_INACTIEF , selectie/unique_rel);
	}

	template datum_selectie
	{
		// begin case parameters
		unit<uint32>              domain;
		parameter<eenheden/datum> prik_datum;
		parameter<bool>           overig_filter_actief;
		attribute<bool>           overig_filter(domain) := const(true,domain);
		// einde case parameters
		
		attribute<bool> WasGestart   (domain):= domain/meta/BEGINDATUM <= prik_datum;
		attribute<bool> WasBeeindigd (domain):= domain/meta/EINDDATUM  <= prik_datum && domain/meta/EINDDATUM > 0i;

		unit<uint32> selectie:= 
			= 'Subset(WasGestart && not(WasBeeindigd) && not(domain/Meta/IS_INACTIEF)' +
						(overig_filter_actief 
							? '&& overig_filter' 
							: '') 
			+ ')'
		,	DialogType = "Map"
		,	DialogData = "geometry_mm"
		{
			container meta
			{
				attribute<string>         STATUS         (selectie):= domain/meta/STATUS[nr_OrgEntity];
				attribute<eenheden/datum> BEGINDATUM     (selectie):= domain/meta/BEGINDATUM[nr_OrgEntity];
				attribute<eenheden/datum> EINDDATUM      (selectie):= domain/meta/EINDDATUM[nr_OrgEntity];
				attribute<eenheden/datum> DOCUMENTDATUM  (selectie):= domain/meta/DOCUMENTDATUM[nr_OrgEntity];
				attribute<string>         DOCUMENTNUMMER (selectie):= domain/meta/DOCUMENTNUMMER[nr_OrgEntity];

				attribute<bool>           IS_ONDERZOEK   (selectie):= domain/meta/IS_ONDERZOEK[nr_OrgEntity];
				attribute<bool>           IS_CORRECTIE   (selectie):= domain/meta/IS_CORRECTIE[nr_OrgEntity];
				attribute<bool>           IS_INACTIEF    (selectie):= domain/meta/IS_INACTIEF[nr_OrgEntity];
			}
		}
	}

	template BepaalInSelectieExtent
	{
		// begin case parameters
		unit<uint32> domain;
		attribute<geometries/rdc_mm> geometry_mm (polygon, domain);
		// end case parameters

		attribute<geometries/rdc_mm> lowerbound (domain) := lower_bound(geometry_mm);
		attribute<geometries/rdc_mm> upperbound (domain) := upper_bound(geometry_mm);

		attribute<eenheden/mm> x_min (domain) := PointCol(lowerbound);
		attribute<eenheden/mm> x_max (domain) := PointCol(upperbound);
		attribute<eenheden/mm> y_min (domain) := PointRow(lowerbound);
		attribute<eenheden/mm> y_max (domain) := PointRow(upperbound);
		
		attribute<bool> result (domain) :=
			   x_max >= geometries/selectie_extent/x_min
			&& x_min <= geometries/selectie_extent/x_max
			&& y_max >= geometries/selectie_extent/y_min
			&& y_min <= geometries/selectie_extent/y_max;
	}
}
