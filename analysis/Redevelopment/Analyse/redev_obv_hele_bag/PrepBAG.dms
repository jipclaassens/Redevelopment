container PrepBAG : using = "AdditionalClassifications"
{
	// unit<uint32> BAG_Tabel_path := /SourceData/BAG/VolledigeBAG/Historische_Join/Condense_based_on_SF/SelectChainEndPoints;
	unit<uint32> BAG_Tabel_path := /SourceData/BAG/VolledigeBAG/Historische_Join/SelectNonOverlappingPeriods;

	unit<uint32> BAG_Tabel := BAG_Tabel_path, KeepData = "true"
	{
		attribute<rdc>                  geometry                      := BAG_Tabel_path/geometry;
		attribute<string>               label                         := pv_begindatum_key;
		attribute<uint64>               pand_bag_nr                   := BAG_Tabel_path/pand_bag_nr;
		attribute<uint64>               vbo_bag_nr                    := BAG_Tabel_path/vbo_bag_nr;
		attribute<int32>                vbo_oppervlakte               := BAG_Tabel_path/vbo_oppervlakte;
		attribute<int32>                vbo_oppervlakte_UnknownEdit   := vbo_oppervlakte == 9999i || vbo_oppervlakte == 99999i ? 0i : vbo_oppervlakte;
		attribute<int32>                begindatum                    := BAG_Tabel_path/begindatum;
		attribute<jaar>                 begin_jaar                    := (begindatum / 10000i)[jaar];
		attribute<int32>                einddatum                     := BAG_Tabel_path/einddatum;
		attribute<vbo_gebruiksdoel_ext> prev_gebruiksdoel_rel         := gebruiksdoel_rel[pv_begin_eind_rel];
		attribute<vbo_gebruiksdoel_ext> gebruiksdoel_rel              := BAG_Tabel_path/gebruiksdoel_rel;
		attribute<bool>                 WasOverigeGebruiksfunctie     := prev_gebruiksdoel_rel == vbo_gebruiksdoel_ext/v/overige_gebruiks; //tbv TM corrigeren van garageboxen wonen>ovfuncties
		attribute<bool>                 IsOverigeGebruiksfunctie      := gebruiksdoel_rel == vbo_gebruiksdoel_ext/v/overige_gebruiks;//tbv TM corrigeren van garageboxen wonen>ovfuncties
		
		attribute<bool>                 VBO_WasLogies     := prev_gebruiksdoel_rel == vbo_gebruiksdoel_ext/v/logies; //tbv TM corrigeren van garageboxen wonen>ovfuncties
		attribute<bool>                 VBO_IsLogies      := gebruiksdoel_rel == vbo_gebruiksdoel_ext/v/logies;//tbv TM corrigeren van garageboxen wonen>ovfuncties
		
		attribute<jaar>                 pand_bouwjaar                 := BAG_Tabel_path/pand_bouwjaar;
		// attribute<WP4>                  pand_type                     := BAG_Tabel_path/pand_type;
		attribute<FunctieK>             prev_functie_rel              := MakeDefined(vbo_gebruiksdoel_ext/functie_rel[gebruiksdoel_rel[pv_begin_eind_rel]],functie_rel);
		attribute<FunctieK>             functie_rel                   := vbo_gebruiksdoel_ext/functie_rel[gebruiksdoel_rel];
		attribute<uint32>               pand_count_ZorgFuncties          := org_rel -> pand_count_ZorgFuncties;
		attribute<uint32>               pand_count_ZorgFuncties_StartBAG := org_rel -> pand_count_ZorgFuncties_StartBAG;

		attribute<bool>                 IsMogelijkWoningCorporatiePand   := BAG_Tabel_path/IsMogelijkWoningCorporatiePand;
		attribute<bool>                 IsMutated                        := IsDefined(rlookup(vbo_bag_nr, FinalMutationTable/vbo_bag_nr));
		attribute<bool>                 IsOnveranderd_Woon_Voorraad      := not(IsMutated) && VBO_IsWonen && VBO_IsVoorraad && EINDDATUM == /SourceData/BAG/VolledigeBAG/MaxDatum;
		// attribute<bool>                 IsOnveranderd_Woon_Voorraad      := not(IsMutated) && VBO_IsWonen && VBO_IsVoorraad ;
		attribute<bool>                 IsOnveranderd_NietWoon_Voorraad  := not(IsMutated) && not(VBO_IsWonen) && not(IsOverigeGebruiksfunctie) && VBO_IsVoorraad && EINDDATUM == /SourceData/BAG/VolledigeBAG/MaxDatum;
		attribute<bool>                 LigtOpStandplaats_Start_20162017 := IsDefined(point_in_polygon(geometry, /SourceData/BAG/VolledigeBAG/Standplaatsen/src/SelectieMoment/geometry)), Descr = "Er is een sloop piek in 2016/2017, dit betrof foutieve toevoeging van stacaravans als pand. Deze zijn toen allemaal 'gesloopt'. Deze kunnen we vervolgens identiferen doordat ze als nieuwe standplaats zijn toegevoegd aan de BAG.";
		
		
		attribute<uint32>               pand_count_new_WoonFuncties       := sum(VBO_IsWonen && vbo_IsVoorraad && not(ActiefOp_StartBAG) ? 1 : 0, uq_pand_nr_rel)[uq_pand_nr_rel];
		
		attribute<uq_pand_nr>              uq_pand_nr_rel        := rlookup(pand_bag_nr, uq_pand_nr/values);
		unit<uint32>                       uq_pand_nr            := unique(pand_bag_nr);
		
		unit<uint32> Onveranderd_Woon := select_with_org_rel(IsOnveranderd_Woon_Voorraad)
		{
			attribute<uint64>              vbo_bag_nr           := ../vbo_bag_nr[org_rel];
			attribute<int32>               vbo_oppervlakte      := ../vbo_oppervlakte[org_rel];
			attribute<rdc>                 geometry             := ../geometry[org_rel];
			attribute<rdc>                 pand_geometry (poly) := ../pand_geometry[org_rel];
			attribute<jaar>                pand_bouwjaar        := ../pand_bouwjaar[org_rel];
			attribute<uq>                  uq_rel               := rlookup(vbo_bag_nr, uq/values);
			 
			unit<uint32> uq := unique(vbo_bag_nr)
			{
				attribute<uint64>              vbo_bag_nr           := values;
				attribute<rdc>                 vbo_geometry         := first(../geometry, uq_rel);
				attribute<rdc>                 pand_geometry (poly) := ../pand_geometry[invert(uq_rel)];
				attribute<int32>               MutatieMaand         := const(null_i,.);
				attribute<int32>               vbo_oppervlakte      := last(../vbo_oppervlakte, uq_rel);
				attribute<jaar>                pand_bouwjaar        := last(../pand_bouwjaar, uq_rel);
			}
		}
		
		unit<uint32> Onveranderd_NietWoon := select_with_org_rel(IsOnveranderd_NietWoon_Voorraad)
		{
			attribute<uint64>              vbo_bag_nr           := ../vbo_bag_nr[org_rel];
			attribute<int32>               vbo_oppervlakte      := ../vbo_oppervlakte[org_rel];
			attribute<rdc>                 geometry             := ../geometry[org_rel];
			attribute<rdc>                 pand_geometry (poly) := ../pand_geometry[org_rel];
			attribute<jaar>                pand_bouwjaar        := ../pand_bouwjaar[org_rel];
			attribute<uq>                  uq_rel               := rlookup(vbo_bag_nr, uq/values);
			 
			unit<uint32> uq := unique(vbo_bag_nr)
			, DialogType = "map", DialogData = "vbo_geometry"
			{
				attribute<uint64>              vbo_bag_nr           := values;
				attribute<rdc>                 vbo_geometry         := first(../geometry, uq_rel);
				attribute<rdc>                 pand_geometry (poly) := ../pand_geometry[invert(uq_rel)];
				attribute<int32>               MutatieMaand         := const(null_i,.);
				attribute<int32>               vbo_oppervlakte      := last(../vbo_oppervlakte, uq_rel);
				attribute<jaar>                pand_bouwjaar        := last(../pand_bouwjaar, uq_rel);
				
				attribute<AMS>                 Amsterdam_rel        := point_in_polygon(vbo_geometry, AMS/geometry);

				//ad hoc voor kaartje paper
				unit<uint32> Amsterdam := select_with_attr_by_cond(., IsDefined(Amsterdam_rel))
				{
				
				}
			}
		}
		
		container VoorraadWoningenPer1Jan :=
			for_each_nedv(
				classifications/Tijd/jaren12_24/name
				, 'sum(VBO_IsVoorraad && VBO_IsWonen && begindatum < int32('+string(classifications/Tijd/jaren12_24/value)+'0101) && einddatum >= int32('+string(classifications/Tijd/jaren12_24/value)+'0101) ?  1 :0)'
				, void
				, uint32
			);
		container VoorraadNietWoningenPer1Jan :=
			for_each_nedv(
				classifications/Tijd/jaren12_24/name
				, 'sum(VBO_IsVoorraad && !VBO_IsWonen && begindatum < int32('+string(classifications/Tijd/jaren12_24/value)+'0101) && einddatum >= int32('+string(classifications/Tijd/jaren12_24/value)+'0101) ?  1 :0)'
				, void
				, uint32
			);
			
		container Per1Jan :=
			for_each_ne(
				classifications/Tijd/jaren12_24/name
				, 'Per1jan_T('+string(classifications/Tijd/jaren12_24/value)+'[int32], '+string(classifications/Tijd/jaren12_24/prev_value)+'[int32])'
			), Descr = "Nodig om transformatie op te kunnen sporen.";
			
		unit<uint32> Transformatie_Results := ='union_unit('+AsItemList('Per1Jan/'+classifications/Tijd/jaren12_24/name+'/select/Sub_IsTr_na_3_en_Plausibel_2_extra')+')'
		{
			attribute<uint64> vbo_bag_nr  := ='union_data(.,'+AsItemList('Per1Jan/'+classifications/Tijd/jaren12_24/name+'/select/Sub_IsTr_na_3_en_Plausibel_2_extra/vbo_bag_nr')+')';
		}
		
		attribute<bool>                 WasObjectVoorraadBijStartBAG      := sum_uint8(VBO_IsVoorraad && begindatum <= 20111201i ? 1b : 0b, uq_vbo_rel)[uq_vbo_rel] > 0b; //nodig voor bepaling 'mutatie in 2e instantie' 
		
		attribute<bool>                 IsWaarschijnlijkCorrectieVanStacaravans_NietWonen := gebruiksdoel_rel == vbo_gebruiksdoel_ext/V/logies 
																								&& VBO_WasVoorraad && not(VBO_IsVoorraad)
																								&& Pand_WasVoorraad && not(Pand_IsVoorraad)
																								&& begindatum < 20170201i && begindatum > 20160101i;
		
		attribute<bool>                 IsWaarschijnlijkCorrectieVanStacaravans_Wonen     := VBO_WasVoorraad && not(VBO_IsVoorraad)
																								&& Pand_WasVoorraad && not(Pand_IsVoorraad)
																								&& begindatum < 20170201i && begindatum > 20160101i
																								&& IsDefined(point_in_polygon(geometry, /SourceData/bestand_bodem_gebruik/BBG/BBG_Reeks_1996_2017/IsVerblijfsrecreatie_2017/geometry));
		
		attribute<bool>                 IsWaarschijnlijkCorrectieVanStudentenComplex_1      := VBO_WasVoorraad && not(VBO_IsVoorraad)
																								&& Pand_WasVoorraad && Pand_IsVoorraad
																								&& VBO_WasWonen && VBO_IsWonen
																								&& begindatum < 20170801i && begindatum > 20160101i
																								&& IsMogelijkWoningCorporatiePand;
		attribute<bool>                 IsWaarschijnlijkCorrectieVanStudentenComplex_2      := pand_count_new_WoonFuncties > 25
																								&& not(VBO_WasVoorraad) && VBO_IsVoorraad
																								&& VBO_WasWonen && VBO_IsWonen
																								&& begindatum < 20130101i && begindatum > 20111201i;
		attribute<bool>                 IsWaarschijnlijkCorrectieVanZorgNaarZorgwoonunits := pand_count_new_WoonFuncties > (pand_count_ZorgFuncties + 50) 
																								&& pand_count_ZorgFuncties > 0
																								&& begindatum < 20180101i && begindatum > 20120101i;
		attribute<bool>                 IsWaarschijnlijkCorrectieVanVakantiehuisWonenNaarLogies := VBO_WasWonen && VBO_IsLogies
																								&& begindatum < 20140601i && begindatum > 20120101i;

		
		// Extra stappen om Nieuwbouw (N+) te identificeren, ipv T+ of C+
		unit<uint32> uq_vbo := unique(vbo_bag_nr); attribute<uq_vbo>        uq_vbo_rel := rlookup(vbo_bag_nr, uq_vbo/values);
		attribute<int32>                vbo_vormingsfase_begindatum   := min(vbo_status_rel == vbo_status/v/verblijfsobject_gevormd ? begindatum : null_i, uq_vbo_rel)[uq_vbo_rel] > max(vbo_status_rel == vbo_status/v/verblijfsobject_gevormd ? einddatum : null_i, uq_vbo_rel)[uq_vbo_rel] ? null_i : min(vbo_status_rel == vbo_status/v/verblijfsobject_gevormd ? begindatum : null_i, uq_vbo_rel)[uq_vbo_rel];
		attribute<int32>                vbo_vormingsfase_einddatum    := min(vbo_status_rel == vbo_status/v/verblijfsobject_gevormd ? begindatum : null_i, uq_vbo_rel)[uq_vbo_rel] > max(vbo_status_rel == vbo_status/v/verblijfsobject_gevormd ? einddatum : null_i, uq_vbo_rel)[uq_vbo_rel] ? null_i : max(vbo_status_rel == vbo_status/v/verblijfsobject_gevormd ? einddatum : null_i, uq_vbo_rel)[uq_vbo_rel];
		attribute<bool>                 Pand_InBouwfase               := pand_status_rel == pand_status/v/bouwvergunning_verleend || pand_status_rel == pand_status/v/bouw_gestart;
		attribute<bool>                 VBO_in_VormF_EN_Pand_in_BouwF := Pand_InBouwfase && begindatum <= vbo_vormingsfase_einddatum && einddatum >= vbo_vormingsfase_begindatum;
		attribute<bool>                 Heeft_VBO_in_VormF_EN_Pand_in_BouwF_InChain := any(VBO_in_VormF_EN_Pand_in_BouwF, uq_vbo_rel)[uq_vbo_rel];
		
		attribute<bool>                 VBO_WasVoorraad               := vbo_status/isVoorraad[prev_vbo_status_rel];
		attribute<bool>                 VBO_IsVoorraad                := vbo_status/isVoorraad[vbo_status_rel];
		attribute<bool>                 VBO_WasWonen                  := prev_functie_rel == FunctieK/v/wonen;
		attribute<bool>                 VBO_IsWonen                   := functie_rel == FunctieK/v/wonen;
		attribute<bool>                 Pand_WasVoorraad              := pand_status_w_Undefined/isVoorraad[prev_pand_status_rel];
		attribute<bool>                 Pand_IsVoorraad               := pand_status/isVoorraad[pand_status_rel];
		
		// vbo overgang
		attribute<vbo_status>           prev_vbo_status_rel           := vbo_status_rel[pv_begin_eind_rel];   // vbo status was
		attribute<vbo_status>           vbo_status_rel                := BAG_Tabel_path/vbo_status_rel;       // vbo status wordt
		
		// pand overgang
		attribute<pand_status_w_Undefined> prev_pand_status_rel       := MakeDefined(invert(pand_status_w_Undefined/pand_status_rel)[pand_status_rel[pv_begin_eind_rel]], pand_status_w_Undefined/v/undefined); //prev_pand_status_rel_wUndefined
		attribute<pand_status>             pand_status_rel            := BAG_Tabel_path/pand_status_rel;      // pand status wordt
		attribute<string>                  pand_overgang_key          := string(prev_pand_status_rel) + '_' + string(pand_status_rel); 
		attribute<Overgangen_Pand>         pand_overgang_rel          := rlookup(pand_overgang_key, Overgangen_Pand/key); 
		attribute<bool>                    IsLogische_Pand_overgang   := Overgangen_Pand/Overgang_Logisch[pand_overgang_rel];

		
		//overgang identificatie
		attribute<string>                v_begindatum_key             := string(vbo_bag_nr) +'_'+ string(begindatum);
		attribute<string>                v_einddatum_key              := string(vbo_bag_nr) +'_'+ string(einddatum);
		attribute<.>                     v_eind_begin_rel             := rlookup(v_einddatum_key, v_begindatum_key); //gives the index number of the next record in the chain. If null, it is the only record in the chain (based on vbo id)
		attribute<.>                     v_begin_eind_rel             := rlookup(v_begindatum_key, v_einddatum_key); //gives the index number of the next record in the chain. If null, it is the only record in the chain (based on vbo id)
		
		attribute<string>                pv_key                       := string(pand_bag_nr) +'_'+ string(vbo_bag_nr);
		attribute<string>                pv_begindatum_key            := pv_key +'_'+ string(begindatum);
		attribute<string>                pv_einddatum_key             := pv_key +'_'+ string(einddatum);
		attribute<.>                     pv_eind_begin_rel            := rlookup(pv_einddatum_key, pv_begindatum_key); //gives the index number of the next record in the chain. If null, it is the only record in the chain (based on pand id/vbo id)
		attribute<.>                     pv_begin_eind_rel            := rlookup(pv_begindatum_key, pv_einddatum_key); //gives the index number of the next record in the chain. If null, it is the only record in the chain (based on pand id/vbo id)
	
		
		
		//Identificatie in vooraad Nieuwbouw (N+)
		attribute<bool>                  IDEN_N_1                     := ((prev_vbo_status_rel == vbo_status/v/verblijfsobject_gevormd  && VBO_IsVoorraad) || (IsNull(prev_vbo_status_rel) && VBO_IsVoorraad))
																			&& (pand_status_rel == pand_status/v/bouw_gestart || pand_status_rel == pand_status/v/bouwvergunning_verleend)
																			&& IsLogische_Pand_overgang
																			&& VBO_WasWonen && VBO_IsWonen
																			, URL = "%ProjDir%/Analysis/Data/CBS Afleiden_woonvoorraad.pdf";
		attribute<bool>                  IDEN_N_2                     := ((prev_vbo_status_rel == vbo_status/v/verblijfsobject_gevormd  && VBO_IsVoorraad) || (IsNull(prev_vbo_status_rel) && VBO_IsVoorraad))
																			&& (prev_pand_status_rel == pand_status_w_Undefined/v/bouw_gestart || prev_pand_status_rel == pand_status_w_Undefined/v/bouwvergunning_verleend)
																			&& IsLogische_Pand_overgang
																			&& VBO_WasWonen && VBO_IsWonen;
		attribute<bool>                  IDEN_N_3                     := ((prev_vbo_status_rel == vbo_status/v/verblijfsobject_gevormd  && VBO_IsVoorraad) || (IsNull(prev_vbo_status_rel) && VBO_IsVoorraad))
																			&& prev_pand_status_rel == pand_status_w_Undefined/v/undefined
																			&& (pand_bouwjaar >= (begin_jaar - 1s)  || pand_bouwjaar <= (begin_jaar + 1s))
																			&& IsLogische_Pand_overgang
																			&& VBO_WasWonen && VBO_IsWonen;
		attribute<bool>                  IDEN_N_4                     := not(VBO_WasVoorraad) && VBO_IsVoorraad
																			&& VBO_WasWonen && VBO_IsWonen
																			&& Heeft_VBO_in_VormF_EN_Pand_in_BouwF_InChain;
		attribute<bool>                  IDEN_N                       := IDEN_N_1 || IDEN_N_2 || IDEN_N_3 || IDEN_N_4;
		
		//Identificatie in voorraad Toevoeging (T+)
		attribute<bool>                  IDEN_T_1                     := ((prev_vbo_status_rel == vbo_status/v/verblijfsobject_gevormd  && VBO_IsVoorraad) || (IsNull(prev_vbo_status_rel) && VBO_IsVoorraad))
																			&& (prev_pand_status_rel == pand_status_w_Undefined/v/pand_in_gebruik || prev_pand_status_rel == pand_status_w_Undefined/v/pand_in_gebruik_niet_ingemeten || prev_pand_status_rel == pand_status_w_Undefined/v/verbouwing_pand)
																			&& (pand_status_rel == pand_status/v/pand_in_gebruik || pand_status_rel == pand_status/v/pand_in_gebruik_niet_ingemeten || pand_status_rel == pand_status/v/verbouwing_pand)
																			&& VBO_WasWonen && VBO_IsWonen;
		attribute<bool>                  IDEN_T_2                     := not(IDEN_N_4) //objecten die op basis van keten analyse als Nieuwbouw worden geclassificeerd, zijn dan geen toeveoging meer.
																			&& VBO_WasWonen && VBO_IsWonen;
		attribute<bool>                  IDEN_T                       := IDEN_T_1 && IDEN_T_2; 
		
		attribute<bool>                  IDEN_TMplus_status           := VBO_WasVoorraad && VBO_IsVoorraad
																			&& not(VBO_WasWonen) && VBO_IsWonen
																			&& not(WasOverigeGebruiksfunctie && VBO_IsWonen);
		attribute<bool>                  IDEN_TMplus_ExtraAnalysis    := IsDefined(rlookup(vbo_bag_nr, Transformatie_Results/vbo_bag_nr));
		attribute<bool>                  IDEN_TMplus                  := IDEN_TMplus_status || IDEN_TMplus_ExtraAnalysis;
		
		//Identificatie In voorraad correctie (C+)
		attribute<bool>                  IDEN_Cplus                   := not(VBO_WasVoorraad) && VBO_IsVoorraad
																			&& not(IDEN_N)
																			&& not(IDEN_T)
																			&& VBO_WasWonen && VBO_IsWonen
																			&& not(IsWaarschijnlijkCorrectieVanZorgNaarZorgwoonunits)
																			&& not(IsWaarschijnlijkCorrectieVanStudentenComplex_2);
																			
		//Identificatie uit voorraad sloop (S-)
		attribute<bool>                  IDEN_S                       := VBO_WasVoorraad && vbo_status_rel == vbo_status/v/verblijfsobject_ingetrokken
																			&& (pand_status_rel == pand_status/v/pand_gesloopt || pand_status_rel == pand_status/v/sloopvergunning_verleend)
																			&& IsLogische_Pand_overgang
																			&& VBO_WasWonen && VBO_IsWonen
																			&& not(IsWaarschijnlijkCorrectieVanStacaravans_Wonen);
																			
		attribute<bool>                  IDEN_S_NW                     := VBO_WasVoorraad && vbo_status_rel == vbo_status/v/verblijfsobject_ingetrokken
																			&& (pand_status_rel == pand_status/v/pand_gesloopt || pand_status_rel == pand_status/v/sloopvergunning_verleend)
																			&& IsLogische_Pand_overgang
																			&& not(VBO_WasWonen) && not(VBO_IsWonen)
																			&& not(IsWaarschijnlijkCorrectieVanStacaravans_NietWonen);
		//Identificatie uit voorraad onttrekking (O-)
		attribute<bool>                  IDEN_O_1                     := VBO_WasVoorraad && vbo_status_rel == vbo_status/v/verblijfsobject_ingetrokken
																			&& (prev_pand_status_rel == pand_status_w_Undefined/v/pand_in_gebruik || prev_pand_status_rel == pand_status_w_Undefined/v/pand_in_gebruik_niet_ingemeten || prev_pand_status_rel == pand_status_w_Undefined/v/verbouwing_pand)
																			&& (pand_status_rel == pand_status/v/pand_in_gebruik || pand_status_rel == pand_status/v/pand_in_gebruik_niet_ingemeten || pand_status_rel == pand_status/v/verbouwing_pand)
																			&& VBO_WasWonen && VBO_IsWonen
																			&& not(IsWaarschijnlijkCorrectieVanStudentenComplex_1);
		attribute<bool>                  IDEN_O                       := IDEN_O_1;
		
		attribute<bool>                  IDEN_TMmin                   := VBO_WasVoorraad && VBO_IsVoorraad
																			&& VBO_WasWonen && not(VBO_IsWonen)
																			&& not(VBO_WasWonen && IsOverigeGebruiksfunctie)
																			&& not(IsWaarschijnlijkCorrectieVanVakantiehuisWonenNaarLogies);
																			
		//Identificatie uit voorraad correctie (C-)
		attribute<bool>                  IDEN_Cmin                    := VBO_WasVoorraad && not(VBO_IsVoorraad)
																			&& not(IDEN_S)
																			&& not(IDEN_O)
																			&& VBO_WasWonen && VBO_IsWonen
																			&& not(IsWaarschijnlijkCorrectieVanStacaravans_Wonen)
																			&& not(IsWaarschijnlijkCorrectieVanStudentenComplex_1);
																			
		parameter<int32>                 PrikMoment                       := 20120101i;   // Voorraad op 20120101 volgens CBS 7,386,743
		attribute<bool>                  ActiefOp_StartBAG      := VBO_IsVoorraad
																	// && VBO_IsWonen 
																	&& begindatum < PrikMoment 
																	&& einddatum >= PrikMoment;
		Template Per1jan_T
		{
			parameter<int32> Year;
			parameter<int32> PrevYear;
			//
			
			unit<uint32> PrevDomain := ='Per1Jan/y'+string(PrevYear)+'/select';
			
			unit<uint32> select := select_with_org_rel(begindatum < int32(string(Year)+'0101') && einddatum >= int32(string(Year)+'0101'))
			, Descr = "stand op 1 januari"
			{
				attribute<rdc>                  geometry                      := BAG_Tabel/geometry[org_rel];
				attribute<rdc>                  pand_geometry (poly)          := BAG_Tabel/pand_geometry[org_rel];
				attribute<uint64>               pand_bag_nr                   := BAG_Tabel/pand_bag_nr[org_rel];
				attribute<uint64>               vbo_bag_nr                    := BAG_Tabel/vbo_bag_nr[org_rel];
				attribute<PrevDomain>           PrevDomain_vbo_rel            := =PrevYear == 2011i ? 'const(null_u[PrevDomain],.)' : 'rlookup(vbo_bag_nr, PrevDomain/vbo_bag_nr)';
				attribute<int32>                vbo_oppervlakte               := BAG_Tabel/vbo_oppervlakte[org_rel];
				attribute<int32>                vbo_oppervlakte_UnknownEdit   := BAG_Tabel/vbo_oppervlakte_UnknownEdit[org_rel];
				attribute<vbo_status>           prev_vbo_status_rel           := =PrevYear == 2011i ? 'const(null_b,.)' : 'PrevDomain/vbo_status_rel[PrevDomain_vbo_rel]';
				attribute<vbo_status>           vbo_status_rel                := BAG_Tabel/vbo_status_rel[org_rel]; 
				attribute<vbo_gebruiksdoel_ext> prev_gebruiksdoel_rel         := =PrevYear == 2011i ? 'const(null_b,.)' : 'PrevDomain/gebruiksdoel_rel[PrevDomain_vbo_rel]';
				attribute<vbo_gebruiksdoel_ext> gebruiksdoel_rel              := BAG_Tabel/gebruiksdoel_rel[org_rel];
				attribute<jaar>                 pand_bouwjaar                 := BAG_Tabel/pand_bouwjaar[org_rel];
				attribute<bool>                 Pand_WasVoorraad              := =PrevYear == 2011i ? 'const(FALSE,.)' : 'PrevDomain/Pand_IsVoorraad[PrevDomain_vbo_rel]';
				attribute<bool>                 Pand_IsVoorraad               := BAG_Tabel/Pand_IsVoorraad[org_rel];
				attribute<bool>                 VBO_WasVoorraad               := =PrevYear == 2011i ? 'const(FALSE,.)' : 'PrevDomain/VBO_IsVoorraad[PrevDomain_vbo_rel]';
				attribute<bool>                 VBO_IsVoorraad                := BAG_Tabel/VBO_IsVoorraad[org_rel];
				attribute<bool>                 VBO_WasWonen                  := =PrevYear == 2011i ? 'const(FALSE,.)' : 'PrevDomain/VBO_IsWonen[PrevDomain_vbo_rel]';
				attribute<bool>                 VBO_IsWonen                   := BAG_Tabel/VBO_IsWonen[org_rel];
				
				attribute<bool>                 VBO_WasOverigeGebruiksfunctie := prev_gebruiksdoel_rel == vbo_gebruiksdoel_ext/v/overige_gebruiks;
				attribute<bool>                 VBO_IsOverigeGebruiksfunctie  := gebruiksdoel_rel == vbo_gebruiksdoel_ext/v/overige_gebruiks;
		
				unit<uint32>       Wijk12                 := /SourceData/RegioIndelingen/impl/CBS/Y2012/Wijk;
				attribute<Wijk12>  wijk12_rel             := point_in_polygon(geometry, Wijk12/geometry);
					
				unit<uint32>                    uq_pand_nr                    := unique(pand_bag_nr)
				{
					// tbv per wijk regressie analyse
					attribute<jaar>    pand_bouwjaar          := modus(../pand_bouwjaar, uq_pand_nr_rel);
					attribute<rdc>     pand_geometry  (poly)  := first(../pand_geometry, uq_pand_nr_rel);
					attribute<rdc>     pand_centroid          := centroid_or_mid(pand_geometry);
					attribute<Wijk12>  wijk12_rel             := point_in_polygon(pand_centroid, Wijk12/geometry);
					attribute<jaar>    mean_bouwjaar (wijk12) := mean(pand_bouwjaar, wijk12_rel);
					attribute<jaar>    pand_mean_bouwjaar     := mean_bouwjaar[wijk12_rel];
					unit<uint8>        WP4                    := /classifications/BAG/type_woonpand_4;
					attribute<WP4>     pand_type              := AfleidingPandtype/results/WP4_rel;
					
					attribute<float32> chi_square    (wijk12) := sum(sqr(pand_bouwjaar[float32] - pand_mean_bouwjaar[float32]) / pand_mean_bouwjaar[float32], wijk12_rel), Descr = "Pearson's chi-square om de mate van uniformiteit te bepalen", URL = "https://en.wikipedia.org/wiki/Pearson%27s_chi-squared_test";
					// attribute<float32> diversity              := ='1f - add('+asList( + 'sqr(' + Grondgebruik/CBS2010Klasse/gg_12K_wo_OSA/name + ')',',')+')';
					
					attribute<float32> count_vrijstaand           (wijk12) := sum(float32(pand_type == WP4/v/vrijstaand), wijk12_rel);
					attribute<float32> count_twee_onder_1_kap     (wijk12) := sum(float32(pand_type == WP4/v/twee_onder_1_kap), wijk12_rel);
					attribute<float32> count_rijtjeswoning        (wijk12) := sum(float32(pand_type == WP4/v/rijtjeswoning), wijk12_rel);
					attribute<float32> count_appartement          (wijk12) := sum(float32(pand_type == WP4/v/appartement), wijk12_rel);
					attribute<float32> count_all                  (wijk12) := count_vrijstaand + count_twee_onder_1_kap + count_rijtjeswoning + count_appartement;
					
					attribute<float32> rel_voork_vrijstaand       (wijk12) := count_vrijstaand / count_all;
					attribute<float32> rel_voork_twee_onder_1_kap (wijk12) := count_twee_onder_1_kap / count_all;
					attribute<float32> rel_voork_rijtjeswoning    (wijk12) := count_rijtjeswoning / count_all;
					attribute<float32> rel_voork_appartement      (wijk12) := count_appartement / count_all;
					
					attribute<float32> shanning_index_WP          (wijk12) := ='- add('+AsList('rel_voork_'+WP4/name+' * log(rel_voork_'+WP4/name+')',',')+')';
					
					#include<AfleidingPandtype.dms>
				}
				attribute<uq_pand_nr>           uq_pand_nr_rel                := rlookup(pand_bag_nr, uq_pand_nr/values);
				
				//transformatie identificatie (Goedhuys, M. & van der Wal, E. (2020) Transformaties in de woningvoorraad 2018-2019)
				//1a pand in gebruik t0 + t1
				attribute<bool>                      pand_vooraad_prev_current    := Pand_WasVoorraad && Pand_IsVoorraad;
				//1b pand minimaal 1 vbo in voorraad op t0 en t1
				attribute<uint32>                    p_count_voorr_vbo_prev       := =PrevYear == 2011i ? 'const(null_u,.)' : 'PrevDomain/p_count_voorr_vbo[PrevDomain_vbo_rel]';
				attribute<uint32>                    p_count_voorr_vbo            := sum(VBO_IsVoorraad && not(VBO_IsOverigeGebruiksfunctie) ? 1 : 0, uq_pand_nr_rel)[uq_pand_nr_rel];
				attribute<bool>                      p_min1_vbovoorr_prev_curr    := p_count_voorr_vbo_prev > 0 && p_count_voorr_vbo > 0;
				
				//selectie uit 1 waarbij:
				//2a count 'vbo in voorraad niet wonen' op t0  minimaal 1 is
				attribute<uint32>                    p_count_voorr_vbo_NW_prev    := =PrevYear == 2011i ? 'const(null_u,.)' : 'PrevDomain/p_count_voorr_vbo_NW[PrevDomain_vbo_rel]';
				attribute<uint32>                    p_count_voorr_vbo_NW         := sum(VBO_IsVoorraad && not(VBO_IsOverigeGebruiksfunctie) && not(VBO_IsWonen)  ? 1 : 0, uq_pand_nr_rel)[uq_pand_nr_rel];
				attribute<bool>                      p_min1_vbovoorr_NW_prev      := p_count_voorr_vbo_NW_prev > 0;
				
				//2b en count 'vbo in vooraad wonen' met minimaal 1 is toegenomen tussen t0 en t1
				attribute<uint32>                    p_count_voorr_vbo_W_prev     := =PrevYear == 2011i ? 'const(null_u,.)' : 'PrevDomain/p_count_voorr_vbo_W[PrevDomain_vbo_rel]';
				attribute<uint32>                    p_count_voorr_vbo_W          := sum(VBO_IsVoorraad  && VBO_IsWonen  ? 1 : 0, uq_pand_nr_rel)[uq_pand_nr_rel];
				attribute<bool>                      p_toename_vbovoorr_W         := (int32(p_count_voorr_vbo_W) - int32(p_count_voorr_vbo_W_prev)) > 0i;
				
				//2c en minimaal een niet-woon vbo verdwijnen of veranderen van oppervlak (afnemen?)
				attribute<bool>                      p_afname_vbovoorr_NW         := (int32(p_count_voorr_vbo_NW) - int32(p_count_voorr_vbo_NW_prev)) < 0i;
				
				attribute<int32>                     p_sum_voorr_vbo_NW_opp_prev  := =PrevYear == 2011i ? 'const(null_i,.)' : 'PrevDomain/p_sum_voorr_vbo_NW_opp[PrevDomain_vbo_rel]';
				attribute<int32>                     p_sum_voorr_vbo_NW_opp       := sum(VBO_IsVoorraad && not(VBO_IsOverigeGebruiksfunctie) && not(VBO_IsWonen)  ? vbo_oppervlakte_UnknownEdit : 0i, uq_pand_nr_rel)[uq_pand_nr_rel];
				attribute<bool>                      p_afname_vbovoorr_NW_opp     := (p_sum_voorr_vbo_NW_opp - p_sum_voorr_vbo_NW_opp_prev) < 0i;
				
				
				//3 selectie van objecten die muteren van nietwonen naar wonen of objecten die in t0 niet bestonden en t1 wel
				attribute<bool>                      v_tr_nw_w                    := VBO_WasVoorraad && VBO_IsVoorraad && not(VBO_WasWonen) && not(VBO_WasOverigeGebruiksfunctie) && VBO_IsWonen;
				attribute<bool>                      v_NotExit_Voorraad           := IsNull(prev_vbo_status_rel) && VBO_IsVoorraad;
				
				//Plausibel? na elke stap kun je afvallen en niet meer erbij komen.
				//4 objecten kleiner dan 15m2 zijn geen transformatie objecten
				attribute<bool>                      Plausibel_MinOpp             := not(vbo_oppervlakte < 15i);
				//5 als het pand max 2 jaar ouders is dan de transformatiedatum, is het geen transformatie, maar nieuwbouw te laat.
				attribute<bool>                      Plausibel_Bouwjaar           := not(int32(pand_bouwjaar) > year - 2i);  //2020 > 2022 - 2  || 2018 > 2022 -2 || 2021 > 2022-2
				//BRP criteria
				//6
				//7
				
				//Plausibel? opp verandering
				//8 IF woonopp > 80% van totale opp van pand (zowel voor als na opp verandering), EN woonopp is onttrokken --> woningsplitsing
				attribute<int32>                     p_sum_voorr_vbo_W_opp_prev     := =PrevYear == 2011i ? 'const(null_i,.)' : 'PrevDomain/p_sum_voorr_vbo_W_opp[PrevDomain_vbo_rel]';
				attribute<int32>                     p_sum_voorr_vbo_W_opp          := sum(VBO_IsVoorraad  && VBO_IsWonen  ? vbo_oppervlakte_UnknownEdit : 0i, uq_pand_nr_rel)[uq_pand_nr_rel];
				attribute<bool>                      p_afname_vbovoorr_W_opp        := (p_sum_voorr_vbo_W_opp - p_sum_voorr_vbo_W_opp_prev) < 0i;
				attribute<float32>                   p_share_woonopp_prev           := float32(p_sum_voorr_vbo_W_opp_prev) / float32(p_sum_voorr_vbo_W_opp_prev + p_sum_voorr_vbo_NW_opp_prev);
				attribute<float32>                   p_share_woonopp                := float32(p_sum_voorr_vbo_W_opp) / float32(p_sum_voorr_vbo_W_opp + p_sum_voorr_vbo_NW_opp);
				attribute<bool>                      Plausibel_p_share_opp_W        := not(p_share_woonopp_prev > 0.8f && p_share_woonopp > 0.8f && p_afname_vbovoorr_W_opp);
				
				//9 IF woonopp < 80% van totale opp van pand (zowel voor als na opp verandering), EN nietwoon opp gelijk, EN woonopp is onttrokken --> woningsplitsing
				attribute<bool>                      p_vbovoorr_NW_opp_gelijk       := (p_sum_voorr_vbo_NW_opp - p_sum_voorr_vbo_NW_opp_prev) == 0i;
				attribute<bool>                      Plausibel_p_share_opp_W_NW     := not(p_share_woonopp_prev < 0.8f && p_share_woonopp < 0.8f && p_vbovoorr_NW_opp_gelijk && p_afname_vbovoorr_W_opp);
				//BAG, BRP, WOZ combinatie criteria
				//10
				//11
				
				//extra regels:
				//1.1 pand met een vbo, waarbij functie verandert van logies naar wonen --> geen transformatie
				attribute<bool>                     VBO_WasLogies                  := prev_gebruiksdoel_rel == vbo_gebruiksdoel_ext/V/logies;
				attribute<bool>                     Plausibel_logies_wonen         := not(VBO_WasLogies && VBO_IsWonen);
				//1.2 nvt
				//1.3 nvt
				//1.4 ls er meerdere functies zijn, krijgt wonen voorrang.
				//1.5 onbekende opp 9999 of 99999 worden op 0 gezet en bij uitsplitsingen niet meegeteld
				//1.6 transformaties zijn onderdeel van overige toevoegingen
				//1.7 woningen toegevoegd aan volledig woonpanden tellen niet mee
				//1.8 woningen verdwenen uit getransformeerde panden worden niet geteld.
				
				attribute<bool>                      IsTr_na_1                      := pand_vooraad_prev_current && p_min1_vbovoorr_prev_curr;
				attribute<bool>                      IsTr_na_2                      := IsTr_na_1 && p_min1_vbovoorr_NW_prev && p_toename_vbovoorr_W && (p_afname_vbovoorr_NW || p_afname_vbovoorr_NW_opp);
				attribute<bool>                      IsTr_na_3                      := IsTr_na_2 && (v_tr_nw_w || v_NotExit_Voorraad);
				attribute<bool>                      IsTr_na_3_en_Plausibel_1       := IsTr_na_3 && Plausibel_MinOpp && Plausibel_Bouwjaar;
				attribute<bool>                      IsTr_na_3_en_Plausibel_2       := IsTr_na_3_en_Plausibel_1 && Plausibel_p_share_opp_W && Plausibel_p_share_opp_W_NW;
				attribute<bool>                      IsTr_na_3_en_Plausibel_2_extra := IsTr_na_3_en_Plausibel_2 && Plausibel_logies_wonen;
				
				unit<uint32> Sub_IsTr_na_1 := select_with_attr_by_cond(.,IsTr_na_1);
				unit<uint32> Sub_IsTr_na_2 := select_with_attr_by_cond(.,IsTr_na_2);
				unit<uint32> Sub_IsTr_na_3 := select_with_attr_by_cond(.,IsTr_na_3);
				unit<uint32> Sub_IsTr_na_3_en_Plausibel_1 := select_with_attr_by_cond(.,IsTr_na_3_en_Plausibel_1);
				unit<uint32> Sub_IsTr_na_3_en_Plausibel_2 := select_with_attr_by_cond(.,IsTr_na_3_en_Plausibel_2);
				unit<uint32> Sub_IsTr_na_3_en_Plausibel_2_extra := select_with_attr_by_cond(.,IsTr_na_3_en_Plausibel_2_extra);
			}
		}
	}
	
	container Mutaties_Per_VerslagMaand := 
		for_each_ne(
			Verslagmaanden/label
			, 'Mutaties_Per_VerslagMaand_T('+quote(Verslagmaanden/name)+'[int32], BAG_Tabel)'
		), using = "AdditionalClassifications";
	
	Template Mutaties_Per_VerslagMaand_T
	{
		parameter<int32>  datum;
		unit<uint32>      src;
		///
		// alle nieuwe mutaties van nieuwe objecten identificeer je door de begindatum >= datum en de begindatum < (datum + 100) te nemen. E.g. datum=20130801: begindatum= 20130805
		unit<uint32> SelectieMoment := select_with_org_rel(
																src/begindatum >= datum && src/begindatum < (datum + 100i)                            //identificatie van nieuwe (vervangende) objecten
															)
		{
			attribute<rdc>                     geometry              := src/geometry[org_rel];
			attribute<rdc>                     pand_geometry (poly)  := src/pand_geometry[org_rel];
			attribute<uint64>                  vbo_bag_nr            := src/vbo_bag_nr[org_rel];
			attribute<uint64>                  pand_bag_nr           := src/pand_bag_nr[org_rel];
			attribute<jaar>                    pand_bouwjaar         := src/pand_bouwjaar[org_rel];
			attribute<string>                  pv_begindatum_key     := src/pv_begindatum_key[org_rel];
			attribute<bool>                    WasObjectVoorraadBijStartBAG := src/WasObjectVoorraadBijStartBAG[org_rel];
			attribute<int32>                   vbo_oppervlakte       := src/vbo_oppervlakte[org_rel];
			attribute<int32>                   MutatieMaand          := const(datum / 100i, .);
			attribute<int32>                   begindatum            := src/begindatum[org_rel];
			attribute<vbo_status>              prev_vbo_status_rel   := src/prev_vbo_status_rel[org_rel];
			attribute<vbo_status>              vbo_status_rel        := src/vbo_status_rel[org_rel];
			attribute<pand_status_w_Undefined> prev_pand_status_rel  := src/prev_pand_status_rel[org_rel];
			attribute<pand_status>             pand_status_rel       := src/pand_status_rel[org_rel];
			
			attribute<bool>                    IsWaarschijnlijkCorrectieVanStudentenComplex_2          := src/IsWaarschijnlijkCorrectieVanStudentenComplex_2[org_rel];
			attribute<bool>                    VBO_WasWonen          := src/VBO_WasWonen[org_rel];
			attribute<bool>                    VBO_IsWonen           := src/VBO_IsWonen[org_rel];
			attribute<bool>                    vbo_WasVoorraad       := src/vbo_WasVoorraad[org_rel];
			attribute<bool>                    vbo_IsVoorraad        := src/vbo_IsVoorraad[org_rel];
			
			// attribute<bool>                    WasOverigeGebruiksfunctie     := src/WasOverigeGebruiksfunctie[org_rel];
			// attribute<bool>                    IsOverigeGebruiksfunctie      := src/IsOverigeGebruiksfunctie[org_rel];
			
			// attribute<bool>                    IsLogiesfunctie      := src/IsLogiesfunctie[org_rel];
			
			// attribute<uint32>                  pand_count_ZorgFuncties_StartBAG  := src/pand_count_ZorgFuncties_StartBAG[org_rel];
			// attribute<uint32>                  pand_count_new_WoonFuncties       := sum(VBO_IsWonen && vbo_IsVoorraad ? 1 : 0, uq_pand_nr_rel)[uq_pand_nr_rel];
			// attribute<bool>                    IsWaarschijnlijkCorrectieVanZorgNaarZorgwoonunits := pand_count_new_WoonFuncties > (pand_count_ZorgFuncties_StartBAG + 50);
			
			attribute<uq_pand_nr>              uq_pand_nr_rel        := rlookup(pand_bag_nr, uq_pand_nr/values);
			unit<uint32>                       uq_pand_nr            := unique(pand_bag_nr);
			
			attribute<uq_vbo_nr>               uq_vbo_nr_rel         := rlookup(vbo_bag_nr, uq_vbo_nr/values);
			unit<uint32>                       uq_vbo_nr             := unique(vbo_bag_nr);
			
			unit<uint32> InitialClassification := SelectieMoment
			{
				attribute<bool>                    IDEN_N                := src/IDEN_N[org_rel];
				attribute<bool>                    IDEN_T                := src/IDEN_T[org_rel];
				attribute<bool>                    IDEN_S                := src/IDEN_S[org_rel];
				attribute<bool>                    IDEN_O                := src/IDEN_O[org_rel];
				attribute<bool>                    IDEN_Cplus            := src/IDEN_Cplus[org_rel];
				attribute<bool>                    IDEN_Cmin             := src/IDEN_Cmin[org_rel];
				attribute<bool>                    IDEN_TMplus           := src/IDEN_TMplus[org_rel];
				attribute<bool>                    IDEN_TMmin            := src/IDEN_TMmin[org_rel];
				
				attribute<bool>                    IDEN_S_NW             := src/IDEN_S_NW[org_rel];
			}
			
			unit<uint32> Saldering_1e_Instantie := SelectieMoment
			{
				// saldeer meerdere transacties binnen een verslagmaand
				attribute<int32>                   count_N               := sum(InitialClassification/IDEN_N[int32],uq_vbo_nr_rel)[uq_vbo_nr_rel];
				attribute<int32>                   count_T               := sum(InitialClassification/IDEN_T[int32],uq_vbo_nr_rel)[uq_vbo_nr_rel];
				attribute<int32>                   count_S               := sum(InitialClassification/IDEN_S[int32],uq_vbo_nr_rel)[uq_vbo_nr_rel];
				attribute<int32>                   count_O               := sum(InitialClassification/IDEN_O[int32],uq_vbo_nr_rel)[uq_vbo_nr_rel];
				attribute<int32>                   count_Cplus           := sum(InitialClassification/IDEN_Cplus[int32],uq_vbo_nr_rel)[uq_vbo_nr_rel];
				attribute<int32>                   count_Cmin            := sum(InitialClassification/IDEN_Cmin[int32],uq_vbo_nr_rel)[uq_vbo_nr_rel];
				attribute<int32>                   count_TMplus          := sum(InitialClassification/IDEN_TMplus[int32],uq_vbo_nr_rel)[uq_vbo_nr_rel];
				attribute<int32>                   count_TMmin           := sum(InitialClassification/IDEN_TMmin[int32],uq_vbo_nr_rel)[uq_vbo_nr_rel];
				attribute<int32>                   count_S_NW            := sum(InitialClassification/IDEN_S_NW[int32],uq_vbo_nr_rel)[uq_vbo_nr_rel];
				
				attribute<int32>                   count_plus            := count_N + count_T + count_Cplus + count_TMplus;
				attribute<int32>                   count_min             := count_S + count_O + count_Cmin + count_TMmin;
				attribute<int32>                   saldo                 := count_plus - count_min;
				
				attribute<bool>                    IDEN_N                := switch(
																					 case(InitialClassification/IDEN_N && saldo == 0i, FALSE)                                            //saldering 'mutatie in 1e instantie'
																					,InitialClassification/IDEN_N
																				);
				attribute<bool>                    IDEN_T                := switch(
																					 case(InitialClassification/IDEN_T && saldo == 0i, FALSE)                                            //saldering 'mutatie in 1e instantie'
																					,InitialClassification/IDEN_T
																				);
				attribute<bool>                    IDEN_S                := switch(
																					 case(InitialClassification/IDEN_S && saldo == 0i, FALSE)                                            //saldering 'mutatie in 1e instantie'
																					,InitialClassification/IDEN_S
																				);
				attribute<bool>                    IDEN_O                := switch(
																					 case(InitialClassification/IDEN_O && saldo == 0i, FALSE)                                            //saldering 'mutatie in 1e instantie'
																					,InitialClassification/IDEN_O
																				);
				attribute<bool>                    IDEN_TMplus           := switch(
																					 case(InitialClassification/IDEN_TMplus && saldo == 0i, FALSE)                                       //saldering 'mutatie in 1e instantie'
																					,InitialClassification/IDEN_TMplus
																				);
				attribute<bool>                    IDEN_TMmin           := switch(
																					 case(InitialClassification/IDEN_TMmin && saldo == 0i, FALSE)                                        //saldering 'mutatie in 1e instantie'
																					,InitialClassification/IDEN_TMmin
																				);
				attribute<bool>                    IDEN_Cplus            := switch(
																					 case(InitialClassification/IDEN_Cplus && saldo == 0i, FALSE)                                        //saldering 'mutatie in 1e instantie'
																					,InitialClassification/IDEN_Cplus
																				);
				attribute<bool>                    IDEN_Cmin             := switch(
																					 case(InitialClassification/IDEN_Cmin && saldo == 0i, FALSE)                                         //saldering 'mutatie in 1e instantie'
																					,InitialClassification/IDEN_Cmin
																				);
																				
				attribute<bool>                    IDEN_S_NW             := InitialClassification/IDEN_S_NW;
			}
			
			unit<uint32> Correctie_1e_Instantie := SelectieMoment
			{
				attribute<bool>                    IDEN_N                := Saldering_1e_Instantie/IDEN_N;
				attribute<bool>                    IDEN_T                := switch(
																					case(Saldering_1e_Instantie/count_N > 0i 
																						&& Saldering_1e_Instantie/saldo > 0i, FALSE)                                       //correctie 'mutatie in 1e instantie' - a1
																					,Saldering_1e_Instantie/IDEN_T
																				);
				attribute<bool>                    IDEN_S                := Saldering_1e_Instantie/IDEN_S;
				attribute<bool>                    IDEN_O                := switch(
																					case(Saldering_1e_Instantie/count_S > 0i 
																						&& Saldering_1e_Instantie/saldo < 0i, FALSE)                                       //correctie 'mutatie in 1e instantie' - b1
																					,Saldering_1e_Instantie/IDEN_O
																				);
				attribute<bool>                    IDEN_TMplus           := Saldering_1e_Instantie/IDEN_TMplus;
				attribute<bool>                    IDEN_TMmin            := Saldering_1e_Instantie/IDEN_TMmin;
				attribute<bool>                    IDEN_Cplus            := switch(
																					case(Saldering_1e_Instantie/count_N > 0i 
																						&& Saldering_1e_Instantie/saldo > 0i, FALSE)                                       //correctie 'mutatie in 1e instantie' - a1
																					,case(Saldering_1e_Instantie/count_T > 0i 
																						&& Saldering_1e_Instantie/saldo > 0i, FALSE)                                       //correctie 'mutatie in 1e instantie' - a2
																					,Saldering_1e_Instantie/IDEN_Cplus
																				);
				attribute<bool>                    IDEN_Cmin             := switch(
																					case(Saldering_1e_Instantie/count_S > 0i 
																						&& Saldering_1e_Instantie/saldo < 0i, FALSE)                                       //correctie 'mutatie in 1e instantie' - b1
																					,case(Saldering_1e_Instantie/count_O > 0i 
																						&& Saldering_1e_Instantie/saldo < 0i, FALSE)                                       //correctie 'mutatie in 1e instantie' - b2
																					,Saldering_1e_Instantie/IDEN_Cmin
																				);
				attribute<bool>                    IDEN_S_NW             := Saldering_1e_Instantie/IDEN_S_NW;
			}
			
			unit<uint32> Correctie_2e_Instantie := SelectieMoment
			{
				attribute<bool>                    IDEN_N                := switch(
																					case(WasObjectVoorraadBijStartBAG 
																						&& Correctie_1e_Instantie/IDEN_N 
																						&& Saldering_1e_Instantie/saldo > 0i, FALSE)                                       //correctie 'mutatie in 2e instantie' - a1
																					,case(Saldering_1e_Instantie/count_N > 0i 
																						&& Saldering_1e_Instantie/saldo > 0i 
																						&& (Prev/IDEN_N_Prev/AnyTrue || Prev/IDEN_T_Prev/AnyTrue), FALSE)                 //correctie 'mutatie in 2e instantie' - a2  
																					,Correctie_1e_Instantie/IDEN_N
																				);
				attribute<bool>                    IDEN_T                := switch(
																					case(WasObjectVoorraadBijStartBAG 
																						&& Correctie_1e_Instantie/IDEN_T 
																						&& Saldering_1e_Instantie/saldo > 0i, FALSE)                                       //correctie 'mutatie in 2e instantie' - a1
																					,case(Saldering_1e_Instantie/count_T > 0i 
																						&& Saldering_1e_Instantie/saldo > 0i 
																						&& (Prev/IDEN_N_Prev/AnyTrue || Prev/IDEN_T_Prev/AnyTrue), FALSE)                 //correctie 'mutatie in 2e instantie' - a2  
																					,Correctie_1e_Instantie/IDEN_T
																				);
				attribute<bool>                    IDEN_S                := switch(
																					case(Saldering_1e_Instantie/count_S > 0i 
																						&& Saldering_1e_Instantie/saldo < 0i 
																						&& (Prev/IDEN_S_Prev/AnyTrue || Prev/IDEN_O_Prev/AnyTrue), FALSE)                 //correctie 'mutatie in 2e instantie' - b  
																					,Correctie_1e_Instantie/IDEN_S
																				);
				attribute<bool>                    IDEN_O                := switch(
																					case(Saldering_1e_Instantie/count_O > 0i 
																						&& Saldering_1e_Instantie/saldo < 0i 
																						&& (Prev/IDEN_S_Prev/AnyTrue || Prev/IDEN_O_Prev/AnyTrue), FALSE)                 //correctie 'mutatie in 2e instantie' - b  
																					,Correctie_1e_Instantie/IDEN_O
																				);
																				
				attribute<bool>                    IDEN_TMplus           := switch(
																					case(Saldering_1e_Instantie/count_TMplus > 0i 
																						&& Saldering_1e_Instantie/saldo > 0i 
																						&& Prev/IDEN_TMplus_Prev/AnyTrue, FALSE)                 //correctie 'mutatie in 2e instantie' - a2  
																					,Correctie_1e_Instantie/IDEN_TMplus
																				);
				attribute<bool>                    IDEN_TMmin           := switch(
																					case(Saldering_1e_Instantie/count_TMmin > 0i 
																						&& Saldering_1e_Instantie/saldo < 0i 
																						&& Prev/IDEN_TMmin_Prev/AnyTrue, FALSE)                 //correctie 'mutatie in 2e instantie' - a2  
																					,Correctie_1e_Instantie/IDEN_TMmin
																				);
				// attribute<bool>                    IDEN_TMplus           := Correctie_1e_Instantie/IDEN_TMplus;
				// attribute<bool>                    IDEN_TMmin            := Correctie_1e_Instantie/IDEN_TMmin;
				attribute<bool>                    IDEN_Cplus            := switch(
																					case(WasObjectVoorraadBijStartBAG 
																						&& (Correctie_1e_Instantie/IDEN_N || Correctie_1e_Instantie/IDEN_T) 
																						&& Saldering_1e_Instantie/saldo > 0i, TRUE)                                        //correctie 'mutatie in 2e instantie' - a1
																					,case((Saldering_1e_Instantie/count_N > 0i || Saldering_1e_Instantie/count_T > 0i) 
																						&& Saldering_1e_Instantie/saldo > 0i 
																						&& (Prev/IDEN_N_Prev/AnyTrue || Prev/IDEN_T_Prev/AnyTrue), TRUE)                  //correctie 'mutatie in 2e instantie' - a2  
																					,Correctie_1e_Instantie/IDEN_Cplus
																				);
				attribute<bool>                    IDEN_Cmin             := switch(
																					case((Saldering_1e_Instantie/count_S > 0i || Saldering_1e_Instantie/count_O > 0i) 
																						&& Saldering_1e_Instantie/saldo < 0i 
																						&& (Prev/IDEN_S_Prev/AnyTrue || Prev/IDEN_O_Prev/AnyTrue), TRUE)                  //correctie 'mutatie in 2e instantie' - b  
																					,Correctie_1e_Instantie/IDEN_Cmin
																				);
																				
				attribute<bool>                    IDEN_S_NW             := switch(
																					case(Saldering_1e_Instantie/count_S_NW > 0i 
																						&& Prev/IDEN_S_NW_Prev/AnyTrue, FALSE)                 //correctie 'mutatie in 2e instantie' - b  
																					,Correctie_1e_Instantie/IDEN_S_NW
																				);
			} 
		
			container Prev 
			{
				unit<uint32> PrevVerslagmaanden := select_with_attr_by_cond(Verslagmaanden, int32(Verslagmaanden/name) < datum);
				
				container IDEN_N_Prev :=
					for_each_nedv(
						PrevVerslagmaanden/label
						, 'rjoin(vbo_bag_nr, Mutaties_Per_VerslagMaand/'+PrevVerslagmaanden/label+'/SelectieMoment/vbo_bag_nr, Mutaties_Per_VerslagMaand/'+PrevVerslagmaanden/label+'/SelectieMoment/Saldering_na_2e_Instantie/IDEN_N)'
						, SelectieMoment
						, bool
					)
				{
					attribute<bool> AnyTrue (SelectieMoment) := = #PrevVerslagmaanden == 0 ? 'const(FALSE,SelectieMoment)' : 'or('+AsItemList(PrevVerslagmaanden/label)+')';
				}
				container IDEN_T_Prev :=
					for_each_nedv(
						PrevVerslagmaanden/label
						, 'rjoin(vbo_bag_nr, Mutaties_Per_VerslagMaand/'+PrevVerslagmaanden/label+'/SelectieMoment/vbo_bag_nr, Mutaties_Per_VerslagMaand/'+PrevVerslagmaanden/label+'/SelectieMoment/Saldering_na_2e_Instantie/IDEN_T)'
						, SelectieMoment
						, bool
					)
				{
					attribute<bool> AnyTrue (SelectieMoment) := = #PrevVerslagmaanden == 0 ? 'const(FALSE,SelectieMoment)' : 'or('+AsItemList(PrevVerslagmaanden/label)+')';
				}
				container IDEN_S_Prev :=
					for_each_nedv(
						PrevVerslagmaanden/label
						, 'rjoin(vbo_bag_nr, Mutaties_Per_VerslagMaand/'+PrevVerslagmaanden/label+'/SelectieMoment/vbo_bag_nr, Mutaties_Per_VerslagMaand/'+PrevVerslagmaanden/label+'/SelectieMoment/Saldering_na_2e_Instantie/IDEN_S)'
						, SelectieMoment
						, bool
					)
				{
					attribute<bool> AnyTrue (SelectieMoment) := = #PrevVerslagmaanden == 0 ? 'const(FALSE,SelectieMoment)' : 'or('+AsItemList(PrevVerslagmaanden/label)+')';
				}
				container IDEN_O_Prev :=
					for_each_nedv(
						PrevVerslagmaanden/label
						, 'rjoin(vbo_bag_nr, Mutaties_Per_VerslagMaand/'+PrevVerslagmaanden/label+'/SelectieMoment/vbo_bag_nr, Mutaties_Per_VerslagMaand/'+PrevVerslagmaanden/label+'/SelectieMoment/Saldering_na_2e_Instantie/IDEN_O)'
						, SelectieMoment
						, bool
					)
				{
					attribute<bool> AnyTrue (SelectieMoment) := = #PrevVerslagmaanden == 0 ? 'const(FALSE,SelectieMoment)' : 'or('+AsItemList(PrevVerslagmaanden/label)+')';
				}
				
				container IDEN_S_NW_Prev :=
					for_each_nedv(
						PrevVerslagmaanden/label
						, 'rjoin(vbo_bag_nr, Mutaties_Per_VerslagMaand/'+PrevVerslagmaanden/label+'/SelectieMoment/vbo_bag_nr, Mutaties_Per_VerslagMaand/'+PrevVerslagmaanden/label+'/SelectieMoment/Saldering_na_2e_Instantie/IDEN_S_NW)'
						, SelectieMoment
						, bool
					)
				{
					attribute<bool> AnyTrue (SelectieMoment) := = #PrevVerslagmaanden == 0 ? 'const(FALSE,SelectieMoment)' : 'or('+AsItemList(PrevVerslagmaanden/label)+')';
				}
				
				container IDEN_TMplus_Prev :=
					for_each_nedv(
						PrevVerslagmaanden/label
						, 'rjoin(vbo_bag_nr, Mutaties_Per_VerslagMaand/'+PrevVerslagmaanden/label+'/SelectieMoment/vbo_bag_nr, Mutaties_Per_VerslagMaand/'+PrevVerslagmaanden/label+'/SelectieMoment/Saldering_na_2e_Instantie/IDEN_TMplus)'
						, SelectieMoment
						, bool
					)
				{
					attribute<bool> AnyTrue (SelectieMoment) := = #PrevVerslagmaanden == 0 ? 'const(FALSE,SelectieMoment)' : 'or('+AsItemList(PrevVerslagmaanden/label)+')';
				}
				
				container IDEN_TMmin_Prev :=
					for_each_nedv(
						PrevVerslagmaanden/label
						, 'rjoin(vbo_bag_nr, Mutaties_Per_VerslagMaand/'+PrevVerslagmaanden/label+'/SelectieMoment/vbo_bag_nr, Mutaties_Per_VerslagMaand/'+PrevVerslagmaanden/label+'/SelectieMoment/Saldering_na_2e_Instantie/IDEN_TMmin)'
						, SelectieMoment
						, bool
					)
				{
					attribute<bool> AnyTrue (SelectieMoment) := = #PrevVerslagmaanden == 0 ? 'const(FALSE,SelectieMoment)' : 'or('+AsItemList(PrevVerslagmaanden/label)+')';
				}
			}
			
																			
																			
			unit<uint32> Saldering_na_2e_Instantie := SelectieMoment
			{
				// saldeer meerdere transacties binnen een verslagmaand
				attribute<int32>                   count_N               := sum(Correctie_2e_Instantie/IDEN_N[int32],uq_vbo_nr_rel)[uq_vbo_nr_rel];
				attribute<int32>                   count_T               := sum(Correctie_2e_Instantie/IDEN_T[int32],uq_vbo_nr_rel)[uq_vbo_nr_rel];
				attribute<int32>                   count_S               := sum(Correctie_2e_Instantie/IDEN_S[int32],uq_vbo_nr_rel)[uq_vbo_nr_rel];
				attribute<int32>                   count_O               := sum(Correctie_2e_Instantie/IDEN_O[int32],uq_vbo_nr_rel)[uq_vbo_nr_rel];
				attribute<int32>                   count_Cplus           := sum(Correctie_2e_Instantie/IDEN_Cplus[int32],uq_vbo_nr_rel)[uq_vbo_nr_rel];
				attribute<int32>                   count_Cmin            := sum(Correctie_2e_Instantie/IDEN_Cmin[int32],uq_vbo_nr_rel)[uq_vbo_nr_rel];
				attribute<int32>                   count_TMplus          := sum(Correctie_2e_Instantie/IDEN_TMplus[int32],uq_vbo_nr_rel)[uq_vbo_nr_rel];
				attribute<int32>                   count_TMmin           := sum(Correctie_2e_Instantie/IDEN_TMmin[int32],uq_vbo_nr_rel)[uq_vbo_nr_rel];
				
				attribute<int32>                   count_S_NW            := sum(Correctie_2e_Instantie/IDEN_S_NW[int32],uq_vbo_nr_rel)[uq_vbo_nr_rel];
				
				attribute<int32>                   count_plus            := count_N + count_T + count_Cplus + count_TMplus;
				attribute<int32>                   count_min             := count_S + count_O + count_Cmin + count_TMmin;
				attribute<int32>                   saldo                 := count_plus - count_min;
				
				attribute<bool>                    IDEN_N                := switch(
																					 case(Correctie_2e_Instantie/IDEN_N && saldo == 0i, FALSE)                                            //saldering 'mutatie in 1e instantie'
																					,Correctie_2e_Instantie/IDEN_N
																				);
				attribute<bool>                    IDEN_T                := switch(
																					 case(Correctie_2e_Instantie/IDEN_T && saldo == 0i, FALSE)                                            //saldering 'mutatie in 1e instantie'
																					,Correctie_2e_Instantie/IDEN_T
																				);
				attribute<bool>                    IDEN_S                := switch(
																					 case(Correctie_2e_Instantie/IDEN_S && saldo == 0i, FALSE)                                            //saldering 'mutatie in 1e instantie'
																					,Correctie_2e_Instantie/IDEN_S
																				);
				attribute<bool>                    IDEN_O                := switch(
																					 case(Correctie_2e_Instantie/IDEN_O && saldo == 0i, FALSE)                                            //saldering 'mutatie in 1e instantie'
																					,Correctie_2e_Instantie/IDEN_O
																				);
				attribute<bool>                    IDEN_TMplus           := switch(
																					 case(Correctie_2e_Instantie/IDEN_TMplus && saldo == 0i, FALSE)                                       //saldering 'mutatie in 1e instantie'
																					,Correctie_2e_Instantie/IDEN_TMplus
																				);
				attribute<bool>                    IDEN_TMmin           := switch(
																					 case(Correctie_2e_Instantie/IDEN_TMmin && saldo == 0i, FALSE)                                        //saldering 'mutatie in 1e instantie'
																					,Correctie_2e_Instantie/IDEN_TMmin
																				);
				attribute<bool>                    IDEN_Cplus            := switch(
																					 case(Correctie_2e_Instantie/IDEN_Cplus && saldo == 0i, FALSE)                                        //saldering 'mutatie in 1e instantie'
																					,Correctie_2e_Instantie/IDEN_Cplus
																				);
				attribute<bool>                    IDEN_Cmin             := switch(
																					 case(Correctie_2e_Instantie/IDEN_Cmin && saldo == 0i, FALSE)                                         //saldering 'mutatie in 1e instantie'
																					,Correctie_2e_Instantie/IDEN_Cmin
																				);
				attribute<bool>                    IDEN_S_NW             := Correctie_2e_Instantie/IDEN_S_NW;
																				
			}
																			
																			
			attribute<MutatieTypen>            MutatieTypen_rel            := switch(
																				 case(Saldering_na_2e_Instantie/IDEN_N, MutatieTypen/V/N)
																				,case(Saldering_na_2e_Instantie/IDEN_T, MutatieTypen/V/T)
																				,case(Saldering_na_2e_Instantie/IDEN_S, MutatieTypen/V/S)
																				,case(Saldering_na_2e_Instantie/IDEN_O, MutatieTypen/V/O)
																				,case(Saldering_na_2e_Instantie/IDEN_TMplus, MutatieTypen/V/TMplus)
																				,case(Saldering_na_2e_Instantie/IDEN_TMmin, MutatieTypen/V/TMmin)
																				,case(Saldering_na_2e_Instantie/IDEN_Cplus, MutatieTypen/V/Cplus)
																				,case(Saldering_na_2e_Instantie/IDEN_Cmin, MutatieTypen/V/Cmin)
																				,case(Saldering_na_2e_Instantie/IDEN_S_NW, MutatieTypen/V/S_nw)
																				,null_b
																			);
			
			//adhoc
			unit<uint32> sel := select_with_attr_by_cond(., MutatieTypen_rel == MutatieTypen/v/Cplus);
			
			unit<uint32> IsMutatie := select_with_attr_by_cond(., IsDefined(MutatieTypen_rel));
		
			container Totalen_PerMutatieType := 
				for_each_nedv(
					MutatieTypen/name
					, 'sum(Saldering_na_2e_Instantie/IDEN_'+MutatieTypen/name+'[int32])'
					, void
					, int32
				)
			{
				parameter<int32> Saldo := N + T + TMplus - S - O - TMmin+ Cplus - Cmin;
			}
		}
	}
	
	container MutatieResults_PerVerslagMaand :=
		for_each_nedv(
			MutatieTypen/name
			, replace('union_data(Verslagmaanden, '+AsList('Mutaties_Per_VerslagMaand/'+Verslagmaanden/label+'/SelectieMoment/Totalen_PerMutatieType/@MT@', ',')+')', '@MT@', MutatieTypen/name)
			, Verslagmaanden
			, int32
		)
	{
		attribute<int32>  Saldo (Verslagmaanden) := ='union_data(Verslagmaanden, '+AsList('Mutaties_Per_VerslagMaand/'+Verslagmaanden/label+'/SelectieMoment/Totalen_PerMutatieType/Saldo', ',')+')';
	}
	
	unit<uint32> Write_FinalMutationTable := ='union_unit('+AsItemList('Mutaties_Per_VerslagMaand/'+Verslagmaanden/label+'/SelectieMoment/IsMutatie')+')'
	, StorageName = "='%LocalDataProjDir%/Temp/FinalMutationTable_'+/Parameters/BAG_Selection_Area+'.fss'"
	{
		attribute<rdc>                     geometry              := ='union_data(.,'+AsItemList('Mutaties_Per_VerslagMaand/'+Verslagmaanden/label+'/SelectieMoment/IsMutatie/geometry')+')';
		attribute<rdc>                     pand_geometry (poly)  := ='union_data(.,'+AsItemList('Mutaties_Per_VerslagMaand/'+Verslagmaanden/label+'/SelectieMoment/IsMutatie/pand_geometry')+')';
		attribute<uint64>                  vbo_bag_nr            := ='union_data(.,'+AsItemList('Mutaties_Per_VerslagMaand/'+Verslagmaanden/label+'/SelectieMoment/IsMutatie/vbo_bag_nr')+')';
		attribute<jaar>                    pand_bouwjaar         := ='union_data(.,'+AsItemList('Mutaties_Per_VerslagMaand/'+Verslagmaanden/label+'/SelectieMoment/IsMutatie/pand_bouwjaar')+')';
		attribute<uint64>                  pand_bag_nr           := ='union_data(.,'+AsItemList('Mutaties_Per_VerslagMaand/'+Verslagmaanden/label+'/SelectieMoment/IsMutatie/pand_bag_nr')+')';
		attribute<int32>                   vbo_oppervlakte       := ='union_data(.,'+AsItemList('Mutaties_Per_VerslagMaand/'+Verslagmaanden/label+'/SelectieMoment/IsMutatie/vbo_oppervlakte')+')';
		attribute<int32>                   MutatieMaand          := ='union_data(.,'+AsItemList('Mutaties_Per_VerslagMaand/'+Verslagmaanden/label+'/SelectieMoment/IsMutatie/MutatieMaand')+')';
		attribute<MutatieTypen>            MutatieTypen_rel_src  := ='union_data(.,'+AsItemList('Mutaties_Per_VerslagMaand/'+Verslagmaanden/label+'/SelectieMoment/IsMutatie/MutatieTypen_rel')+')';
		attribute<MutatieTypen>            MutatieTypen_rel      := switch(
																		 case(MutatieTypen_rel_src == MutatieTypen/v/Cplus, MutatieTypen/V/T)
																		,case(MutatieTypen_rel_src == MutatieTypen/v/Cmin, MutatieTypen/V/O)
																		,MutatieTypen_rel_src
																	);
	}
	
	unit<uint32> Read_FinalMutationTable
	: StorageName = "='%LocalDataProjDir%/Temp/FinalMutationTable_'+/Parameters/BAG_Selection_Area+'.fss'"
	, StorageReadOnly = "true"
	{
		attribute<rdc>                     geometry;
		attribute<rdc>                     pand_geometry (poly);
		attribute<uint64>                  vbo_bag_nr;
		attribute<jaar>                    pand_bouwjaar;
		attribute<uint64>                  pand_bag_nr;
		attribute<int32>                   vbo_oppervlakte;
		attribute<int32>                   MutatieMaand;
		attribute<MutatieTypen>            MutatieTypen_rel_src;
		attribute<MutatieTypen>            MutatieTypen_rel;
		
		attribute<Read_PerObject_Export>   Read_PerObject_Export_rel := rlookup(vbo_bag_nr, Read_PerObject_Export/vbo_bag_nr);
		attribute<bool>                    IsNotCategorised          := IsNull(Read_PerObject_Export_rel) ;
		
		// attribute<bool>                    LigtInLigplaats                 := IsDefined(point_in_polygon(geometry, /SourceData/BAG/VolledigeBAG/Standplaatsen/standplaats/geometry));
		// attribute<bool>                    LigtInLigplaats_start_2016_2017 := IsDefined(point_in_polygon(geometry, /SourceData/BAG/VolledigeBAG/Standplaatsen/src/SelectieMoment/geometry));
		
		// unit<uint32> adhoc  := select_with_attr_by_cond(., LigtInLigplaats);
		// unit<uint32> adhoc2 := select_with_attr_by_cond(., LigtInLigplaats_start_2016_2017);
	}
	
	unit<uint32> FinalMutationTable := = Parameters/Use_Ontkoppelde_FinalMutations ? 'Read_FinalMutationTable' : 'Write_FinalMutationTable';
	
	
	unit<uint32> BeginVoorraad      := select_with_org_rel(BAG_Tabel/ActiefOp_StartBAG)
	{
		attribute<rdc>                     geometry              := BAG_Tabel/geometry[org_rel];
		attribute<rdc>                     pand_geometry (poly)  := BAG_Tabel/pand_geometry[org_rel];
		attribute<uint64>                  vbo_bag_nr            := BAG_Tabel/vbo_bag_nr[org_rel];
		attribute<uint64>                  pand_bag_nr           := BAG_Tabel/pand_bag_nr[org_rel];
		attribute<vbo_gebruiksdoel_ext>    gebruiksdoel_rel      := BAG_Tabel/gebruiksdoel_rel[org_rel];
		// attribute<AMS>                     Amsterdam_rel         := point_in_polygon(geometry, AMS/geometry);
		
		// unit<uint32> Amsterdam_VBO := select_with_org_rel(IsDefined(./Amsterdam_rel))
		// , StorageName = "%LocalDataProjDir%/Maps/Voorraad_VBO.shp"
		// , StorageType = "gdalwrite.vect"
		// {
			// attribute<rdc>                     geometry              := ../geometry[org_rel];
			// attribute<vbo_gebruiksdoel_ext>    gebruiksdoel_rel      := ../gebruiksdoel_rel[org_rel];
			// attribute<..>                      org_rel               : DisableStorage = "true";
		// }
		// unit<uint32> Amsterdam_Pand := select_with_org_rel(IsDefined(./Amsterdam_rel))
		// , StorageName = "%LocalDataProjDir%/Maps/Voorraad_Pand.shp"
		// , StorageType = "gdalwrite.vect"
		// {
			// attribute<rdc>                     geometry (poly)  := ../pand_geometry[org_rel];
			// attribute<..>                      org_rel               : DisableStorage = "true";
		// }
	}
}
